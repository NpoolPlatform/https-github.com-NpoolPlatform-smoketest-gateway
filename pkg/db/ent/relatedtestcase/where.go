// Code generated by ent, DO NOT EDIT.

package relatedtestcase

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// CondType applies equality check predicate on the "cond_type" field. It's identical to CondTypeEQ.
func CondType(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCondType), v))
	})
}

// TestCaseID applies equality check predicate on the "test_case_id" field. It's identical to TestCaseIDEQ.
func TestCaseID(v uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTestCaseID), v))
	})
}

// RelatedTestCaseID applies equality check predicate on the "related_test_case_id" field. It's identical to RelatedTestCaseIDEQ.
func RelatedTestCaseID(v uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRelatedTestCaseID), v))
	})
}

// ArgumentsTransfer applies equality check predicate on the "arguments_transfer" field. It's identical to ArgumentsTransferEQ.
func ArgumentsTransfer(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArgumentsTransfer), v))
	})
}

// Index applies equality check predicate on the "index" field. It's identical to IndexEQ.
func Index(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIndex), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.RelatedTestCase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.RelatedTestCase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.RelatedTestCase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.RelatedTestCase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.RelatedTestCase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.RelatedTestCase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// CondTypeEQ applies the EQ predicate on the "cond_type" field.
func CondTypeEQ(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCondType), v))
	})
}

// CondTypeNEQ applies the NEQ predicate on the "cond_type" field.
func CondTypeNEQ(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCondType), v))
	})
}

// CondTypeIn applies the In predicate on the "cond_type" field.
func CondTypeIn(vs ...string) predicate.RelatedTestCase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCondType), v...))
	})
}

// CondTypeNotIn applies the NotIn predicate on the "cond_type" field.
func CondTypeNotIn(vs ...string) predicate.RelatedTestCase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCondType), v...))
	})
}

// CondTypeGT applies the GT predicate on the "cond_type" field.
func CondTypeGT(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCondType), v))
	})
}

// CondTypeGTE applies the GTE predicate on the "cond_type" field.
func CondTypeGTE(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCondType), v))
	})
}

// CondTypeLT applies the LT predicate on the "cond_type" field.
func CondTypeLT(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCondType), v))
	})
}

// CondTypeLTE applies the LTE predicate on the "cond_type" field.
func CondTypeLTE(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCondType), v))
	})
}

// CondTypeContains applies the Contains predicate on the "cond_type" field.
func CondTypeContains(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCondType), v))
	})
}

// CondTypeHasPrefix applies the HasPrefix predicate on the "cond_type" field.
func CondTypeHasPrefix(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCondType), v))
	})
}

// CondTypeHasSuffix applies the HasSuffix predicate on the "cond_type" field.
func CondTypeHasSuffix(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCondType), v))
	})
}

// CondTypeIsNil applies the IsNil predicate on the "cond_type" field.
func CondTypeIsNil() predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCondType)))
	})
}

// CondTypeNotNil applies the NotNil predicate on the "cond_type" field.
func CondTypeNotNil() predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCondType)))
	})
}

// CondTypeEqualFold applies the EqualFold predicate on the "cond_type" field.
func CondTypeEqualFold(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCondType), v))
	})
}

// CondTypeContainsFold applies the ContainsFold predicate on the "cond_type" field.
func CondTypeContainsFold(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCondType), v))
	})
}

// TestCaseIDEQ applies the EQ predicate on the "test_case_id" field.
func TestCaseIDEQ(v uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTestCaseID), v))
	})
}

// TestCaseIDNEQ applies the NEQ predicate on the "test_case_id" field.
func TestCaseIDNEQ(v uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTestCaseID), v))
	})
}

// TestCaseIDIn applies the In predicate on the "test_case_id" field.
func TestCaseIDIn(vs ...uuid.UUID) predicate.RelatedTestCase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTestCaseID), v...))
	})
}

// TestCaseIDNotIn applies the NotIn predicate on the "test_case_id" field.
func TestCaseIDNotIn(vs ...uuid.UUID) predicate.RelatedTestCase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTestCaseID), v...))
	})
}

// TestCaseIDGT applies the GT predicate on the "test_case_id" field.
func TestCaseIDGT(v uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTestCaseID), v))
	})
}

// TestCaseIDGTE applies the GTE predicate on the "test_case_id" field.
func TestCaseIDGTE(v uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTestCaseID), v))
	})
}

// TestCaseIDLT applies the LT predicate on the "test_case_id" field.
func TestCaseIDLT(v uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTestCaseID), v))
	})
}

// TestCaseIDLTE applies the LTE predicate on the "test_case_id" field.
func TestCaseIDLTE(v uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTestCaseID), v))
	})
}

// TestCaseIDIsNil applies the IsNil predicate on the "test_case_id" field.
func TestCaseIDIsNil() predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTestCaseID)))
	})
}

// TestCaseIDNotNil applies the NotNil predicate on the "test_case_id" field.
func TestCaseIDNotNil() predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTestCaseID)))
	})
}

// RelatedTestCaseIDEQ applies the EQ predicate on the "related_test_case_id" field.
func RelatedTestCaseIDEQ(v uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRelatedTestCaseID), v))
	})
}

// RelatedTestCaseIDNEQ applies the NEQ predicate on the "related_test_case_id" field.
func RelatedTestCaseIDNEQ(v uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRelatedTestCaseID), v))
	})
}

// RelatedTestCaseIDIn applies the In predicate on the "related_test_case_id" field.
func RelatedTestCaseIDIn(vs ...uuid.UUID) predicate.RelatedTestCase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRelatedTestCaseID), v...))
	})
}

// RelatedTestCaseIDNotIn applies the NotIn predicate on the "related_test_case_id" field.
func RelatedTestCaseIDNotIn(vs ...uuid.UUID) predicate.RelatedTestCase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRelatedTestCaseID), v...))
	})
}

// RelatedTestCaseIDGT applies the GT predicate on the "related_test_case_id" field.
func RelatedTestCaseIDGT(v uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRelatedTestCaseID), v))
	})
}

// RelatedTestCaseIDGTE applies the GTE predicate on the "related_test_case_id" field.
func RelatedTestCaseIDGTE(v uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRelatedTestCaseID), v))
	})
}

// RelatedTestCaseIDLT applies the LT predicate on the "related_test_case_id" field.
func RelatedTestCaseIDLT(v uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRelatedTestCaseID), v))
	})
}

// RelatedTestCaseIDLTE applies the LTE predicate on the "related_test_case_id" field.
func RelatedTestCaseIDLTE(v uuid.UUID) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRelatedTestCaseID), v))
	})
}

// RelatedTestCaseIDIsNil applies the IsNil predicate on the "related_test_case_id" field.
func RelatedTestCaseIDIsNil() predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRelatedTestCaseID)))
	})
}

// RelatedTestCaseIDNotNil applies the NotNil predicate on the "related_test_case_id" field.
func RelatedTestCaseIDNotNil() predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRelatedTestCaseID)))
	})
}

// ArgumentsTransferEQ applies the EQ predicate on the "arguments_transfer" field.
func ArgumentsTransferEQ(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArgumentsTransfer), v))
	})
}

// ArgumentsTransferNEQ applies the NEQ predicate on the "arguments_transfer" field.
func ArgumentsTransferNEQ(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldArgumentsTransfer), v))
	})
}

// ArgumentsTransferIn applies the In predicate on the "arguments_transfer" field.
func ArgumentsTransferIn(vs ...string) predicate.RelatedTestCase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldArgumentsTransfer), v...))
	})
}

// ArgumentsTransferNotIn applies the NotIn predicate on the "arguments_transfer" field.
func ArgumentsTransferNotIn(vs ...string) predicate.RelatedTestCase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldArgumentsTransfer), v...))
	})
}

// ArgumentsTransferGT applies the GT predicate on the "arguments_transfer" field.
func ArgumentsTransferGT(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldArgumentsTransfer), v))
	})
}

// ArgumentsTransferGTE applies the GTE predicate on the "arguments_transfer" field.
func ArgumentsTransferGTE(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldArgumentsTransfer), v))
	})
}

// ArgumentsTransferLT applies the LT predicate on the "arguments_transfer" field.
func ArgumentsTransferLT(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldArgumentsTransfer), v))
	})
}

// ArgumentsTransferLTE applies the LTE predicate on the "arguments_transfer" field.
func ArgumentsTransferLTE(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldArgumentsTransfer), v))
	})
}

// ArgumentsTransferContains applies the Contains predicate on the "arguments_transfer" field.
func ArgumentsTransferContains(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldArgumentsTransfer), v))
	})
}

// ArgumentsTransferHasPrefix applies the HasPrefix predicate on the "arguments_transfer" field.
func ArgumentsTransferHasPrefix(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldArgumentsTransfer), v))
	})
}

// ArgumentsTransferHasSuffix applies the HasSuffix predicate on the "arguments_transfer" field.
func ArgumentsTransferHasSuffix(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldArgumentsTransfer), v))
	})
}

// ArgumentsTransferIsNil applies the IsNil predicate on the "arguments_transfer" field.
func ArgumentsTransferIsNil() predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldArgumentsTransfer)))
	})
}

// ArgumentsTransferNotNil applies the NotNil predicate on the "arguments_transfer" field.
func ArgumentsTransferNotNil() predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldArgumentsTransfer)))
	})
}

// ArgumentsTransferEqualFold applies the EqualFold predicate on the "arguments_transfer" field.
func ArgumentsTransferEqualFold(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldArgumentsTransfer), v))
	})
}

// ArgumentsTransferContainsFold applies the ContainsFold predicate on the "arguments_transfer" field.
func ArgumentsTransferContainsFold(v string) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldArgumentsTransfer), v))
	})
}

// IndexEQ applies the EQ predicate on the "index" field.
func IndexEQ(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIndex), v))
	})
}

// IndexNEQ applies the NEQ predicate on the "index" field.
func IndexNEQ(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIndex), v))
	})
}

// IndexIn applies the In predicate on the "index" field.
func IndexIn(vs ...uint32) predicate.RelatedTestCase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIndex), v...))
	})
}

// IndexNotIn applies the NotIn predicate on the "index" field.
func IndexNotIn(vs ...uint32) predicate.RelatedTestCase {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIndex), v...))
	})
}

// IndexGT applies the GT predicate on the "index" field.
func IndexGT(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIndex), v))
	})
}

// IndexGTE applies the GTE predicate on the "index" field.
func IndexGTE(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIndex), v))
	})
}

// IndexLT applies the LT predicate on the "index" field.
func IndexLT(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIndex), v))
	})
}

// IndexLTE applies the LTE predicate on the "index" field.
func IndexLTE(v uint32) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIndex), v))
	})
}

// IndexIsNil applies the IsNil predicate on the "index" field.
func IndexIsNil() predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIndex)))
	})
}

// IndexNotNil applies the NotNil predicate on the "index" field.
func IndexNotNil() predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIndex)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RelatedTestCase) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RelatedTestCase) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RelatedTestCase) predicate.RelatedTestCase {
	return predicate.RelatedTestCase(func(s *sql.Selector) {
		p(s.Not())
	})
}
