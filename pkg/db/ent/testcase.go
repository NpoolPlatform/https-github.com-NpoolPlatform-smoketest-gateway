// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/testcase"
	"github.com/google/uuid"
)

// TestCase is the model entity for the TestCase schema.
type TestCase struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ModuleID holds the value of the "module_id" field.
	ModuleID uuid.UUID `json:"module_id,omitempty"`
	// APIID holds the value of the "api_id" field.
	APIID uuid.UUID `json:"api_id,omitempty"`
	// Input holds the value of the "input" field.
	Input string `json:"input,omitempty"`
	// InputDesc holds the value of the "input_desc" field.
	InputDesc string `json:"input_desc,omitempty"`
	// Expectation holds the value of the "expectation" field.
	Expectation string `json:"expectation,omitempty"`
	// OutputDesc holds the value of the "output_desc" field.
	OutputDesc string `json:"output_desc,omitempty"`
	// TestCaseType holds the value of the "test_case_type" field.
	TestCaseType string `json:"test_case_type,omitempty"`
	// TestCaseClass holds the value of the "test_case_class" field.
	TestCaseClass string `json:"test_case_class,omitempty"`
	// Deprecated holds the value of the "deprecated" field.
	Deprecated bool `json:"deprecated,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestCase) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case testcase.FieldDeprecated:
			values[i] = new(sql.NullBool)
		case testcase.FieldID, testcase.FieldCreatedAt, testcase.FieldUpdatedAt, testcase.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case testcase.FieldName, testcase.FieldDescription, testcase.FieldInput, testcase.FieldInputDesc, testcase.FieldExpectation, testcase.FieldOutputDesc, testcase.FieldTestCaseType, testcase.FieldTestCaseClass:
			values[i] = new(sql.NullString)
		case testcase.FieldEntID, testcase.FieldModuleID, testcase.FieldAPIID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TestCase", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestCase fields.
func (tc *TestCase) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testcase.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tc.ID = uint32(value.Int64)
		case testcase.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tc.CreatedAt = uint32(value.Int64)
			}
		case testcase.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tc.UpdatedAt = uint32(value.Int64)
			}
		case testcase.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tc.DeletedAt = uint32(value.Int64)
			}
		case testcase.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				tc.EntID = *value
			}
		case testcase.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tc.Name = value.String
			}
		case testcase.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				tc.Description = value.String
			}
		case testcase.FieldModuleID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field module_id", values[i])
			} else if value != nil {
				tc.ModuleID = *value
			}
		case testcase.FieldAPIID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field api_id", values[i])
			} else if value != nil {
				tc.APIID = *value
			}
		case testcase.FieldInput:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field input", values[i])
			} else if value.Valid {
				tc.Input = value.String
			}
		case testcase.FieldInputDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field input_desc", values[i])
			} else if value.Valid {
				tc.InputDesc = value.String
			}
		case testcase.FieldExpectation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field expectation", values[i])
			} else if value.Valid {
				tc.Expectation = value.String
			}
		case testcase.FieldOutputDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field output_desc", values[i])
			} else if value.Valid {
				tc.OutputDesc = value.String
			}
		case testcase.FieldTestCaseType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field test_case_type", values[i])
			} else if value.Valid {
				tc.TestCaseType = value.String
			}
		case testcase.FieldTestCaseClass:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field test_case_class", values[i])
			} else if value.Valid {
				tc.TestCaseClass = value.String
			}
		case testcase.FieldDeprecated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deprecated", values[i])
			} else if value.Valid {
				tc.Deprecated = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TestCase.
// Note that you need to call TestCase.Unwrap() before calling this method if this TestCase
// was returned from a transaction, and the transaction was committed or rolled back.
func (tc *TestCase) Update() *TestCaseUpdateOne {
	return (&TestCaseClient{config: tc.config}).UpdateOne(tc)
}

// Unwrap unwraps the TestCase entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tc *TestCase) Unwrap() *TestCase {
	_tx, ok := tc.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestCase is not a transactional entity")
	}
	tc.config.driver = _tx.drv
	return tc
}

// String implements the fmt.Stringer.
func (tc *TestCase) String() string {
	var builder strings.Builder
	builder.WriteString("TestCase(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", tc.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", tc.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", tc.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", tc.EntID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(tc.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(tc.Description)
	builder.WriteString(", ")
	builder.WriteString("module_id=")
	builder.WriteString(fmt.Sprintf("%v", tc.ModuleID))
	builder.WriteString(", ")
	builder.WriteString("api_id=")
	builder.WriteString(fmt.Sprintf("%v", tc.APIID))
	builder.WriteString(", ")
	builder.WriteString("input=")
	builder.WriteString(tc.Input)
	builder.WriteString(", ")
	builder.WriteString("input_desc=")
	builder.WriteString(tc.InputDesc)
	builder.WriteString(", ")
	builder.WriteString("expectation=")
	builder.WriteString(tc.Expectation)
	builder.WriteString(", ")
	builder.WriteString("output_desc=")
	builder.WriteString(tc.OutputDesc)
	builder.WriteString(", ")
	builder.WriteString("test_case_type=")
	builder.WriteString(tc.TestCaseType)
	builder.WriteString(", ")
	builder.WriteString("test_case_class=")
	builder.WriteString(tc.TestCaseClass)
	builder.WriteString(", ")
	builder.WriteString("deprecated=")
	builder.WriteString(fmt.Sprintf("%v", tc.Deprecated))
	builder.WriteByte(')')
	return builder.String()
}

// TestCases is a parsable slice of TestCase.
type TestCases []*TestCase

func (tc TestCases) config(cfg config) {
	for _i := range tc {
		tc[_i].config = cfg
	}
}
