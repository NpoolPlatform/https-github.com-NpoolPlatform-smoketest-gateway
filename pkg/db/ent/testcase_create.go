// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/testcase"
	"github.com/google/uuid"
)

// TestCaseCreate is the builder for creating a TestCase entity.
type TestCaseCreate struct {
	config
	mutation *TestCaseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tcc *TestCaseCreate) SetCreatedAt(u uint32) *TestCaseCreate {
	tcc.mutation.SetCreatedAt(u)
	return tcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableCreatedAt(u *uint32) *TestCaseCreate {
	if u != nil {
		tcc.SetCreatedAt(*u)
	}
	return tcc
}

// SetUpdatedAt sets the "updated_at" field.
func (tcc *TestCaseCreate) SetUpdatedAt(u uint32) *TestCaseCreate {
	tcc.mutation.SetUpdatedAt(u)
	return tcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableUpdatedAt(u *uint32) *TestCaseCreate {
	if u != nil {
		tcc.SetUpdatedAt(*u)
	}
	return tcc
}

// SetDeletedAt sets the "deleted_at" field.
func (tcc *TestCaseCreate) SetDeletedAt(u uint32) *TestCaseCreate {
	tcc.mutation.SetDeletedAt(u)
	return tcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableDeletedAt(u *uint32) *TestCaseCreate {
	if u != nil {
		tcc.SetDeletedAt(*u)
	}
	return tcc
}

// SetName sets the "name" field.
func (tcc *TestCaseCreate) SetName(s string) *TestCaseCreate {
	tcc.mutation.SetName(s)
	return tcc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableName(s *string) *TestCaseCreate {
	if s != nil {
		tcc.SetName(*s)
	}
	return tcc
}

// SetDescription sets the "description" field.
func (tcc *TestCaseCreate) SetDescription(s string) *TestCaseCreate {
	tcc.mutation.SetDescription(s)
	return tcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableDescription(s *string) *TestCaseCreate {
	if s != nil {
		tcc.SetDescription(*s)
	}
	return tcc
}

// SetModuleID sets the "module_id" field.
func (tcc *TestCaseCreate) SetModuleID(u uuid.UUID) *TestCaseCreate {
	tcc.mutation.SetModuleID(u)
	return tcc
}

// SetNillableModuleID sets the "module_id" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableModuleID(u *uuid.UUID) *TestCaseCreate {
	if u != nil {
		tcc.SetModuleID(*u)
	}
	return tcc
}

// SetAPIID sets the "api_id" field.
func (tcc *TestCaseCreate) SetAPIID(u uuid.UUID) *TestCaseCreate {
	tcc.mutation.SetAPIID(u)
	return tcc
}

// SetNillableAPIID sets the "api_id" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableAPIID(u *uuid.UUID) *TestCaseCreate {
	if u != nil {
		tcc.SetAPIID(*u)
	}
	return tcc
}

// SetArguments sets the "arguments" field.
func (tcc *TestCaseCreate) SetArguments(s string) *TestCaseCreate {
	tcc.mutation.SetArguments(s)
	return tcc
}

// SetNillableArguments sets the "arguments" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableArguments(s *string) *TestCaseCreate {
	if s != nil {
		tcc.SetArguments(*s)
	}
	return tcc
}

// SetArgTypeDescription sets the "arg_type_description" field.
func (tcc *TestCaseCreate) SetArgTypeDescription(s string) *TestCaseCreate {
	tcc.mutation.SetArgTypeDescription(s)
	return tcc
}

// SetNillableArgTypeDescription sets the "arg_type_description" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableArgTypeDescription(s *string) *TestCaseCreate {
	if s != nil {
		tcc.SetArgTypeDescription(*s)
	}
	return tcc
}

// SetExpectationResult sets the "expectation_result" field.
func (tcc *TestCaseCreate) SetExpectationResult(s string) *TestCaseCreate {
	tcc.mutation.SetExpectationResult(s)
	return tcc
}

// SetNillableExpectationResult sets the "expectation_result" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableExpectationResult(s *string) *TestCaseCreate {
	if s != nil {
		tcc.SetExpectationResult(*s)
	}
	return tcc
}

// SetTestCaseType sets the "test_case_type" field.
func (tcc *TestCaseCreate) SetTestCaseType(s string) *TestCaseCreate {
	tcc.mutation.SetTestCaseType(s)
	return tcc
}

// SetNillableTestCaseType sets the "test_case_type" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableTestCaseType(s *string) *TestCaseCreate {
	if s != nil {
		tcc.SetTestCaseType(*s)
	}
	return tcc
}

// SetDeprecated sets the "deprecated" field.
func (tcc *TestCaseCreate) SetDeprecated(b bool) *TestCaseCreate {
	tcc.mutation.SetDeprecated(b)
	return tcc
}

// SetNillableDeprecated sets the "deprecated" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableDeprecated(b *bool) *TestCaseCreate {
	if b != nil {
		tcc.SetDeprecated(*b)
	}
	return tcc
}

// SetID sets the "id" field.
func (tcc *TestCaseCreate) SetID(u uuid.UUID) *TestCaseCreate {
	tcc.mutation.SetID(u)
	return tcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableID(u *uuid.UUID) *TestCaseCreate {
	if u != nil {
		tcc.SetID(*u)
	}
	return tcc
}

// Mutation returns the TestCaseMutation object of the builder.
func (tcc *TestCaseCreate) Mutation() *TestCaseMutation {
	return tcc.mutation
}

// Save creates the TestCase in the database.
func (tcc *TestCaseCreate) Save(ctx context.Context) (*TestCase, error) {
	var (
		err  error
		node *TestCase
	)
	if err := tcc.defaults(); err != nil {
		return nil, err
	}
	if len(tcc.hooks) == 0 {
		if err = tcc.check(); err != nil {
			return nil, err
		}
		node, err = tcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestCaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tcc.check(); err != nil {
				return nil, err
			}
			tcc.mutation = mutation
			if node, err = tcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tcc.hooks) - 1; i >= 0; i-- {
			if tcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TestCase)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TestCaseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TestCaseCreate) SaveX(ctx context.Context) *TestCase {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TestCaseCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TestCaseCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TestCaseCreate) defaults() error {
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		if testcase.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized testcase.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := testcase.DefaultCreatedAt()
		tcc.mutation.SetCreatedAt(v)
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		if testcase.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testcase.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testcase.DefaultUpdatedAt()
		tcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tcc.mutation.DeletedAt(); !ok {
		if testcase.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized testcase.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := testcase.DefaultDeletedAt()
		tcc.mutation.SetDeletedAt(v)
	}
	if _, ok := tcc.mutation.Name(); !ok {
		v := testcase.DefaultName
		tcc.mutation.SetName(v)
	}
	if _, ok := tcc.mutation.Description(); !ok {
		v := testcase.DefaultDescription
		tcc.mutation.SetDescription(v)
	}
	if _, ok := tcc.mutation.ModuleID(); !ok {
		if testcase.DefaultModuleID == nil {
			return fmt.Errorf("ent: uninitialized testcase.DefaultModuleID (forgotten import ent/runtime?)")
		}
		v := testcase.DefaultModuleID()
		tcc.mutation.SetModuleID(v)
	}
	if _, ok := tcc.mutation.APIID(); !ok {
		if testcase.DefaultAPIID == nil {
			return fmt.Errorf("ent: uninitialized testcase.DefaultAPIID (forgotten import ent/runtime?)")
		}
		v := testcase.DefaultAPIID()
		tcc.mutation.SetAPIID(v)
	}
	if _, ok := tcc.mutation.Arguments(); !ok {
		v := testcase.DefaultArguments
		tcc.mutation.SetArguments(v)
	}
	if _, ok := tcc.mutation.ArgTypeDescription(); !ok {
		v := testcase.DefaultArgTypeDescription
		tcc.mutation.SetArgTypeDescription(v)
	}
	if _, ok := tcc.mutation.ExpectationResult(); !ok {
		v := testcase.DefaultExpectationResult
		tcc.mutation.SetExpectationResult(v)
	}
	if _, ok := tcc.mutation.TestCaseType(); !ok {
		v := testcase.DefaultTestCaseType
		tcc.mutation.SetTestCaseType(v)
	}
	if _, ok := tcc.mutation.Deprecated(); !ok {
		v := testcase.DefaultDeprecated
		tcc.mutation.SetDeprecated(v)
	}
	if _, ok := tcc.mutation.ID(); !ok {
		if testcase.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized testcase.DefaultID (forgotten import ent/runtime?)")
		}
		v := testcase.DefaultID()
		tcc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TestCaseCreate) check() error {
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TestCase.created_at"`)}
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TestCase.updated_at"`)}
	}
	if _, ok := tcc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "TestCase.deleted_at"`)}
	}
	return nil
}

func (tcc *TestCaseCreate) sqlSave(ctx context.Context) (*TestCase, error) {
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (tcc *TestCaseCreate) createSpec() (*TestCase, *sqlgraph.CreateSpec) {
	var (
		_node = &TestCase{config: tcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: testcase.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: testcase.FieldID,
			},
		}
	)
	_spec.OnConflict = tcc.conflict
	if id, ok := tcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testcase.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testcase.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tcc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testcase.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := tcc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tcc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := tcc.mutation.ModuleID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: testcase.FieldModuleID,
		})
		_node.ModuleID = value
	}
	if value, ok := tcc.mutation.APIID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: testcase.FieldAPIID,
		})
		_node.APIID = value
	}
	if value, ok := tcc.mutation.Arguments(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldArguments,
		})
		_node.Arguments = value
	}
	if value, ok := tcc.mutation.ArgTypeDescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldArgTypeDescription,
		})
		_node.ArgTypeDescription = value
	}
	if value, ok := tcc.mutation.ExpectationResult(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldExpectationResult,
		})
		_node.ExpectationResult = value
	}
	if value, ok := tcc.mutation.TestCaseType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldTestCaseType,
		})
		_node.TestCaseType = value
	}
	if value, ok := tcc.mutation.Deprecated(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: testcase.FieldDeprecated,
		})
		_node.Deprecated = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TestCase.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestCaseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (tcc *TestCaseCreate) OnConflict(opts ...sql.ConflictOption) *TestCaseUpsertOne {
	tcc.conflict = opts
	return &TestCaseUpsertOne{
		create: tcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TestCase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tcc *TestCaseCreate) OnConflictColumns(columns ...string) *TestCaseUpsertOne {
	tcc.conflict = append(tcc.conflict, sql.ConflictColumns(columns...))
	return &TestCaseUpsertOne{
		create: tcc,
	}
}

type (
	// TestCaseUpsertOne is the builder for "upsert"-ing
	//  one TestCase node.
	TestCaseUpsertOne struct {
		create *TestCaseCreate
	}

	// TestCaseUpsert is the "OnConflict" setter.
	TestCaseUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *TestCaseUpsert) SetCreatedAt(v uint32) *TestCaseUpsert {
	u.Set(testcase.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TestCaseUpsert) UpdateCreatedAt() *TestCaseUpsert {
	u.SetExcluded(testcase.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TestCaseUpsert) AddCreatedAt(v uint32) *TestCaseUpsert {
	u.Add(testcase.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TestCaseUpsert) SetUpdatedAt(v uint32) *TestCaseUpsert {
	u.Set(testcase.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TestCaseUpsert) UpdateUpdatedAt() *TestCaseUpsert {
	u.SetExcluded(testcase.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TestCaseUpsert) AddUpdatedAt(v uint32) *TestCaseUpsert {
	u.Add(testcase.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TestCaseUpsert) SetDeletedAt(v uint32) *TestCaseUpsert {
	u.Set(testcase.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TestCaseUpsert) UpdateDeletedAt() *TestCaseUpsert {
	u.SetExcluded(testcase.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TestCaseUpsert) AddDeletedAt(v uint32) *TestCaseUpsert {
	u.Add(testcase.FieldDeletedAt, v)
	return u
}

// SetName sets the "name" field.
func (u *TestCaseUpsert) SetName(v string) *TestCaseUpsert {
	u.Set(testcase.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TestCaseUpsert) UpdateName() *TestCaseUpsert {
	u.SetExcluded(testcase.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *TestCaseUpsert) ClearName() *TestCaseUpsert {
	u.SetNull(testcase.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *TestCaseUpsert) SetDescription(v string) *TestCaseUpsert {
	u.Set(testcase.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TestCaseUpsert) UpdateDescription() *TestCaseUpsert {
	u.SetExcluded(testcase.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *TestCaseUpsert) ClearDescription() *TestCaseUpsert {
	u.SetNull(testcase.FieldDescription)
	return u
}

// SetModuleID sets the "module_id" field.
func (u *TestCaseUpsert) SetModuleID(v uuid.UUID) *TestCaseUpsert {
	u.Set(testcase.FieldModuleID, v)
	return u
}

// UpdateModuleID sets the "module_id" field to the value that was provided on create.
func (u *TestCaseUpsert) UpdateModuleID() *TestCaseUpsert {
	u.SetExcluded(testcase.FieldModuleID)
	return u
}

// ClearModuleID clears the value of the "module_id" field.
func (u *TestCaseUpsert) ClearModuleID() *TestCaseUpsert {
	u.SetNull(testcase.FieldModuleID)
	return u
}

// SetAPIID sets the "api_id" field.
func (u *TestCaseUpsert) SetAPIID(v uuid.UUID) *TestCaseUpsert {
	u.Set(testcase.FieldAPIID, v)
	return u
}

// UpdateAPIID sets the "api_id" field to the value that was provided on create.
func (u *TestCaseUpsert) UpdateAPIID() *TestCaseUpsert {
	u.SetExcluded(testcase.FieldAPIID)
	return u
}

// ClearAPIID clears the value of the "api_id" field.
func (u *TestCaseUpsert) ClearAPIID() *TestCaseUpsert {
	u.SetNull(testcase.FieldAPIID)
	return u
}

// SetArguments sets the "arguments" field.
func (u *TestCaseUpsert) SetArguments(v string) *TestCaseUpsert {
	u.Set(testcase.FieldArguments, v)
	return u
}

// UpdateArguments sets the "arguments" field to the value that was provided on create.
func (u *TestCaseUpsert) UpdateArguments() *TestCaseUpsert {
	u.SetExcluded(testcase.FieldArguments)
	return u
}

// ClearArguments clears the value of the "arguments" field.
func (u *TestCaseUpsert) ClearArguments() *TestCaseUpsert {
	u.SetNull(testcase.FieldArguments)
	return u
}

// SetArgTypeDescription sets the "arg_type_description" field.
func (u *TestCaseUpsert) SetArgTypeDescription(v string) *TestCaseUpsert {
	u.Set(testcase.FieldArgTypeDescription, v)
	return u
}

// UpdateArgTypeDescription sets the "arg_type_description" field to the value that was provided on create.
func (u *TestCaseUpsert) UpdateArgTypeDescription() *TestCaseUpsert {
	u.SetExcluded(testcase.FieldArgTypeDescription)
	return u
}

// ClearArgTypeDescription clears the value of the "arg_type_description" field.
func (u *TestCaseUpsert) ClearArgTypeDescription() *TestCaseUpsert {
	u.SetNull(testcase.FieldArgTypeDescription)
	return u
}

// SetExpectationResult sets the "expectation_result" field.
func (u *TestCaseUpsert) SetExpectationResult(v string) *TestCaseUpsert {
	u.Set(testcase.FieldExpectationResult, v)
	return u
}

// UpdateExpectationResult sets the "expectation_result" field to the value that was provided on create.
func (u *TestCaseUpsert) UpdateExpectationResult() *TestCaseUpsert {
	u.SetExcluded(testcase.FieldExpectationResult)
	return u
}

// ClearExpectationResult clears the value of the "expectation_result" field.
func (u *TestCaseUpsert) ClearExpectationResult() *TestCaseUpsert {
	u.SetNull(testcase.FieldExpectationResult)
	return u
}

// SetTestCaseType sets the "test_case_type" field.
func (u *TestCaseUpsert) SetTestCaseType(v string) *TestCaseUpsert {
	u.Set(testcase.FieldTestCaseType, v)
	return u
}

// UpdateTestCaseType sets the "test_case_type" field to the value that was provided on create.
func (u *TestCaseUpsert) UpdateTestCaseType() *TestCaseUpsert {
	u.SetExcluded(testcase.FieldTestCaseType)
	return u
}

// ClearTestCaseType clears the value of the "test_case_type" field.
func (u *TestCaseUpsert) ClearTestCaseType() *TestCaseUpsert {
	u.SetNull(testcase.FieldTestCaseType)
	return u
}

// SetDeprecated sets the "deprecated" field.
func (u *TestCaseUpsert) SetDeprecated(v bool) *TestCaseUpsert {
	u.Set(testcase.FieldDeprecated, v)
	return u
}

// UpdateDeprecated sets the "deprecated" field to the value that was provided on create.
func (u *TestCaseUpsert) UpdateDeprecated() *TestCaseUpsert {
	u.SetExcluded(testcase.FieldDeprecated)
	return u
}

// ClearDeprecated clears the value of the "deprecated" field.
func (u *TestCaseUpsert) ClearDeprecated() *TestCaseUpsert {
	u.SetNull(testcase.FieldDeprecated)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TestCase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(testcase.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TestCaseUpsertOne) UpdateNewValues() *TestCaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(testcase.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TestCase.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TestCaseUpsertOne) Ignore() *TestCaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestCaseUpsertOne) DoNothing() *TestCaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestCaseCreate.OnConflict
// documentation for more info.
func (u *TestCaseUpsertOne) Update(set func(*TestCaseUpsert)) *TestCaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestCaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TestCaseUpsertOne) SetCreatedAt(v uint32) *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TestCaseUpsertOne) AddCreatedAt(v uint32) *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TestCaseUpsertOne) UpdateCreatedAt() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TestCaseUpsertOne) SetUpdatedAt(v uint32) *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TestCaseUpsertOne) AddUpdatedAt(v uint32) *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TestCaseUpsertOne) UpdateUpdatedAt() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TestCaseUpsertOne) SetDeletedAt(v uint32) *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TestCaseUpsertOne) AddDeletedAt(v uint32) *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TestCaseUpsertOne) UpdateDeletedAt() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *TestCaseUpsertOne) SetName(v string) *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TestCaseUpsertOne) UpdateName() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TestCaseUpsertOne) ClearName() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.ClearName()
	})
}

// SetDescription sets the "description" field.
func (u *TestCaseUpsertOne) SetDescription(v string) *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TestCaseUpsertOne) UpdateDescription() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *TestCaseUpsertOne) ClearDescription() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.ClearDescription()
	})
}

// SetModuleID sets the "module_id" field.
func (u *TestCaseUpsertOne) SetModuleID(v uuid.UUID) *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetModuleID(v)
	})
}

// UpdateModuleID sets the "module_id" field to the value that was provided on create.
func (u *TestCaseUpsertOne) UpdateModuleID() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateModuleID()
	})
}

// ClearModuleID clears the value of the "module_id" field.
func (u *TestCaseUpsertOne) ClearModuleID() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.ClearModuleID()
	})
}

// SetAPIID sets the "api_id" field.
func (u *TestCaseUpsertOne) SetAPIID(v uuid.UUID) *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetAPIID(v)
	})
}

// UpdateAPIID sets the "api_id" field to the value that was provided on create.
func (u *TestCaseUpsertOne) UpdateAPIID() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateAPIID()
	})
}

// ClearAPIID clears the value of the "api_id" field.
func (u *TestCaseUpsertOne) ClearAPIID() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.ClearAPIID()
	})
}

// SetArguments sets the "arguments" field.
func (u *TestCaseUpsertOne) SetArguments(v string) *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetArguments(v)
	})
}

// UpdateArguments sets the "arguments" field to the value that was provided on create.
func (u *TestCaseUpsertOne) UpdateArguments() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateArguments()
	})
}

// ClearArguments clears the value of the "arguments" field.
func (u *TestCaseUpsertOne) ClearArguments() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.ClearArguments()
	})
}

// SetArgTypeDescription sets the "arg_type_description" field.
func (u *TestCaseUpsertOne) SetArgTypeDescription(v string) *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetArgTypeDescription(v)
	})
}

// UpdateArgTypeDescription sets the "arg_type_description" field to the value that was provided on create.
func (u *TestCaseUpsertOne) UpdateArgTypeDescription() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateArgTypeDescription()
	})
}

// ClearArgTypeDescription clears the value of the "arg_type_description" field.
func (u *TestCaseUpsertOne) ClearArgTypeDescription() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.ClearArgTypeDescription()
	})
}

// SetExpectationResult sets the "expectation_result" field.
func (u *TestCaseUpsertOne) SetExpectationResult(v string) *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetExpectationResult(v)
	})
}

// UpdateExpectationResult sets the "expectation_result" field to the value that was provided on create.
func (u *TestCaseUpsertOne) UpdateExpectationResult() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateExpectationResult()
	})
}

// ClearExpectationResult clears the value of the "expectation_result" field.
func (u *TestCaseUpsertOne) ClearExpectationResult() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.ClearExpectationResult()
	})
}

// SetTestCaseType sets the "test_case_type" field.
func (u *TestCaseUpsertOne) SetTestCaseType(v string) *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetTestCaseType(v)
	})
}

// UpdateTestCaseType sets the "test_case_type" field to the value that was provided on create.
func (u *TestCaseUpsertOne) UpdateTestCaseType() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateTestCaseType()
	})
}

// ClearTestCaseType clears the value of the "test_case_type" field.
func (u *TestCaseUpsertOne) ClearTestCaseType() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.ClearTestCaseType()
	})
}

// SetDeprecated sets the "deprecated" field.
func (u *TestCaseUpsertOne) SetDeprecated(v bool) *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetDeprecated(v)
	})
}

// UpdateDeprecated sets the "deprecated" field to the value that was provided on create.
func (u *TestCaseUpsertOne) UpdateDeprecated() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateDeprecated()
	})
}

// ClearDeprecated clears the value of the "deprecated" field.
func (u *TestCaseUpsertOne) ClearDeprecated() *TestCaseUpsertOne {
	return u.Update(func(s *TestCaseUpsert) {
		s.ClearDeprecated()
	})
}

// Exec executes the query.
func (u *TestCaseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TestCaseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestCaseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TestCaseUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TestCaseUpsertOne.ID is not supported by MySQL driver. Use TestCaseUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TestCaseUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TestCaseCreateBulk is the builder for creating many TestCase entities in bulk.
type TestCaseCreateBulk struct {
	config
	builders []*TestCaseCreate
	conflict []sql.ConflictOption
}

// Save creates the TestCase entities in the database.
func (tccb *TestCaseCreateBulk) Save(ctx context.Context) ([]*TestCase, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TestCase, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestCaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TestCaseCreateBulk) SaveX(ctx context.Context) []*TestCase {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TestCaseCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TestCaseCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TestCase.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestCaseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (tccb *TestCaseCreateBulk) OnConflict(opts ...sql.ConflictOption) *TestCaseUpsertBulk {
	tccb.conflict = opts
	return &TestCaseUpsertBulk{
		create: tccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TestCase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tccb *TestCaseCreateBulk) OnConflictColumns(columns ...string) *TestCaseUpsertBulk {
	tccb.conflict = append(tccb.conflict, sql.ConflictColumns(columns...))
	return &TestCaseUpsertBulk{
		create: tccb,
	}
}

// TestCaseUpsertBulk is the builder for "upsert"-ing
// a bulk of TestCase nodes.
type TestCaseUpsertBulk struct {
	create *TestCaseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TestCase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(testcase.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TestCaseUpsertBulk) UpdateNewValues() *TestCaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(testcase.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TestCase.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TestCaseUpsertBulk) Ignore() *TestCaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestCaseUpsertBulk) DoNothing() *TestCaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestCaseCreateBulk.OnConflict
// documentation for more info.
func (u *TestCaseUpsertBulk) Update(set func(*TestCaseUpsert)) *TestCaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestCaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TestCaseUpsertBulk) SetCreatedAt(v uint32) *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TestCaseUpsertBulk) AddCreatedAt(v uint32) *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TestCaseUpsertBulk) UpdateCreatedAt() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TestCaseUpsertBulk) SetUpdatedAt(v uint32) *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TestCaseUpsertBulk) AddUpdatedAt(v uint32) *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TestCaseUpsertBulk) UpdateUpdatedAt() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TestCaseUpsertBulk) SetDeletedAt(v uint32) *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TestCaseUpsertBulk) AddDeletedAt(v uint32) *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TestCaseUpsertBulk) UpdateDeletedAt() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *TestCaseUpsertBulk) SetName(v string) *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TestCaseUpsertBulk) UpdateName() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TestCaseUpsertBulk) ClearName() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.ClearName()
	})
}

// SetDescription sets the "description" field.
func (u *TestCaseUpsertBulk) SetDescription(v string) *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TestCaseUpsertBulk) UpdateDescription() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *TestCaseUpsertBulk) ClearDescription() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.ClearDescription()
	})
}

// SetModuleID sets the "module_id" field.
func (u *TestCaseUpsertBulk) SetModuleID(v uuid.UUID) *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetModuleID(v)
	})
}

// UpdateModuleID sets the "module_id" field to the value that was provided on create.
func (u *TestCaseUpsertBulk) UpdateModuleID() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateModuleID()
	})
}

// ClearModuleID clears the value of the "module_id" field.
func (u *TestCaseUpsertBulk) ClearModuleID() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.ClearModuleID()
	})
}

// SetAPIID sets the "api_id" field.
func (u *TestCaseUpsertBulk) SetAPIID(v uuid.UUID) *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetAPIID(v)
	})
}

// UpdateAPIID sets the "api_id" field to the value that was provided on create.
func (u *TestCaseUpsertBulk) UpdateAPIID() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateAPIID()
	})
}

// ClearAPIID clears the value of the "api_id" field.
func (u *TestCaseUpsertBulk) ClearAPIID() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.ClearAPIID()
	})
}

// SetArguments sets the "arguments" field.
func (u *TestCaseUpsertBulk) SetArguments(v string) *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetArguments(v)
	})
}

// UpdateArguments sets the "arguments" field to the value that was provided on create.
func (u *TestCaseUpsertBulk) UpdateArguments() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateArguments()
	})
}

// ClearArguments clears the value of the "arguments" field.
func (u *TestCaseUpsertBulk) ClearArguments() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.ClearArguments()
	})
}

// SetArgTypeDescription sets the "arg_type_description" field.
func (u *TestCaseUpsertBulk) SetArgTypeDescription(v string) *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetArgTypeDescription(v)
	})
}

// UpdateArgTypeDescription sets the "arg_type_description" field to the value that was provided on create.
func (u *TestCaseUpsertBulk) UpdateArgTypeDescription() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateArgTypeDescription()
	})
}

// ClearArgTypeDescription clears the value of the "arg_type_description" field.
func (u *TestCaseUpsertBulk) ClearArgTypeDescription() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.ClearArgTypeDescription()
	})
}

// SetExpectationResult sets the "expectation_result" field.
func (u *TestCaseUpsertBulk) SetExpectationResult(v string) *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetExpectationResult(v)
	})
}

// UpdateExpectationResult sets the "expectation_result" field to the value that was provided on create.
func (u *TestCaseUpsertBulk) UpdateExpectationResult() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateExpectationResult()
	})
}

// ClearExpectationResult clears the value of the "expectation_result" field.
func (u *TestCaseUpsertBulk) ClearExpectationResult() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.ClearExpectationResult()
	})
}

// SetTestCaseType sets the "test_case_type" field.
func (u *TestCaseUpsertBulk) SetTestCaseType(v string) *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetTestCaseType(v)
	})
}

// UpdateTestCaseType sets the "test_case_type" field to the value that was provided on create.
func (u *TestCaseUpsertBulk) UpdateTestCaseType() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateTestCaseType()
	})
}

// ClearTestCaseType clears the value of the "test_case_type" field.
func (u *TestCaseUpsertBulk) ClearTestCaseType() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.ClearTestCaseType()
	})
}

// SetDeprecated sets the "deprecated" field.
func (u *TestCaseUpsertBulk) SetDeprecated(v bool) *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.SetDeprecated(v)
	})
}

// UpdateDeprecated sets the "deprecated" field to the value that was provided on create.
func (u *TestCaseUpsertBulk) UpdateDeprecated() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.UpdateDeprecated()
	})
}

// ClearDeprecated clears the value of the "deprecated" field.
func (u *TestCaseUpsertBulk) ClearDeprecated() *TestCaseUpsertBulk {
	return u.Update(func(s *TestCaseUpsert) {
		s.ClearDeprecated()
	})
}

// Exec executes the query.
func (u *TestCaseUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TestCaseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TestCaseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestCaseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
