// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/planrelatedtestcase"
	"github.com/google/uuid"
)

// PlanRelatedTestCaseCreate is the builder for creating a PlanRelatedTestCase entity.
type PlanRelatedTestCaseCreate struct {
	config
	mutation *PlanRelatedTestCaseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (prtcc *PlanRelatedTestCaseCreate) SetCreatedAt(u uint32) *PlanRelatedTestCaseCreate {
	prtcc.mutation.SetCreatedAt(u)
	return prtcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (prtcc *PlanRelatedTestCaseCreate) SetNillableCreatedAt(u *uint32) *PlanRelatedTestCaseCreate {
	if u != nil {
		prtcc.SetCreatedAt(*u)
	}
	return prtcc
}

// SetUpdatedAt sets the "updated_at" field.
func (prtcc *PlanRelatedTestCaseCreate) SetUpdatedAt(u uint32) *PlanRelatedTestCaseCreate {
	prtcc.mutation.SetUpdatedAt(u)
	return prtcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (prtcc *PlanRelatedTestCaseCreate) SetNillableUpdatedAt(u *uint32) *PlanRelatedTestCaseCreate {
	if u != nil {
		prtcc.SetUpdatedAt(*u)
	}
	return prtcc
}

// SetDeletedAt sets the "deleted_at" field.
func (prtcc *PlanRelatedTestCaseCreate) SetDeletedAt(u uint32) *PlanRelatedTestCaseCreate {
	prtcc.mutation.SetDeletedAt(u)
	return prtcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (prtcc *PlanRelatedTestCaseCreate) SetNillableDeletedAt(u *uint32) *PlanRelatedTestCaseCreate {
	if u != nil {
		prtcc.SetDeletedAt(*u)
	}
	return prtcc
}

// SetTestPlanID sets the "test_plan_id" field.
func (prtcc *PlanRelatedTestCaseCreate) SetTestPlanID(u uuid.UUID) *PlanRelatedTestCaseCreate {
	prtcc.mutation.SetTestPlanID(u)
	return prtcc
}

// SetNillableTestPlanID sets the "test_plan_id" field if the given value is not nil.
func (prtcc *PlanRelatedTestCaseCreate) SetNillableTestPlanID(u *uuid.UUID) *PlanRelatedTestCaseCreate {
	if u != nil {
		prtcc.SetTestPlanID(*u)
	}
	return prtcc
}

// SetTestCaseID sets the "test_case_id" field.
func (prtcc *PlanRelatedTestCaseCreate) SetTestCaseID(u uuid.UUID) *PlanRelatedTestCaseCreate {
	prtcc.mutation.SetTestCaseID(u)
	return prtcc
}

// SetNillableTestCaseID sets the "test_case_id" field if the given value is not nil.
func (prtcc *PlanRelatedTestCaseCreate) SetNillableTestCaseID(u *uuid.UUID) *PlanRelatedTestCaseCreate {
	if u != nil {
		prtcc.SetTestCaseID(*u)
	}
	return prtcc
}

// SetTestCaseOutput sets the "test_case_output" field.
func (prtcc *PlanRelatedTestCaseCreate) SetTestCaseOutput(s string) *PlanRelatedTestCaseCreate {
	prtcc.mutation.SetTestCaseOutput(s)
	return prtcc
}

// SetNillableTestCaseOutput sets the "test_case_output" field if the given value is not nil.
func (prtcc *PlanRelatedTestCaseCreate) SetNillableTestCaseOutput(s *string) *PlanRelatedTestCaseCreate {
	if s != nil {
		prtcc.SetTestCaseOutput(*s)
	}
	return prtcc
}

// SetDescription sets the "description" field.
func (prtcc *PlanRelatedTestCaseCreate) SetDescription(s string) *PlanRelatedTestCaseCreate {
	prtcc.mutation.SetDescription(s)
	return prtcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (prtcc *PlanRelatedTestCaseCreate) SetNillableDescription(s *string) *PlanRelatedTestCaseCreate {
	if s != nil {
		prtcc.SetDescription(*s)
	}
	return prtcc
}

// SetTestUserID sets the "test_user_id" field.
func (prtcc *PlanRelatedTestCaseCreate) SetTestUserID(u uuid.UUID) *PlanRelatedTestCaseCreate {
	prtcc.mutation.SetTestUserID(u)
	return prtcc
}

// SetNillableTestUserID sets the "test_user_id" field if the given value is not nil.
func (prtcc *PlanRelatedTestCaseCreate) SetNillableTestUserID(u *uuid.UUID) *PlanRelatedTestCaseCreate {
	if u != nil {
		prtcc.SetTestUserID(*u)
	}
	return prtcc
}

// SetRunDuration sets the "run_duration" field.
func (prtcc *PlanRelatedTestCaseCreate) SetRunDuration(u uint32) *PlanRelatedTestCaseCreate {
	prtcc.mutation.SetRunDuration(u)
	return prtcc
}

// SetNillableRunDuration sets the "run_duration" field if the given value is not nil.
func (prtcc *PlanRelatedTestCaseCreate) SetNillableRunDuration(u *uint32) *PlanRelatedTestCaseCreate {
	if u != nil {
		prtcc.SetRunDuration(*u)
	}
	return prtcc
}

// SetTestCaseResult sets the "test_case_result" field.
func (prtcc *PlanRelatedTestCaseCreate) SetTestCaseResult(s string) *PlanRelatedTestCaseCreate {
	prtcc.mutation.SetTestCaseResult(s)
	return prtcc
}

// SetNillableTestCaseResult sets the "test_case_result" field if the given value is not nil.
func (prtcc *PlanRelatedTestCaseCreate) SetNillableTestCaseResult(s *string) *PlanRelatedTestCaseCreate {
	if s != nil {
		prtcc.SetTestCaseResult(*s)
	}
	return prtcc
}

// SetID sets the "id" field.
func (prtcc *PlanRelatedTestCaseCreate) SetID(u uuid.UUID) *PlanRelatedTestCaseCreate {
	prtcc.mutation.SetID(u)
	return prtcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (prtcc *PlanRelatedTestCaseCreate) SetNillableID(u *uuid.UUID) *PlanRelatedTestCaseCreate {
	if u != nil {
		prtcc.SetID(*u)
	}
	return prtcc
}

// Mutation returns the PlanRelatedTestCaseMutation object of the builder.
func (prtcc *PlanRelatedTestCaseCreate) Mutation() *PlanRelatedTestCaseMutation {
	return prtcc.mutation
}

// Save creates the PlanRelatedTestCase in the database.
func (prtcc *PlanRelatedTestCaseCreate) Save(ctx context.Context) (*PlanRelatedTestCase, error) {
	var (
		err  error
		node *PlanRelatedTestCase
	)
	if err := prtcc.defaults(); err != nil {
		return nil, err
	}
	if len(prtcc.hooks) == 0 {
		if err = prtcc.check(); err != nil {
			return nil, err
		}
		node, err = prtcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlanRelatedTestCaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = prtcc.check(); err != nil {
				return nil, err
			}
			prtcc.mutation = mutation
			if node, err = prtcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(prtcc.hooks) - 1; i >= 0; i-- {
			if prtcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = prtcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, prtcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PlanRelatedTestCase)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PlanRelatedTestCaseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (prtcc *PlanRelatedTestCaseCreate) SaveX(ctx context.Context) *PlanRelatedTestCase {
	v, err := prtcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prtcc *PlanRelatedTestCaseCreate) Exec(ctx context.Context) error {
	_, err := prtcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prtcc *PlanRelatedTestCaseCreate) ExecX(ctx context.Context) {
	if err := prtcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prtcc *PlanRelatedTestCaseCreate) defaults() error {
	if _, ok := prtcc.mutation.CreatedAt(); !ok {
		if planrelatedtestcase.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized planrelatedtestcase.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := planrelatedtestcase.DefaultCreatedAt()
		prtcc.mutation.SetCreatedAt(v)
	}
	if _, ok := prtcc.mutation.UpdatedAt(); !ok {
		if planrelatedtestcase.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized planrelatedtestcase.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := planrelatedtestcase.DefaultUpdatedAt()
		prtcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := prtcc.mutation.DeletedAt(); !ok {
		if planrelatedtestcase.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized planrelatedtestcase.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := planrelatedtestcase.DefaultDeletedAt()
		prtcc.mutation.SetDeletedAt(v)
	}
	if _, ok := prtcc.mutation.TestPlanID(); !ok {
		if planrelatedtestcase.DefaultTestPlanID == nil {
			return fmt.Errorf("ent: uninitialized planrelatedtestcase.DefaultTestPlanID (forgotten import ent/runtime?)")
		}
		v := planrelatedtestcase.DefaultTestPlanID()
		prtcc.mutation.SetTestPlanID(v)
	}
	if _, ok := prtcc.mutation.TestCaseID(); !ok {
		if planrelatedtestcase.DefaultTestCaseID == nil {
			return fmt.Errorf("ent: uninitialized planrelatedtestcase.DefaultTestCaseID (forgotten import ent/runtime?)")
		}
		v := planrelatedtestcase.DefaultTestCaseID()
		prtcc.mutation.SetTestCaseID(v)
	}
	if _, ok := prtcc.mutation.TestCaseOutput(); !ok {
		v := planrelatedtestcase.DefaultTestCaseOutput
		prtcc.mutation.SetTestCaseOutput(v)
	}
	if _, ok := prtcc.mutation.Description(); !ok {
		v := planrelatedtestcase.DefaultDescription
		prtcc.mutation.SetDescription(v)
	}
	if _, ok := prtcc.mutation.TestUserID(); !ok {
		if planrelatedtestcase.DefaultTestUserID == nil {
			return fmt.Errorf("ent: uninitialized planrelatedtestcase.DefaultTestUserID (forgotten import ent/runtime?)")
		}
		v := planrelatedtestcase.DefaultTestUserID()
		prtcc.mutation.SetTestUserID(v)
	}
	if _, ok := prtcc.mutation.RunDuration(); !ok {
		v := planrelatedtestcase.DefaultRunDuration
		prtcc.mutation.SetRunDuration(v)
	}
	if _, ok := prtcc.mutation.TestCaseResult(); !ok {
		v := planrelatedtestcase.DefaultTestCaseResult
		prtcc.mutation.SetTestCaseResult(v)
	}
	if _, ok := prtcc.mutation.ID(); !ok {
		if planrelatedtestcase.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized planrelatedtestcase.DefaultID (forgotten import ent/runtime?)")
		}
		v := planrelatedtestcase.DefaultID()
		prtcc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (prtcc *PlanRelatedTestCaseCreate) check() error {
	if _, ok := prtcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PlanRelatedTestCase.created_at"`)}
	}
	if _, ok := prtcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PlanRelatedTestCase.updated_at"`)}
	}
	if _, ok := prtcc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "PlanRelatedTestCase.deleted_at"`)}
	}
	return nil
}

func (prtcc *PlanRelatedTestCaseCreate) sqlSave(ctx context.Context) (*PlanRelatedTestCase, error) {
	_node, _spec := prtcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prtcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (prtcc *PlanRelatedTestCaseCreate) createSpec() (*PlanRelatedTestCase, *sqlgraph.CreateSpec) {
	var (
		_node = &PlanRelatedTestCase{config: prtcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: planrelatedtestcase.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: planrelatedtestcase.FieldID,
			},
		}
	)
	_spec.OnConflict = prtcc.conflict
	if id, ok := prtcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := prtcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: planrelatedtestcase.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := prtcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: planrelatedtestcase.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := prtcc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: planrelatedtestcase.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := prtcc.mutation.TestPlanID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: planrelatedtestcase.FieldTestPlanID,
		})
		_node.TestPlanID = value
	}
	if value, ok := prtcc.mutation.TestCaseID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: planrelatedtestcase.FieldTestCaseID,
		})
		_node.TestCaseID = value
	}
	if value, ok := prtcc.mutation.TestCaseOutput(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planrelatedtestcase.FieldTestCaseOutput,
		})
		_node.TestCaseOutput = value
	}
	if value, ok := prtcc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planrelatedtestcase.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := prtcc.mutation.TestUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: planrelatedtestcase.FieldTestUserID,
		})
		_node.TestUserID = value
	}
	if value, ok := prtcc.mutation.RunDuration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: planrelatedtestcase.FieldRunDuration,
		})
		_node.RunDuration = value
	}
	if value, ok := prtcc.mutation.TestCaseResult(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planrelatedtestcase.FieldTestCaseResult,
		})
		_node.TestCaseResult = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PlanRelatedTestCase.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlanRelatedTestCaseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (prtcc *PlanRelatedTestCaseCreate) OnConflict(opts ...sql.ConflictOption) *PlanRelatedTestCaseUpsertOne {
	prtcc.conflict = opts
	return &PlanRelatedTestCaseUpsertOne{
		create: prtcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PlanRelatedTestCase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (prtcc *PlanRelatedTestCaseCreate) OnConflictColumns(columns ...string) *PlanRelatedTestCaseUpsertOne {
	prtcc.conflict = append(prtcc.conflict, sql.ConflictColumns(columns...))
	return &PlanRelatedTestCaseUpsertOne{
		create: prtcc,
	}
}

type (
	// PlanRelatedTestCaseUpsertOne is the builder for "upsert"-ing
	//  one PlanRelatedTestCase node.
	PlanRelatedTestCaseUpsertOne struct {
		create *PlanRelatedTestCaseCreate
	}

	// PlanRelatedTestCaseUpsert is the "OnConflict" setter.
	PlanRelatedTestCaseUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PlanRelatedTestCaseUpsert) SetCreatedAt(v uint32) *PlanRelatedTestCaseUpsert {
	u.Set(planrelatedtestcase.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsert) UpdateCreatedAt() *PlanRelatedTestCaseUpsert {
	u.SetExcluded(planrelatedtestcase.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PlanRelatedTestCaseUpsert) AddCreatedAt(v uint32) *PlanRelatedTestCaseUpsert {
	u.Add(planrelatedtestcase.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanRelatedTestCaseUpsert) SetUpdatedAt(v uint32) *PlanRelatedTestCaseUpsert {
	u.Set(planrelatedtestcase.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsert) UpdateUpdatedAt() *PlanRelatedTestCaseUpsert {
	u.SetExcluded(planrelatedtestcase.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PlanRelatedTestCaseUpsert) AddUpdatedAt(v uint32) *PlanRelatedTestCaseUpsert {
	u.Add(planrelatedtestcase.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlanRelatedTestCaseUpsert) SetDeletedAt(v uint32) *PlanRelatedTestCaseUpsert {
	u.Set(planrelatedtestcase.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsert) UpdateDeletedAt() *PlanRelatedTestCaseUpsert {
	u.SetExcluded(planrelatedtestcase.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PlanRelatedTestCaseUpsert) AddDeletedAt(v uint32) *PlanRelatedTestCaseUpsert {
	u.Add(planrelatedtestcase.FieldDeletedAt, v)
	return u
}

// SetTestPlanID sets the "test_plan_id" field.
func (u *PlanRelatedTestCaseUpsert) SetTestPlanID(v uuid.UUID) *PlanRelatedTestCaseUpsert {
	u.Set(planrelatedtestcase.FieldTestPlanID, v)
	return u
}

// UpdateTestPlanID sets the "test_plan_id" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsert) UpdateTestPlanID() *PlanRelatedTestCaseUpsert {
	u.SetExcluded(planrelatedtestcase.FieldTestPlanID)
	return u
}

// ClearTestPlanID clears the value of the "test_plan_id" field.
func (u *PlanRelatedTestCaseUpsert) ClearTestPlanID() *PlanRelatedTestCaseUpsert {
	u.SetNull(planrelatedtestcase.FieldTestPlanID)
	return u
}

// SetTestCaseID sets the "test_case_id" field.
func (u *PlanRelatedTestCaseUpsert) SetTestCaseID(v uuid.UUID) *PlanRelatedTestCaseUpsert {
	u.Set(planrelatedtestcase.FieldTestCaseID, v)
	return u
}

// UpdateTestCaseID sets the "test_case_id" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsert) UpdateTestCaseID() *PlanRelatedTestCaseUpsert {
	u.SetExcluded(planrelatedtestcase.FieldTestCaseID)
	return u
}

// ClearTestCaseID clears the value of the "test_case_id" field.
func (u *PlanRelatedTestCaseUpsert) ClearTestCaseID() *PlanRelatedTestCaseUpsert {
	u.SetNull(planrelatedtestcase.FieldTestCaseID)
	return u
}

// SetTestCaseOutput sets the "test_case_output" field.
func (u *PlanRelatedTestCaseUpsert) SetTestCaseOutput(v string) *PlanRelatedTestCaseUpsert {
	u.Set(planrelatedtestcase.FieldTestCaseOutput, v)
	return u
}

// UpdateTestCaseOutput sets the "test_case_output" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsert) UpdateTestCaseOutput() *PlanRelatedTestCaseUpsert {
	u.SetExcluded(planrelatedtestcase.FieldTestCaseOutput)
	return u
}

// ClearTestCaseOutput clears the value of the "test_case_output" field.
func (u *PlanRelatedTestCaseUpsert) ClearTestCaseOutput() *PlanRelatedTestCaseUpsert {
	u.SetNull(planrelatedtestcase.FieldTestCaseOutput)
	return u
}

// SetDescription sets the "description" field.
func (u *PlanRelatedTestCaseUpsert) SetDescription(v string) *PlanRelatedTestCaseUpsert {
	u.Set(planrelatedtestcase.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsert) UpdateDescription() *PlanRelatedTestCaseUpsert {
	u.SetExcluded(planrelatedtestcase.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *PlanRelatedTestCaseUpsert) ClearDescription() *PlanRelatedTestCaseUpsert {
	u.SetNull(planrelatedtestcase.FieldDescription)
	return u
}

// SetTestUserID sets the "test_user_id" field.
func (u *PlanRelatedTestCaseUpsert) SetTestUserID(v uuid.UUID) *PlanRelatedTestCaseUpsert {
	u.Set(planrelatedtestcase.FieldTestUserID, v)
	return u
}

// UpdateTestUserID sets the "test_user_id" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsert) UpdateTestUserID() *PlanRelatedTestCaseUpsert {
	u.SetExcluded(planrelatedtestcase.FieldTestUserID)
	return u
}

// ClearTestUserID clears the value of the "test_user_id" field.
func (u *PlanRelatedTestCaseUpsert) ClearTestUserID() *PlanRelatedTestCaseUpsert {
	u.SetNull(planrelatedtestcase.FieldTestUserID)
	return u
}

// SetRunDuration sets the "run_duration" field.
func (u *PlanRelatedTestCaseUpsert) SetRunDuration(v uint32) *PlanRelatedTestCaseUpsert {
	u.Set(planrelatedtestcase.FieldRunDuration, v)
	return u
}

// UpdateRunDuration sets the "run_duration" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsert) UpdateRunDuration() *PlanRelatedTestCaseUpsert {
	u.SetExcluded(planrelatedtestcase.FieldRunDuration)
	return u
}

// AddRunDuration adds v to the "run_duration" field.
func (u *PlanRelatedTestCaseUpsert) AddRunDuration(v uint32) *PlanRelatedTestCaseUpsert {
	u.Add(planrelatedtestcase.FieldRunDuration, v)
	return u
}

// ClearRunDuration clears the value of the "run_duration" field.
func (u *PlanRelatedTestCaseUpsert) ClearRunDuration() *PlanRelatedTestCaseUpsert {
	u.SetNull(planrelatedtestcase.FieldRunDuration)
	return u
}

// SetTestCaseResult sets the "test_case_result" field.
func (u *PlanRelatedTestCaseUpsert) SetTestCaseResult(v string) *PlanRelatedTestCaseUpsert {
	u.Set(planrelatedtestcase.FieldTestCaseResult, v)
	return u
}

// UpdateTestCaseResult sets the "test_case_result" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsert) UpdateTestCaseResult() *PlanRelatedTestCaseUpsert {
	u.SetExcluded(planrelatedtestcase.FieldTestCaseResult)
	return u
}

// ClearTestCaseResult clears the value of the "test_case_result" field.
func (u *PlanRelatedTestCaseUpsert) ClearTestCaseResult() *PlanRelatedTestCaseUpsert {
	u.SetNull(planrelatedtestcase.FieldTestCaseResult)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PlanRelatedTestCase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(planrelatedtestcase.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PlanRelatedTestCaseUpsertOne) UpdateNewValues() *PlanRelatedTestCaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(planrelatedtestcase.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.PlanRelatedTestCase.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PlanRelatedTestCaseUpsertOne) Ignore() *PlanRelatedTestCaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlanRelatedTestCaseUpsertOne) DoNothing() *PlanRelatedTestCaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlanRelatedTestCaseCreate.OnConflict
// documentation for more info.
func (u *PlanRelatedTestCaseUpsertOne) Update(set func(*PlanRelatedTestCaseUpsert)) *PlanRelatedTestCaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlanRelatedTestCaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PlanRelatedTestCaseUpsertOne) SetCreatedAt(v uint32) *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PlanRelatedTestCaseUpsertOne) AddCreatedAt(v uint32) *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsertOne) UpdateCreatedAt() *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanRelatedTestCaseUpsertOne) SetUpdatedAt(v uint32) *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PlanRelatedTestCaseUpsertOne) AddUpdatedAt(v uint32) *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsertOne) UpdateUpdatedAt() *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlanRelatedTestCaseUpsertOne) SetDeletedAt(v uint32) *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PlanRelatedTestCaseUpsertOne) AddDeletedAt(v uint32) *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsertOne) UpdateDeletedAt() *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetTestPlanID sets the "test_plan_id" field.
func (u *PlanRelatedTestCaseUpsertOne) SetTestPlanID(v uuid.UUID) *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.SetTestPlanID(v)
	})
}

// UpdateTestPlanID sets the "test_plan_id" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsertOne) UpdateTestPlanID() *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.UpdateTestPlanID()
	})
}

// ClearTestPlanID clears the value of the "test_plan_id" field.
func (u *PlanRelatedTestCaseUpsertOne) ClearTestPlanID() *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.ClearTestPlanID()
	})
}

// SetTestCaseID sets the "test_case_id" field.
func (u *PlanRelatedTestCaseUpsertOne) SetTestCaseID(v uuid.UUID) *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.SetTestCaseID(v)
	})
}

// UpdateTestCaseID sets the "test_case_id" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsertOne) UpdateTestCaseID() *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.UpdateTestCaseID()
	})
}

// ClearTestCaseID clears the value of the "test_case_id" field.
func (u *PlanRelatedTestCaseUpsertOne) ClearTestCaseID() *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.ClearTestCaseID()
	})
}

// SetTestCaseOutput sets the "test_case_output" field.
func (u *PlanRelatedTestCaseUpsertOne) SetTestCaseOutput(v string) *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.SetTestCaseOutput(v)
	})
}

// UpdateTestCaseOutput sets the "test_case_output" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsertOne) UpdateTestCaseOutput() *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.UpdateTestCaseOutput()
	})
}

// ClearTestCaseOutput clears the value of the "test_case_output" field.
func (u *PlanRelatedTestCaseUpsertOne) ClearTestCaseOutput() *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.ClearTestCaseOutput()
	})
}

// SetDescription sets the "description" field.
func (u *PlanRelatedTestCaseUpsertOne) SetDescription(v string) *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsertOne) UpdateDescription() *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PlanRelatedTestCaseUpsertOne) ClearDescription() *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.ClearDescription()
	})
}

// SetTestUserID sets the "test_user_id" field.
func (u *PlanRelatedTestCaseUpsertOne) SetTestUserID(v uuid.UUID) *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.SetTestUserID(v)
	})
}

// UpdateTestUserID sets the "test_user_id" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsertOne) UpdateTestUserID() *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.UpdateTestUserID()
	})
}

// ClearTestUserID clears the value of the "test_user_id" field.
func (u *PlanRelatedTestCaseUpsertOne) ClearTestUserID() *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.ClearTestUserID()
	})
}

// SetRunDuration sets the "run_duration" field.
func (u *PlanRelatedTestCaseUpsertOne) SetRunDuration(v uint32) *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.SetRunDuration(v)
	})
}

// AddRunDuration adds v to the "run_duration" field.
func (u *PlanRelatedTestCaseUpsertOne) AddRunDuration(v uint32) *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.AddRunDuration(v)
	})
}

// UpdateRunDuration sets the "run_duration" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsertOne) UpdateRunDuration() *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.UpdateRunDuration()
	})
}

// ClearRunDuration clears the value of the "run_duration" field.
func (u *PlanRelatedTestCaseUpsertOne) ClearRunDuration() *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.ClearRunDuration()
	})
}

// SetTestCaseResult sets the "test_case_result" field.
func (u *PlanRelatedTestCaseUpsertOne) SetTestCaseResult(v string) *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.SetTestCaseResult(v)
	})
}

// UpdateTestCaseResult sets the "test_case_result" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsertOne) UpdateTestCaseResult() *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.UpdateTestCaseResult()
	})
}

// ClearTestCaseResult clears the value of the "test_case_result" field.
func (u *PlanRelatedTestCaseUpsertOne) ClearTestCaseResult() *PlanRelatedTestCaseUpsertOne {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.ClearTestCaseResult()
	})
}

// Exec executes the query.
func (u *PlanRelatedTestCaseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlanRelatedTestCaseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlanRelatedTestCaseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PlanRelatedTestCaseUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PlanRelatedTestCaseUpsertOne.ID is not supported by MySQL driver. Use PlanRelatedTestCaseUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PlanRelatedTestCaseUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PlanRelatedTestCaseCreateBulk is the builder for creating many PlanRelatedTestCase entities in bulk.
type PlanRelatedTestCaseCreateBulk struct {
	config
	builders []*PlanRelatedTestCaseCreate
	conflict []sql.ConflictOption
}

// Save creates the PlanRelatedTestCase entities in the database.
func (prtccb *PlanRelatedTestCaseCreateBulk) Save(ctx context.Context) ([]*PlanRelatedTestCase, error) {
	specs := make([]*sqlgraph.CreateSpec, len(prtccb.builders))
	nodes := make([]*PlanRelatedTestCase, len(prtccb.builders))
	mutators := make([]Mutator, len(prtccb.builders))
	for i := range prtccb.builders {
		func(i int, root context.Context) {
			builder := prtccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlanRelatedTestCaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prtccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = prtccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prtccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prtccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prtccb *PlanRelatedTestCaseCreateBulk) SaveX(ctx context.Context) []*PlanRelatedTestCase {
	v, err := prtccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prtccb *PlanRelatedTestCaseCreateBulk) Exec(ctx context.Context) error {
	_, err := prtccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prtccb *PlanRelatedTestCaseCreateBulk) ExecX(ctx context.Context) {
	if err := prtccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PlanRelatedTestCase.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlanRelatedTestCaseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (prtccb *PlanRelatedTestCaseCreateBulk) OnConflict(opts ...sql.ConflictOption) *PlanRelatedTestCaseUpsertBulk {
	prtccb.conflict = opts
	return &PlanRelatedTestCaseUpsertBulk{
		create: prtccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PlanRelatedTestCase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (prtccb *PlanRelatedTestCaseCreateBulk) OnConflictColumns(columns ...string) *PlanRelatedTestCaseUpsertBulk {
	prtccb.conflict = append(prtccb.conflict, sql.ConflictColumns(columns...))
	return &PlanRelatedTestCaseUpsertBulk{
		create: prtccb,
	}
}

// PlanRelatedTestCaseUpsertBulk is the builder for "upsert"-ing
// a bulk of PlanRelatedTestCase nodes.
type PlanRelatedTestCaseUpsertBulk struct {
	create *PlanRelatedTestCaseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PlanRelatedTestCase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(planrelatedtestcase.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PlanRelatedTestCaseUpsertBulk) UpdateNewValues() *PlanRelatedTestCaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(planrelatedtestcase.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PlanRelatedTestCase.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PlanRelatedTestCaseUpsertBulk) Ignore() *PlanRelatedTestCaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlanRelatedTestCaseUpsertBulk) DoNothing() *PlanRelatedTestCaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlanRelatedTestCaseCreateBulk.OnConflict
// documentation for more info.
func (u *PlanRelatedTestCaseUpsertBulk) Update(set func(*PlanRelatedTestCaseUpsert)) *PlanRelatedTestCaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlanRelatedTestCaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PlanRelatedTestCaseUpsertBulk) SetCreatedAt(v uint32) *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PlanRelatedTestCaseUpsertBulk) AddCreatedAt(v uint32) *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsertBulk) UpdateCreatedAt() *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanRelatedTestCaseUpsertBulk) SetUpdatedAt(v uint32) *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PlanRelatedTestCaseUpsertBulk) AddUpdatedAt(v uint32) *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsertBulk) UpdateUpdatedAt() *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlanRelatedTestCaseUpsertBulk) SetDeletedAt(v uint32) *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PlanRelatedTestCaseUpsertBulk) AddDeletedAt(v uint32) *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsertBulk) UpdateDeletedAt() *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetTestPlanID sets the "test_plan_id" field.
func (u *PlanRelatedTestCaseUpsertBulk) SetTestPlanID(v uuid.UUID) *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.SetTestPlanID(v)
	})
}

// UpdateTestPlanID sets the "test_plan_id" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsertBulk) UpdateTestPlanID() *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.UpdateTestPlanID()
	})
}

// ClearTestPlanID clears the value of the "test_plan_id" field.
func (u *PlanRelatedTestCaseUpsertBulk) ClearTestPlanID() *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.ClearTestPlanID()
	})
}

// SetTestCaseID sets the "test_case_id" field.
func (u *PlanRelatedTestCaseUpsertBulk) SetTestCaseID(v uuid.UUID) *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.SetTestCaseID(v)
	})
}

// UpdateTestCaseID sets the "test_case_id" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsertBulk) UpdateTestCaseID() *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.UpdateTestCaseID()
	})
}

// ClearTestCaseID clears the value of the "test_case_id" field.
func (u *PlanRelatedTestCaseUpsertBulk) ClearTestCaseID() *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.ClearTestCaseID()
	})
}

// SetTestCaseOutput sets the "test_case_output" field.
func (u *PlanRelatedTestCaseUpsertBulk) SetTestCaseOutput(v string) *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.SetTestCaseOutput(v)
	})
}

// UpdateTestCaseOutput sets the "test_case_output" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsertBulk) UpdateTestCaseOutput() *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.UpdateTestCaseOutput()
	})
}

// ClearTestCaseOutput clears the value of the "test_case_output" field.
func (u *PlanRelatedTestCaseUpsertBulk) ClearTestCaseOutput() *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.ClearTestCaseOutput()
	})
}

// SetDescription sets the "description" field.
func (u *PlanRelatedTestCaseUpsertBulk) SetDescription(v string) *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsertBulk) UpdateDescription() *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PlanRelatedTestCaseUpsertBulk) ClearDescription() *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.ClearDescription()
	})
}

// SetTestUserID sets the "test_user_id" field.
func (u *PlanRelatedTestCaseUpsertBulk) SetTestUserID(v uuid.UUID) *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.SetTestUserID(v)
	})
}

// UpdateTestUserID sets the "test_user_id" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsertBulk) UpdateTestUserID() *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.UpdateTestUserID()
	})
}

// ClearTestUserID clears the value of the "test_user_id" field.
func (u *PlanRelatedTestCaseUpsertBulk) ClearTestUserID() *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.ClearTestUserID()
	})
}

// SetRunDuration sets the "run_duration" field.
func (u *PlanRelatedTestCaseUpsertBulk) SetRunDuration(v uint32) *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.SetRunDuration(v)
	})
}

// AddRunDuration adds v to the "run_duration" field.
func (u *PlanRelatedTestCaseUpsertBulk) AddRunDuration(v uint32) *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.AddRunDuration(v)
	})
}

// UpdateRunDuration sets the "run_duration" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsertBulk) UpdateRunDuration() *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.UpdateRunDuration()
	})
}

// ClearRunDuration clears the value of the "run_duration" field.
func (u *PlanRelatedTestCaseUpsertBulk) ClearRunDuration() *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.ClearRunDuration()
	})
}

// SetTestCaseResult sets the "test_case_result" field.
func (u *PlanRelatedTestCaseUpsertBulk) SetTestCaseResult(v string) *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.SetTestCaseResult(v)
	})
}

// UpdateTestCaseResult sets the "test_case_result" field to the value that was provided on create.
func (u *PlanRelatedTestCaseUpsertBulk) UpdateTestCaseResult() *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.UpdateTestCaseResult()
	})
}

// ClearTestCaseResult clears the value of the "test_case_result" field.
func (u *PlanRelatedTestCaseUpsertBulk) ClearTestCaseResult() *PlanRelatedTestCaseUpsertBulk {
	return u.Update(func(s *PlanRelatedTestCaseUpsert) {
		s.ClearTestCaseResult()
	})
}

// Exec executes the query.
func (u *PlanRelatedTestCaseUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PlanRelatedTestCaseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlanRelatedTestCaseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlanRelatedTestCaseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
