// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/relatedtestcase"
	"github.com/google/uuid"
)

// RelatedTestCaseCreate is the builder for creating a RelatedTestCase entity.
type RelatedTestCaseCreate struct {
	config
	mutation *RelatedTestCaseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rtcc *RelatedTestCaseCreate) SetCreatedAt(u uint32) *RelatedTestCaseCreate {
	rtcc.mutation.SetCreatedAt(u)
	return rtcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rtcc *RelatedTestCaseCreate) SetNillableCreatedAt(u *uint32) *RelatedTestCaseCreate {
	if u != nil {
		rtcc.SetCreatedAt(*u)
	}
	return rtcc
}

// SetUpdatedAt sets the "updated_at" field.
func (rtcc *RelatedTestCaseCreate) SetUpdatedAt(u uint32) *RelatedTestCaseCreate {
	rtcc.mutation.SetUpdatedAt(u)
	return rtcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rtcc *RelatedTestCaseCreate) SetNillableUpdatedAt(u *uint32) *RelatedTestCaseCreate {
	if u != nil {
		rtcc.SetUpdatedAt(*u)
	}
	return rtcc
}

// SetDeletedAt sets the "deleted_at" field.
func (rtcc *RelatedTestCaseCreate) SetDeletedAt(u uint32) *RelatedTestCaseCreate {
	rtcc.mutation.SetDeletedAt(u)
	return rtcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rtcc *RelatedTestCaseCreate) SetNillableDeletedAt(u *uint32) *RelatedTestCaseCreate {
	if u != nil {
		rtcc.SetDeletedAt(*u)
	}
	return rtcc
}

// SetCondType sets the "cond_type" field.
func (rtcc *RelatedTestCaseCreate) SetCondType(s string) *RelatedTestCaseCreate {
	rtcc.mutation.SetCondType(s)
	return rtcc
}

// SetNillableCondType sets the "cond_type" field if the given value is not nil.
func (rtcc *RelatedTestCaseCreate) SetNillableCondType(s *string) *RelatedTestCaseCreate {
	if s != nil {
		rtcc.SetCondType(*s)
	}
	return rtcc
}

// SetTestCaseID sets the "test_case_id" field.
func (rtcc *RelatedTestCaseCreate) SetTestCaseID(u uuid.UUID) *RelatedTestCaseCreate {
	rtcc.mutation.SetTestCaseID(u)
	return rtcc
}

// SetNillableTestCaseID sets the "test_case_id" field if the given value is not nil.
func (rtcc *RelatedTestCaseCreate) SetNillableTestCaseID(u *uuid.UUID) *RelatedTestCaseCreate {
	if u != nil {
		rtcc.SetTestCaseID(*u)
	}
	return rtcc
}

// SetRelatedTestCaseID sets the "related_test_case_id" field.
func (rtcc *RelatedTestCaseCreate) SetRelatedTestCaseID(u uuid.UUID) *RelatedTestCaseCreate {
	rtcc.mutation.SetRelatedTestCaseID(u)
	return rtcc
}

// SetNillableRelatedTestCaseID sets the "related_test_case_id" field if the given value is not nil.
func (rtcc *RelatedTestCaseCreate) SetNillableRelatedTestCaseID(u *uuid.UUID) *RelatedTestCaseCreate {
	if u != nil {
		rtcc.SetRelatedTestCaseID(*u)
	}
	return rtcc
}

// SetArgumentsTransfer sets the "arguments_transfer" field.
func (rtcc *RelatedTestCaseCreate) SetArgumentsTransfer(s string) *RelatedTestCaseCreate {
	rtcc.mutation.SetArgumentsTransfer(s)
	return rtcc
}

// SetNillableArgumentsTransfer sets the "arguments_transfer" field if the given value is not nil.
func (rtcc *RelatedTestCaseCreate) SetNillableArgumentsTransfer(s *string) *RelatedTestCaseCreate {
	if s != nil {
		rtcc.SetArgumentsTransfer(*s)
	}
	return rtcc
}

// SetIndex sets the "index" field.
func (rtcc *RelatedTestCaseCreate) SetIndex(u uint32) *RelatedTestCaseCreate {
	rtcc.mutation.SetIndex(u)
	return rtcc
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (rtcc *RelatedTestCaseCreate) SetNillableIndex(u *uint32) *RelatedTestCaseCreate {
	if u != nil {
		rtcc.SetIndex(*u)
	}
	return rtcc
}

// SetID sets the "id" field.
func (rtcc *RelatedTestCaseCreate) SetID(u uuid.UUID) *RelatedTestCaseCreate {
	rtcc.mutation.SetID(u)
	return rtcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rtcc *RelatedTestCaseCreate) SetNillableID(u *uuid.UUID) *RelatedTestCaseCreate {
	if u != nil {
		rtcc.SetID(*u)
	}
	return rtcc
}

// Mutation returns the RelatedTestCaseMutation object of the builder.
func (rtcc *RelatedTestCaseCreate) Mutation() *RelatedTestCaseMutation {
	return rtcc.mutation
}

// Save creates the RelatedTestCase in the database.
func (rtcc *RelatedTestCaseCreate) Save(ctx context.Context) (*RelatedTestCase, error) {
	var (
		err  error
		node *RelatedTestCase
	)
	if err := rtcc.defaults(); err != nil {
		return nil, err
	}
	if len(rtcc.hooks) == 0 {
		if err = rtcc.check(); err != nil {
			return nil, err
		}
		node, err = rtcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RelatedTestCaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtcc.check(); err != nil {
				return nil, err
			}
			rtcc.mutation = mutation
			if node, err = rtcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rtcc.hooks) - 1; i >= 0; i-- {
			if rtcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rtcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rtcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*RelatedTestCase)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RelatedTestCaseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rtcc *RelatedTestCaseCreate) SaveX(ctx context.Context) *RelatedTestCase {
	v, err := rtcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtcc *RelatedTestCaseCreate) Exec(ctx context.Context) error {
	_, err := rtcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtcc *RelatedTestCaseCreate) ExecX(ctx context.Context) {
	if err := rtcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtcc *RelatedTestCaseCreate) defaults() error {
	if _, ok := rtcc.mutation.CreatedAt(); !ok {
		if relatedtestcase.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized relatedtestcase.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := relatedtestcase.DefaultCreatedAt()
		rtcc.mutation.SetCreatedAt(v)
	}
	if _, ok := rtcc.mutation.UpdatedAt(); !ok {
		if relatedtestcase.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized relatedtestcase.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := relatedtestcase.DefaultUpdatedAt()
		rtcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rtcc.mutation.DeletedAt(); !ok {
		if relatedtestcase.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized relatedtestcase.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := relatedtestcase.DefaultDeletedAt()
		rtcc.mutation.SetDeletedAt(v)
	}
	if _, ok := rtcc.mutation.CondType(); !ok {
		v := relatedtestcase.DefaultCondType
		rtcc.mutation.SetCondType(v)
	}
	if _, ok := rtcc.mutation.TestCaseID(); !ok {
		if relatedtestcase.DefaultTestCaseID == nil {
			return fmt.Errorf("ent: uninitialized relatedtestcase.DefaultTestCaseID (forgotten import ent/runtime?)")
		}
		v := relatedtestcase.DefaultTestCaseID()
		rtcc.mutation.SetTestCaseID(v)
	}
	if _, ok := rtcc.mutation.RelatedTestCaseID(); !ok {
		if relatedtestcase.DefaultRelatedTestCaseID == nil {
			return fmt.Errorf("ent: uninitialized relatedtestcase.DefaultRelatedTestCaseID (forgotten import ent/runtime?)")
		}
		v := relatedtestcase.DefaultRelatedTestCaseID()
		rtcc.mutation.SetRelatedTestCaseID(v)
	}
	if _, ok := rtcc.mutation.ArgumentsTransfer(); !ok {
		v := relatedtestcase.DefaultArgumentsTransfer
		rtcc.mutation.SetArgumentsTransfer(v)
	}
	if _, ok := rtcc.mutation.Index(); !ok {
		v := relatedtestcase.DefaultIndex
		rtcc.mutation.SetIndex(v)
	}
	if _, ok := rtcc.mutation.ID(); !ok {
		if relatedtestcase.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized relatedtestcase.DefaultID (forgotten import ent/runtime?)")
		}
		v := relatedtestcase.DefaultID()
		rtcc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rtcc *RelatedTestCaseCreate) check() error {
	if _, ok := rtcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RelatedTestCase.created_at"`)}
	}
	if _, ok := rtcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RelatedTestCase.updated_at"`)}
	}
	if _, ok := rtcc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "RelatedTestCase.deleted_at"`)}
	}
	return nil
}

func (rtcc *RelatedTestCaseCreate) sqlSave(ctx context.Context) (*RelatedTestCase, error) {
	_node, _spec := rtcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rtcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (rtcc *RelatedTestCaseCreate) createSpec() (*RelatedTestCase, *sqlgraph.CreateSpec) {
	var (
		_node = &RelatedTestCase{config: rtcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: relatedtestcase.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: relatedtestcase.FieldID,
			},
		}
	)
	_spec.OnConflict = rtcc.conflict
	if id, ok := rtcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rtcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: relatedtestcase.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := rtcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: relatedtestcase.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := rtcc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: relatedtestcase.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := rtcc.mutation.CondType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: relatedtestcase.FieldCondType,
		})
		_node.CondType = value
	}
	if value, ok := rtcc.mutation.TestCaseID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: relatedtestcase.FieldTestCaseID,
		})
		_node.TestCaseID = value
	}
	if value, ok := rtcc.mutation.RelatedTestCaseID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: relatedtestcase.FieldRelatedTestCaseID,
		})
		_node.RelatedTestCaseID = value
	}
	if value, ok := rtcc.mutation.ArgumentsTransfer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: relatedtestcase.FieldArgumentsTransfer,
		})
		_node.ArgumentsTransfer = value
	}
	if value, ok := rtcc.mutation.Index(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: relatedtestcase.FieldIndex,
		})
		_node.Index = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RelatedTestCase.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RelatedTestCaseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (rtcc *RelatedTestCaseCreate) OnConflict(opts ...sql.ConflictOption) *RelatedTestCaseUpsertOne {
	rtcc.conflict = opts
	return &RelatedTestCaseUpsertOne{
		create: rtcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RelatedTestCase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rtcc *RelatedTestCaseCreate) OnConflictColumns(columns ...string) *RelatedTestCaseUpsertOne {
	rtcc.conflict = append(rtcc.conflict, sql.ConflictColumns(columns...))
	return &RelatedTestCaseUpsertOne{
		create: rtcc,
	}
}

type (
	// RelatedTestCaseUpsertOne is the builder for "upsert"-ing
	//  one RelatedTestCase node.
	RelatedTestCaseUpsertOne struct {
		create *RelatedTestCaseCreate
	}

	// RelatedTestCaseUpsert is the "OnConflict" setter.
	RelatedTestCaseUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *RelatedTestCaseUpsert) SetCreatedAt(v uint32) *RelatedTestCaseUpsert {
	u.Set(relatedtestcase.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RelatedTestCaseUpsert) UpdateCreatedAt() *RelatedTestCaseUpsert {
	u.SetExcluded(relatedtestcase.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RelatedTestCaseUpsert) AddCreatedAt(v uint32) *RelatedTestCaseUpsert {
	u.Add(relatedtestcase.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RelatedTestCaseUpsert) SetUpdatedAt(v uint32) *RelatedTestCaseUpsert {
	u.Set(relatedtestcase.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RelatedTestCaseUpsert) UpdateUpdatedAt() *RelatedTestCaseUpsert {
	u.SetExcluded(relatedtestcase.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RelatedTestCaseUpsert) AddUpdatedAt(v uint32) *RelatedTestCaseUpsert {
	u.Add(relatedtestcase.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RelatedTestCaseUpsert) SetDeletedAt(v uint32) *RelatedTestCaseUpsert {
	u.Set(relatedtestcase.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RelatedTestCaseUpsert) UpdateDeletedAt() *RelatedTestCaseUpsert {
	u.SetExcluded(relatedtestcase.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RelatedTestCaseUpsert) AddDeletedAt(v uint32) *RelatedTestCaseUpsert {
	u.Add(relatedtestcase.FieldDeletedAt, v)
	return u
}

// SetCondType sets the "cond_type" field.
func (u *RelatedTestCaseUpsert) SetCondType(v string) *RelatedTestCaseUpsert {
	u.Set(relatedtestcase.FieldCondType, v)
	return u
}

// UpdateCondType sets the "cond_type" field to the value that was provided on create.
func (u *RelatedTestCaseUpsert) UpdateCondType() *RelatedTestCaseUpsert {
	u.SetExcluded(relatedtestcase.FieldCondType)
	return u
}

// ClearCondType clears the value of the "cond_type" field.
func (u *RelatedTestCaseUpsert) ClearCondType() *RelatedTestCaseUpsert {
	u.SetNull(relatedtestcase.FieldCondType)
	return u
}

// SetTestCaseID sets the "test_case_id" field.
func (u *RelatedTestCaseUpsert) SetTestCaseID(v uuid.UUID) *RelatedTestCaseUpsert {
	u.Set(relatedtestcase.FieldTestCaseID, v)
	return u
}

// UpdateTestCaseID sets the "test_case_id" field to the value that was provided on create.
func (u *RelatedTestCaseUpsert) UpdateTestCaseID() *RelatedTestCaseUpsert {
	u.SetExcluded(relatedtestcase.FieldTestCaseID)
	return u
}

// ClearTestCaseID clears the value of the "test_case_id" field.
func (u *RelatedTestCaseUpsert) ClearTestCaseID() *RelatedTestCaseUpsert {
	u.SetNull(relatedtestcase.FieldTestCaseID)
	return u
}

// SetRelatedTestCaseID sets the "related_test_case_id" field.
func (u *RelatedTestCaseUpsert) SetRelatedTestCaseID(v uuid.UUID) *RelatedTestCaseUpsert {
	u.Set(relatedtestcase.FieldRelatedTestCaseID, v)
	return u
}

// UpdateRelatedTestCaseID sets the "related_test_case_id" field to the value that was provided on create.
func (u *RelatedTestCaseUpsert) UpdateRelatedTestCaseID() *RelatedTestCaseUpsert {
	u.SetExcluded(relatedtestcase.FieldRelatedTestCaseID)
	return u
}

// ClearRelatedTestCaseID clears the value of the "related_test_case_id" field.
func (u *RelatedTestCaseUpsert) ClearRelatedTestCaseID() *RelatedTestCaseUpsert {
	u.SetNull(relatedtestcase.FieldRelatedTestCaseID)
	return u
}

// SetArgumentsTransfer sets the "arguments_transfer" field.
func (u *RelatedTestCaseUpsert) SetArgumentsTransfer(v string) *RelatedTestCaseUpsert {
	u.Set(relatedtestcase.FieldArgumentsTransfer, v)
	return u
}

// UpdateArgumentsTransfer sets the "arguments_transfer" field to the value that was provided on create.
func (u *RelatedTestCaseUpsert) UpdateArgumentsTransfer() *RelatedTestCaseUpsert {
	u.SetExcluded(relatedtestcase.FieldArgumentsTransfer)
	return u
}

// ClearArgumentsTransfer clears the value of the "arguments_transfer" field.
func (u *RelatedTestCaseUpsert) ClearArgumentsTransfer() *RelatedTestCaseUpsert {
	u.SetNull(relatedtestcase.FieldArgumentsTransfer)
	return u
}

// SetIndex sets the "index" field.
func (u *RelatedTestCaseUpsert) SetIndex(v uint32) *RelatedTestCaseUpsert {
	u.Set(relatedtestcase.FieldIndex, v)
	return u
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *RelatedTestCaseUpsert) UpdateIndex() *RelatedTestCaseUpsert {
	u.SetExcluded(relatedtestcase.FieldIndex)
	return u
}

// AddIndex adds v to the "index" field.
func (u *RelatedTestCaseUpsert) AddIndex(v uint32) *RelatedTestCaseUpsert {
	u.Add(relatedtestcase.FieldIndex, v)
	return u
}

// ClearIndex clears the value of the "index" field.
func (u *RelatedTestCaseUpsert) ClearIndex() *RelatedTestCaseUpsert {
	u.SetNull(relatedtestcase.FieldIndex)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RelatedTestCase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(relatedtestcase.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *RelatedTestCaseUpsertOne) UpdateNewValues() *RelatedTestCaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(relatedtestcase.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.RelatedTestCase.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *RelatedTestCaseUpsertOne) Ignore() *RelatedTestCaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RelatedTestCaseUpsertOne) DoNothing() *RelatedTestCaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RelatedTestCaseCreate.OnConflict
// documentation for more info.
func (u *RelatedTestCaseUpsertOne) Update(set func(*RelatedTestCaseUpsert)) *RelatedTestCaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RelatedTestCaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RelatedTestCaseUpsertOne) SetCreatedAt(v uint32) *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RelatedTestCaseUpsertOne) AddCreatedAt(v uint32) *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RelatedTestCaseUpsertOne) UpdateCreatedAt() *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RelatedTestCaseUpsertOne) SetUpdatedAt(v uint32) *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RelatedTestCaseUpsertOne) AddUpdatedAt(v uint32) *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RelatedTestCaseUpsertOne) UpdateUpdatedAt() *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RelatedTestCaseUpsertOne) SetDeletedAt(v uint32) *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RelatedTestCaseUpsertOne) AddDeletedAt(v uint32) *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RelatedTestCaseUpsertOne) UpdateDeletedAt() *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCondType sets the "cond_type" field.
func (u *RelatedTestCaseUpsertOne) SetCondType(v string) *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.SetCondType(v)
	})
}

// UpdateCondType sets the "cond_type" field to the value that was provided on create.
func (u *RelatedTestCaseUpsertOne) UpdateCondType() *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.UpdateCondType()
	})
}

// ClearCondType clears the value of the "cond_type" field.
func (u *RelatedTestCaseUpsertOne) ClearCondType() *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.ClearCondType()
	})
}

// SetTestCaseID sets the "test_case_id" field.
func (u *RelatedTestCaseUpsertOne) SetTestCaseID(v uuid.UUID) *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.SetTestCaseID(v)
	})
}

// UpdateTestCaseID sets the "test_case_id" field to the value that was provided on create.
func (u *RelatedTestCaseUpsertOne) UpdateTestCaseID() *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.UpdateTestCaseID()
	})
}

// ClearTestCaseID clears the value of the "test_case_id" field.
func (u *RelatedTestCaseUpsertOne) ClearTestCaseID() *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.ClearTestCaseID()
	})
}

// SetRelatedTestCaseID sets the "related_test_case_id" field.
func (u *RelatedTestCaseUpsertOne) SetRelatedTestCaseID(v uuid.UUID) *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.SetRelatedTestCaseID(v)
	})
}

// UpdateRelatedTestCaseID sets the "related_test_case_id" field to the value that was provided on create.
func (u *RelatedTestCaseUpsertOne) UpdateRelatedTestCaseID() *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.UpdateRelatedTestCaseID()
	})
}

// ClearRelatedTestCaseID clears the value of the "related_test_case_id" field.
func (u *RelatedTestCaseUpsertOne) ClearRelatedTestCaseID() *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.ClearRelatedTestCaseID()
	})
}

// SetArgumentsTransfer sets the "arguments_transfer" field.
func (u *RelatedTestCaseUpsertOne) SetArgumentsTransfer(v string) *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.SetArgumentsTransfer(v)
	})
}

// UpdateArgumentsTransfer sets the "arguments_transfer" field to the value that was provided on create.
func (u *RelatedTestCaseUpsertOne) UpdateArgumentsTransfer() *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.UpdateArgumentsTransfer()
	})
}

// ClearArgumentsTransfer clears the value of the "arguments_transfer" field.
func (u *RelatedTestCaseUpsertOne) ClearArgumentsTransfer() *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.ClearArgumentsTransfer()
	})
}

// SetIndex sets the "index" field.
func (u *RelatedTestCaseUpsertOne) SetIndex(v uint32) *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *RelatedTestCaseUpsertOne) AddIndex(v uint32) *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *RelatedTestCaseUpsertOne) UpdateIndex() *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *RelatedTestCaseUpsertOne) ClearIndex() *RelatedTestCaseUpsertOne {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.ClearIndex()
	})
}

// Exec executes the query.
func (u *RelatedTestCaseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RelatedTestCaseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RelatedTestCaseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RelatedTestCaseUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RelatedTestCaseUpsertOne.ID is not supported by MySQL driver. Use RelatedTestCaseUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RelatedTestCaseUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RelatedTestCaseCreateBulk is the builder for creating many RelatedTestCase entities in bulk.
type RelatedTestCaseCreateBulk struct {
	config
	builders []*RelatedTestCaseCreate
	conflict []sql.ConflictOption
}

// Save creates the RelatedTestCase entities in the database.
func (rtccb *RelatedTestCaseCreateBulk) Save(ctx context.Context) ([]*RelatedTestCase, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rtccb.builders))
	nodes := make([]*RelatedTestCase, len(rtccb.builders))
	mutators := make([]Mutator, len(rtccb.builders))
	for i := range rtccb.builders {
		func(i int, root context.Context) {
			builder := rtccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RelatedTestCaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rtccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rtccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rtccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rtccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rtccb *RelatedTestCaseCreateBulk) SaveX(ctx context.Context) []*RelatedTestCase {
	v, err := rtccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtccb *RelatedTestCaseCreateBulk) Exec(ctx context.Context) error {
	_, err := rtccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtccb *RelatedTestCaseCreateBulk) ExecX(ctx context.Context) {
	if err := rtccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RelatedTestCase.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RelatedTestCaseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (rtccb *RelatedTestCaseCreateBulk) OnConflict(opts ...sql.ConflictOption) *RelatedTestCaseUpsertBulk {
	rtccb.conflict = opts
	return &RelatedTestCaseUpsertBulk{
		create: rtccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RelatedTestCase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rtccb *RelatedTestCaseCreateBulk) OnConflictColumns(columns ...string) *RelatedTestCaseUpsertBulk {
	rtccb.conflict = append(rtccb.conflict, sql.ConflictColumns(columns...))
	return &RelatedTestCaseUpsertBulk{
		create: rtccb,
	}
}

// RelatedTestCaseUpsertBulk is the builder for "upsert"-ing
// a bulk of RelatedTestCase nodes.
type RelatedTestCaseUpsertBulk struct {
	create *RelatedTestCaseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RelatedTestCase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(relatedtestcase.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *RelatedTestCaseUpsertBulk) UpdateNewValues() *RelatedTestCaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(relatedtestcase.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RelatedTestCase.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *RelatedTestCaseUpsertBulk) Ignore() *RelatedTestCaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RelatedTestCaseUpsertBulk) DoNothing() *RelatedTestCaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RelatedTestCaseCreateBulk.OnConflict
// documentation for more info.
func (u *RelatedTestCaseUpsertBulk) Update(set func(*RelatedTestCaseUpsert)) *RelatedTestCaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RelatedTestCaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RelatedTestCaseUpsertBulk) SetCreatedAt(v uint32) *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RelatedTestCaseUpsertBulk) AddCreatedAt(v uint32) *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RelatedTestCaseUpsertBulk) UpdateCreatedAt() *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RelatedTestCaseUpsertBulk) SetUpdatedAt(v uint32) *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RelatedTestCaseUpsertBulk) AddUpdatedAt(v uint32) *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RelatedTestCaseUpsertBulk) UpdateUpdatedAt() *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RelatedTestCaseUpsertBulk) SetDeletedAt(v uint32) *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RelatedTestCaseUpsertBulk) AddDeletedAt(v uint32) *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RelatedTestCaseUpsertBulk) UpdateDeletedAt() *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCondType sets the "cond_type" field.
func (u *RelatedTestCaseUpsertBulk) SetCondType(v string) *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.SetCondType(v)
	})
}

// UpdateCondType sets the "cond_type" field to the value that was provided on create.
func (u *RelatedTestCaseUpsertBulk) UpdateCondType() *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.UpdateCondType()
	})
}

// ClearCondType clears the value of the "cond_type" field.
func (u *RelatedTestCaseUpsertBulk) ClearCondType() *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.ClearCondType()
	})
}

// SetTestCaseID sets the "test_case_id" field.
func (u *RelatedTestCaseUpsertBulk) SetTestCaseID(v uuid.UUID) *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.SetTestCaseID(v)
	})
}

// UpdateTestCaseID sets the "test_case_id" field to the value that was provided on create.
func (u *RelatedTestCaseUpsertBulk) UpdateTestCaseID() *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.UpdateTestCaseID()
	})
}

// ClearTestCaseID clears the value of the "test_case_id" field.
func (u *RelatedTestCaseUpsertBulk) ClearTestCaseID() *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.ClearTestCaseID()
	})
}

// SetRelatedTestCaseID sets the "related_test_case_id" field.
func (u *RelatedTestCaseUpsertBulk) SetRelatedTestCaseID(v uuid.UUID) *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.SetRelatedTestCaseID(v)
	})
}

// UpdateRelatedTestCaseID sets the "related_test_case_id" field to the value that was provided on create.
func (u *RelatedTestCaseUpsertBulk) UpdateRelatedTestCaseID() *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.UpdateRelatedTestCaseID()
	})
}

// ClearRelatedTestCaseID clears the value of the "related_test_case_id" field.
func (u *RelatedTestCaseUpsertBulk) ClearRelatedTestCaseID() *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.ClearRelatedTestCaseID()
	})
}

// SetArgumentsTransfer sets the "arguments_transfer" field.
func (u *RelatedTestCaseUpsertBulk) SetArgumentsTransfer(v string) *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.SetArgumentsTransfer(v)
	})
}

// UpdateArgumentsTransfer sets the "arguments_transfer" field to the value that was provided on create.
func (u *RelatedTestCaseUpsertBulk) UpdateArgumentsTransfer() *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.UpdateArgumentsTransfer()
	})
}

// ClearArgumentsTransfer clears the value of the "arguments_transfer" field.
func (u *RelatedTestCaseUpsertBulk) ClearArgumentsTransfer() *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.ClearArgumentsTransfer()
	})
}

// SetIndex sets the "index" field.
func (u *RelatedTestCaseUpsertBulk) SetIndex(v uint32) *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *RelatedTestCaseUpsertBulk) AddIndex(v uint32) *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *RelatedTestCaseUpsertBulk) UpdateIndex() *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *RelatedTestCaseUpsertBulk) ClearIndex() *RelatedTestCaseUpsertBulk {
	return u.Update(func(s *RelatedTestCaseUpsert) {
		s.ClearIndex()
	})
}

// Exec executes the query.
func (u *RelatedTestCaseUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RelatedTestCaseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RelatedTestCaseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RelatedTestCaseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
