// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/detail"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/module"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/planrelatedtestcase"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/relatedtestcase"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/testcase"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/testplan"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDetail              = "Detail"
	TypeModule              = "Module"
	TypePlanRelatedTestCase = "PlanRelatedTestCase"
	TypeRelatedTestCase     = "RelatedTestCase"
	TypeTestCase            = "TestCase"
	TypeTestPlan            = "TestPlan"
)

// DetailMutation represents an operation that mutates the Detail nodes in the graph.
type DetailMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	created_at        *uint32
	addcreated_at     *int32
	updated_at        *uint32
	addupdated_at     *int32
	deleted_at        *uint32
	adddeleted_at     *int32
	app_id            *uuid.UUID
	user_id           *uuid.UUID
	coin_type_id      *uuid.UUID
	io_type           *string
	io_sub_type       *string
	amount            *decimal.Decimal
	from_coin_type_id *uuid.UUID
	coin_usd_currency *decimal.Decimal
	io_extra          *string
	from_old_id       *uuid.UUID
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Detail, error)
	predicates        []predicate.Detail
}

var _ ent.Mutation = (*DetailMutation)(nil)

// detailOption allows management of the mutation configuration using functional options.
type detailOption func(*DetailMutation)

// newDetailMutation creates new mutation for the Detail entity.
func newDetailMutation(c config, op Op, opts ...detailOption) *DetailMutation {
	m := &DetailMutation{
		config:        c,
		op:            op,
		typ:           TypeDetail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDetailID sets the ID field of the mutation.
func withDetailID(id uuid.UUID) detailOption {
	return func(m *DetailMutation) {
		var (
			err   error
			once  sync.Once
			value *Detail
		)
		m.oldValue = func(ctx context.Context) (*Detail, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Detail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDetail sets the old Detail of the mutation.
func withDetail(node *Detail) detailOption {
	return func(m *DetailMutation) {
		m.oldValue = func(context.Context) (*Detail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DetailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DetailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Detail entities.
func (m *DetailMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DetailMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DetailMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Detail.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *DetailMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DetailMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *DetailMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *DetailMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DetailMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DetailMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DetailMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *DetailMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *DetailMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DetailMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *DetailMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *DetailMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *DetailMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *DetailMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *DetailMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *DetailMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *DetailMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *DetailMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[detail.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *DetailMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[detail.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *DetailMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, detail.FieldAppID)
}

// SetUserID sets the "user_id" field.
func (m *DetailMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *DetailMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *DetailMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[detail.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *DetailMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[detail.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *DetailMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, detail.FieldUserID)
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *DetailMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *DetailMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *DetailMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[detail.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *DetailMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[detail.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *DetailMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, detail.FieldCoinTypeID)
}

// SetIoType sets the "io_type" field.
func (m *DetailMutation) SetIoType(s string) {
	m.io_type = &s
}

// IoType returns the value of the "io_type" field in the mutation.
func (m *DetailMutation) IoType() (r string, exists bool) {
	v := m.io_type
	if v == nil {
		return
	}
	return *v, true
}

// OldIoType returns the old "io_type" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldIoType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIoType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIoType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIoType: %w", err)
	}
	return oldValue.IoType, nil
}

// ClearIoType clears the value of the "io_type" field.
func (m *DetailMutation) ClearIoType() {
	m.io_type = nil
	m.clearedFields[detail.FieldIoType] = struct{}{}
}

// IoTypeCleared returns if the "io_type" field was cleared in this mutation.
func (m *DetailMutation) IoTypeCleared() bool {
	_, ok := m.clearedFields[detail.FieldIoType]
	return ok
}

// ResetIoType resets all changes to the "io_type" field.
func (m *DetailMutation) ResetIoType() {
	m.io_type = nil
	delete(m.clearedFields, detail.FieldIoType)
}

// SetIoSubType sets the "io_sub_type" field.
func (m *DetailMutation) SetIoSubType(s string) {
	m.io_sub_type = &s
}

// IoSubType returns the value of the "io_sub_type" field in the mutation.
func (m *DetailMutation) IoSubType() (r string, exists bool) {
	v := m.io_sub_type
	if v == nil {
		return
	}
	return *v, true
}

// OldIoSubType returns the old "io_sub_type" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldIoSubType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIoSubType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIoSubType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIoSubType: %w", err)
	}
	return oldValue.IoSubType, nil
}

// ClearIoSubType clears the value of the "io_sub_type" field.
func (m *DetailMutation) ClearIoSubType() {
	m.io_sub_type = nil
	m.clearedFields[detail.FieldIoSubType] = struct{}{}
}

// IoSubTypeCleared returns if the "io_sub_type" field was cleared in this mutation.
func (m *DetailMutation) IoSubTypeCleared() bool {
	_, ok := m.clearedFields[detail.FieldIoSubType]
	return ok
}

// ResetIoSubType resets all changes to the "io_sub_type" field.
func (m *DetailMutation) ResetIoSubType() {
	m.io_sub_type = nil
	delete(m.clearedFields, detail.FieldIoSubType)
}

// SetAmount sets the "amount" field.
func (m *DetailMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
}

// Amount returns the value of the "amount" field in the mutation.
func (m *DetailMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ClearAmount clears the value of the "amount" field.
func (m *DetailMutation) ClearAmount() {
	m.amount = nil
	m.clearedFields[detail.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *DetailMutation) AmountCleared() bool {
	_, ok := m.clearedFields[detail.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *DetailMutation) ResetAmount() {
	m.amount = nil
	delete(m.clearedFields, detail.FieldAmount)
}

// SetFromCoinTypeID sets the "from_coin_type_id" field.
func (m *DetailMutation) SetFromCoinTypeID(u uuid.UUID) {
	m.from_coin_type_id = &u
}

// FromCoinTypeID returns the value of the "from_coin_type_id" field in the mutation.
func (m *DetailMutation) FromCoinTypeID() (r uuid.UUID, exists bool) {
	v := m.from_coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFromCoinTypeID returns the old "from_coin_type_id" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldFromCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromCoinTypeID: %w", err)
	}
	return oldValue.FromCoinTypeID, nil
}

// ClearFromCoinTypeID clears the value of the "from_coin_type_id" field.
func (m *DetailMutation) ClearFromCoinTypeID() {
	m.from_coin_type_id = nil
	m.clearedFields[detail.FieldFromCoinTypeID] = struct{}{}
}

// FromCoinTypeIDCleared returns if the "from_coin_type_id" field was cleared in this mutation.
func (m *DetailMutation) FromCoinTypeIDCleared() bool {
	_, ok := m.clearedFields[detail.FieldFromCoinTypeID]
	return ok
}

// ResetFromCoinTypeID resets all changes to the "from_coin_type_id" field.
func (m *DetailMutation) ResetFromCoinTypeID() {
	m.from_coin_type_id = nil
	delete(m.clearedFields, detail.FieldFromCoinTypeID)
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (m *DetailMutation) SetCoinUsdCurrency(d decimal.Decimal) {
	m.coin_usd_currency = &d
}

// CoinUsdCurrency returns the value of the "coin_usd_currency" field in the mutation.
func (m *DetailMutation) CoinUsdCurrency() (r decimal.Decimal, exists bool) {
	v := m.coin_usd_currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinUsdCurrency returns the old "coin_usd_currency" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldCoinUsdCurrency(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinUsdCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinUsdCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinUsdCurrency: %w", err)
	}
	return oldValue.CoinUsdCurrency, nil
}

// ClearCoinUsdCurrency clears the value of the "coin_usd_currency" field.
func (m *DetailMutation) ClearCoinUsdCurrency() {
	m.coin_usd_currency = nil
	m.clearedFields[detail.FieldCoinUsdCurrency] = struct{}{}
}

// CoinUsdCurrencyCleared returns if the "coin_usd_currency" field was cleared in this mutation.
func (m *DetailMutation) CoinUsdCurrencyCleared() bool {
	_, ok := m.clearedFields[detail.FieldCoinUsdCurrency]
	return ok
}

// ResetCoinUsdCurrency resets all changes to the "coin_usd_currency" field.
func (m *DetailMutation) ResetCoinUsdCurrency() {
	m.coin_usd_currency = nil
	delete(m.clearedFields, detail.FieldCoinUsdCurrency)
}

// SetIoExtra sets the "io_extra" field.
func (m *DetailMutation) SetIoExtra(s string) {
	m.io_extra = &s
}

// IoExtra returns the value of the "io_extra" field in the mutation.
func (m *DetailMutation) IoExtra() (r string, exists bool) {
	v := m.io_extra
	if v == nil {
		return
	}
	return *v, true
}

// OldIoExtra returns the old "io_extra" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldIoExtra(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIoExtra is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIoExtra requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIoExtra: %w", err)
	}
	return oldValue.IoExtra, nil
}

// ClearIoExtra clears the value of the "io_extra" field.
func (m *DetailMutation) ClearIoExtra() {
	m.io_extra = nil
	m.clearedFields[detail.FieldIoExtra] = struct{}{}
}

// IoExtraCleared returns if the "io_extra" field was cleared in this mutation.
func (m *DetailMutation) IoExtraCleared() bool {
	_, ok := m.clearedFields[detail.FieldIoExtra]
	return ok
}

// ResetIoExtra resets all changes to the "io_extra" field.
func (m *DetailMutation) ResetIoExtra() {
	m.io_extra = nil
	delete(m.clearedFields, detail.FieldIoExtra)
}

// SetFromOldID sets the "from_old_id" field.
func (m *DetailMutation) SetFromOldID(u uuid.UUID) {
	m.from_old_id = &u
}

// FromOldID returns the value of the "from_old_id" field in the mutation.
func (m *DetailMutation) FromOldID() (r uuid.UUID, exists bool) {
	v := m.from_old_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFromOldID returns the old "from_old_id" field's value of the Detail entity.
// If the Detail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DetailMutation) OldFromOldID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromOldID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromOldID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromOldID: %w", err)
	}
	return oldValue.FromOldID, nil
}

// ClearFromOldID clears the value of the "from_old_id" field.
func (m *DetailMutation) ClearFromOldID() {
	m.from_old_id = nil
	m.clearedFields[detail.FieldFromOldID] = struct{}{}
}

// FromOldIDCleared returns if the "from_old_id" field was cleared in this mutation.
func (m *DetailMutation) FromOldIDCleared() bool {
	_, ok := m.clearedFields[detail.FieldFromOldID]
	return ok
}

// ResetFromOldID resets all changes to the "from_old_id" field.
func (m *DetailMutation) ResetFromOldID() {
	m.from_old_id = nil
	delete(m.clearedFields, detail.FieldFromOldID)
}

// Where appends a list predicates to the DetailMutation builder.
func (m *DetailMutation) Where(ps ...predicate.Detail) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DetailMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Detail).
func (m *DetailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DetailMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.created_at != nil {
		fields = append(fields, detail.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, detail.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, detail.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, detail.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, detail.FieldUserID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, detail.FieldCoinTypeID)
	}
	if m.io_type != nil {
		fields = append(fields, detail.FieldIoType)
	}
	if m.io_sub_type != nil {
		fields = append(fields, detail.FieldIoSubType)
	}
	if m.amount != nil {
		fields = append(fields, detail.FieldAmount)
	}
	if m.from_coin_type_id != nil {
		fields = append(fields, detail.FieldFromCoinTypeID)
	}
	if m.coin_usd_currency != nil {
		fields = append(fields, detail.FieldCoinUsdCurrency)
	}
	if m.io_extra != nil {
		fields = append(fields, detail.FieldIoExtra)
	}
	if m.from_old_id != nil {
		fields = append(fields, detail.FieldFromOldID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DetailMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case detail.FieldCreatedAt:
		return m.CreatedAt()
	case detail.FieldUpdatedAt:
		return m.UpdatedAt()
	case detail.FieldDeletedAt:
		return m.DeletedAt()
	case detail.FieldAppID:
		return m.AppID()
	case detail.FieldUserID:
		return m.UserID()
	case detail.FieldCoinTypeID:
		return m.CoinTypeID()
	case detail.FieldIoType:
		return m.IoType()
	case detail.FieldIoSubType:
		return m.IoSubType()
	case detail.FieldAmount:
		return m.Amount()
	case detail.FieldFromCoinTypeID:
		return m.FromCoinTypeID()
	case detail.FieldCoinUsdCurrency:
		return m.CoinUsdCurrency()
	case detail.FieldIoExtra:
		return m.IoExtra()
	case detail.FieldFromOldID:
		return m.FromOldID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DetailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case detail.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case detail.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case detail.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case detail.FieldAppID:
		return m.OldAppID(ctx)
	case detail.FieldUserID:
		return m.OldUserID(ctx)
	case detail.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case detail.FieldIoType:
		return m.OldIoType(ctx)
	case detail.FieldIoSubType:
		return m.OldIoSubType(ctx)
	case detail.FieldAmount:
		return m.OldAmount(ctx)
	case detail.FieldFromCoinTypeID:
		return m.OldFromCoinTypeID(ctx)
	case detail.FieldCoinUsdCurrency:
		return m.OldCoinUsdCurrency(ctx)
	case detail.FieldIoExtra:
		return m.OldIoExtra(ctx)
	case detail.FieldFromOldID:
		return m.OldFromOldID(ctx)
	}
	return nil, fmt.Errorf("unknown Detail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DetailMutation) SetField(name string, value ent.Value) error {
	switch name {
	case detail.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case detail.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case detail.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case detail.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case detail.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case detail.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case detail.FieldIoType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIoType(v)
		return nil
	case detail.FieldIoSubType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIoSubType(v)
		return nil
	case detail.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case detail.FieldFromCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromCoinTypeID(v)
		return nil
	case detail.FieldCoinUsdCurrency:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinUsdCurrency(v)
		return nil
	case detail.FieldIoExtra:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIoExtra(v)
		return nil
	case detail.FieldFromOldID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromOldID(v)
		return nil
	}
	return fmt.Errorf("unknown Detail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DetailMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, detail.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, detail.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, detail.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DetailMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case detail.FieldCreatedAt:
		return m.AddedCreatedAt()
	case detail.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case detail.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DetailMutation) AddField(name string, value ent.Value) error {
	switch name {
	case detail.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case detail.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case detail.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Detail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DetailMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(detail.FieldAppID) {
		fields = append(fields, detail.FieldAppID)
	}
	if m.FieldCleared(detail.FieldUserID) {
		fields = append(fields, detail.FieldUserID)
	}
	if m.FieldCleared(detail.FieldCoinTypeID) {
		fields = append(fields, detail.FieldCoinTypeID)
	}
	if m.FieldCleared(detail.FieldIoType) {
		fields = append(fields, detail.FieldIoType)
	}
	if m.FieldCleared(detail.FieldIoSubType) {
		fields = append(fields, detail.FieldIoSubType)
	}
	if m.FieldCleared(detail.FieldAmount) {
		fields = append(fields, detail.FieldAmount)
	}
	if m.FieldCleared(detail.FieldFromCoinTypeID) {
		fields = append(fields, detail.FieldFromCoinTypeID)
	}
	if m.FieldCleared(detail.FieldCoinUsdCurrency) {
		fields = append(fields, detail.FieldCoinUsdCurrency)
	}
	if m.FieldCleared(detail.FieldIoExtra) {
		fields = append(fields, detail.FieldIoExtra)
	}
	if m.FieldCleared(detail.FieldFromOldID) {
		fields = append(fields, detail.FieldFromOldID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DetailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DetailMutation) ClearField(name string) error {
	switch name {
	case detail.FieldAppID:
		m.ClearAppID()
		return nil
	case detail.FieldUserID:
		m.ClearUserID()
		return nil
	case detail.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case detail.FieldIoType:
		m.ClearIoType()
		return nil
	case detail.FieldIoSubType:
		m.ClearIoSubType()
		return nil
	case detail.FieldAmount:
		m.ClearAmount()
		return nil
	case detail.FieldFromCoinTypeID:
		m.ClearFromCoinTypeID()
		return nil
	case detail.FieldCoinUsdCurrency:
		m.ClearCoinUsdCurrency()
		return nil
	case detail.FieldIoExtra:
		m.ClearIoExtra()
		return nil
	case detail.FieldFromOldID:
		m.ClearFromOldID()
		return nil
	}
	return fmt.Errorf("unknown Detail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DetailMutation) ResetField(name string) error {
	switch name {
	case detail.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case detail.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case detail.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case detail.FieldAppID:
		m.ResetAppID()
		return nil
	case detail.FieldUserID:
		m.ResetUserID()
		return nil
	case detail.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case detail.FieldIoType:
		m.ResetIoType()
		return nil
	case detail.FieldIoSubType:
		m.ResetIoSubType()
		return nil
	case detail.FieldAmount:
		m.ResetAmount()
		return nil
	case detail.FieldFromCoinTypeID:
		m.ResetFromCoinTypeID()
		return nil
	case detail.FieldCoinUsdCurrency:
		m.ResetCoinUsdCurrency()
		return nil
	case detail.FieldIoExtra:
		m.ResetIoExtra()
		return nil
	case detail.FieldFromOldID:
		m.ResetFromOldID()
		return nil
	}
	return fmt.Errorf("unknown Detail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DetailMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DetailMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DetailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DetailMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DetailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DetailMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DetailMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Detail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DetailMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Detail edge %s", name)
}

// ModuleMutation represents an operation that mutates the Module nodes in the graph.
type ModuleMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	name          *string
	description   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Module, error)
	predicates    []predicate.Module
}

var _ ent.Mutation = (*ModuleMutation)(nil)

// moduleOption allows management of the mutation configuration using functional options.
type moduleOption func(*ModuleMutation)

// newModuleMutation creates new mutation for the Module entity.
func newModuleMutation(c config, op Op, opts ...moduleOption) *ModuleMutation {
	m := &ModuleMutation{
		config:        c,
		op:            op,
		typ:           TypeModule,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withModuleID sets the ID field of the mutation.
func withModuleID(id uuid.UUID) moduleOption {
	return func(m *ModuleMutation) {
		var (
			err   error
			once  sync.Once
			value *Module
		)
		m.oldValue = func(ctx context.Context) (*Module, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Module.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withModule sets the old Module of the mutation.
func withModule(node *Module) moduleOption {
	return func(m *ModuleMutation) {
		m.oldValue = func(context.Context) (*Module, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ModuleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ModuleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Module entities.
func (m *ModuleMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ModuleMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ModuleMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Module.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ModuleMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ModuleMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Module entity.
// If the Module object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModuleMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *ModuleMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *ModuleMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ModuleMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ModuleMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ModuleMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Module entity.
// If the Module object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModuleMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *ModuleMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *ModuleMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ModuleMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ModuleMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ModuleMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Module entity.
// If the Module object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModuleMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *ModuleMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *ModuleMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ModuleMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetName sets the "name" field.
func (m *ModuleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ModuleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Module entity.
// If the Module object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModuleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ModuleMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ModuleMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ModuleMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Module entity.
// If the Module object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ModuleMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ModuleMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[module.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ModuleMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[module.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ModuleMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, module.FieldDescription)
}

// Where appends a list predicates to the ModuleMutation builder.
func (m *ModuleMutation) Where(ps ...predicate.Module) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ModuleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Module).
func (m *ModuleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ModuleMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, module.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, module.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, module.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, module.FieldName)
	}
	if m.description != nil {
		fields = append(fields, module.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ModuleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case module.FieldCreatedAt:
		return m.CreatedAt()
	case module.FieldUpdatedAt:
		return m.UpdatedAt()
	case module.FieldDeletedAt:
		return m.DeletedAt()
	case module.FieldName:
		return m.Name()
	case module.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ModuleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case module.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case module.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case module.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case module.FieldName:
		return m.OldName(ctx)
	case module.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Module field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ModuleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case module.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case module.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case module.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case module.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case module.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Module field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ModuleMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, module.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, module.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, module.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ModuleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case module.FieldCreatedAt:
		return m.AddedCreatedAt()
	case module.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case module.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ModuleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case module.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case module.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case module.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Module numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ModuleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(module.FieldDescription) {
		fields = append(fields, module.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ModuleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ModuleMutation) ClearField(name string) error {
	switch name {
	case module.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Module nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ModuleMutation) ResetField(name string) error {
	switch name {
	case module.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case module.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case module.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case module.FieldName:
		m.ResetName()
		return nil
	case module.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Module field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ModuleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ModuleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ModuleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ModuleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ModuleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ModuleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ModuleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Module unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ModuleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Module edge %s", name)
}

// PlanRelatedTestCaseMutation represents an operation that mutates the PlanRelatedTestCase nodes in the graph.
type PlanRelatedTestCaseMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	created_at       *uint32
	addcreated_at    *int32
	updated_at       *uint32
	addupdated_at    *int32
	deleted_at       *uint32
	adddeleted_at    *int32
	test_plan_id     *uuid.UUID
	test_case_id     *uuid.UUID
	test_case_output *string
	description      *string
	test_user_id     *uuid.UUID
	run_duration     *uint32
	addrun_duration  *int32
	test_case_result *string
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*PlanRelatedTestCase, error)
	predicates       []predicate.PlanRelatedTestCase
}

var _ ent.Mutation = (*PlanRelatedTestCaseMutation)(nil)

// planrelatedtestcaseOption allows management of the mutation configuration using functional options.
type planrelatedtestcaseOption func(*PlanRelatedTestCaseMutation)

// newPlanRelatedTestCaseMutation creates new mutation for the PlanRelatedTestCase entity.
func newPlanRelatedTestCaseMutation(c config, op Op, opts ...planrelatedtestcaseOption) *PlanRelatedTestCaseMutation {
	m := &PlanRelatedTestCaseMutation{
		config:        c,
		op:            op,
		typ:           TypePlanRelatedTestCase,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlanRelatedTestCaseID sets the ID field of the mutation.
func withPlanRelatedTestCaseID(id uuid.UUID) planrelatedtestcaseOption {
	return func(m *PlanRelatedTestCaseMutation) {
		var (
			err   error
			once  sync.Once
			value *PlanRelatedTestCase
		)
		m.oldValue = func(ctx context.Context) (*PlanRelatedTestCase, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PlanRelatedTestCase.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlanRelatedTestCase sets the old PlanRelatedTestCase of the mutation.
func withPlanRelatedTestCase(node *PlanRelatedTestCase) planrelatedtestcaseOption {
	return func(m *PlanRelatedTestCaseMutation) {
		m.oldValue = func(context.Context) (*PlanRelatedTestCase, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlanRelatedTestCaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlanRelatedTestCaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PlanRelatedTestCase entities.
func (m *PlanRelatedTestCaseMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlanRelatedTestCaseMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlanRelatedTestCaseMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PlanRelatedTestCase.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PlanRelatedTestCaseMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PlanRelatedTestCaseMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PlanRelatedTestCase entity.
// If the PlanRelatedTestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanRelatedTestCaseMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *PlanRelatedTestCaseMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *PlanRelatedTestCaseMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PlanRelatedTestCaseMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PlanRelatedTestCaseMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PlanRelatedTestCaseMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PlanRelatedTestCase entity.
// If the PlanRelatedTestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanRelatedTestCaseMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *PlanRelatedTestCaseMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *PlanRelatedTestCaseMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PlanRelatedTestCaseMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *PlanRelatedTestCaseMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *PlanRelatedTestCaseMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the PlanRelatedTestCase entity.
// If the PlanRelatedTestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanRelatedTestCaseMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *PlanRelatedTestCaseMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *PlanRelatedTestCaseMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *PlanRelatedTestCaseMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetTestPlanID sets the "test_plan_id" field.
func (m *PlanRelatedTestCaseMutation) SetTestPlanID(u uuid.UUID) {
	m.test_plan_id = &u
}

// TestPlanID returns the value of the "test_plan_id" field in the mutation.
func (m *PlanRelatedTestCaseMutation) TestPlanID() (r uuid.UUID, exists bool) {
	v := m.test_plan_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTestPlanID returns the old "test_plan_id" field's value of the PlanRelatedTestCase entity.
// If the PlanRelatedTestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanRelatedTestCaseMutation) OldTestPlanID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTestPlanID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTestPlanID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTestPlanID: %w", err)
	}
	return oldValue.TestPlanID, nil
}

// ClearTestPlanID clears the value of the "test_plan_id" field.
func (m *PlanRelatedTestCaseMutation) ClearTestPlanID() {
	m.test_plan_id = nil
	m.clearedFields[planrelatedtestcase.FieldTestPlanID] = struct{}{}
}

// TestPlanIDCleared returns if the "test_plan_id" field was cleared in this mutation.
func (m *PlanRelatedTestCaseMutation) TestPlanIDCleared() bool {
	_, ok := m.clearedFields[planrelatedtestcase.FieldTestPlanID]
	return ok
}

// ResetTestPlanID resets all changes to the "test_plan_id" field.
func (m *PlanRelatedTestCaseMutation) ResetTestPlanID() {
	m.test_plan_id = nil
	delete(m.clearedFields, planrelatedtestcase.FieldTestPlanID)
}

// SetTestCaseID sets the "test_case_id" field.
func (m *PlanRelatedTestCaseMutation) SetTestCaseID(u uuid.UUID) {
	m.test_case_id = &u
}

// TestCaseID returns the value of the "test_case_id" field in the mutation.
func (m *PlanRelatedTestCaseMutation) TestCaseID() (r uuid.UUID, exists bool) {
	v := m.test_case_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTestCaseID returns the old "test_case_id" field's value of the PlanRelatedTestCase entity.
// If the PlanRelatedTestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanRelatedTestCaseMutation) OldTestCaseID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTestCaseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTestCaseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTestCaseID: %w", err)
	}
	return oldValue.TestCaseID, nil
}

// ClearTestCaseID clears the value of the "test_case_id" field.
func (m *PlanRelatedTestCaseMutation) ClearTestCaseID() {
	m.test_case_id = nil
	m.clearedFields[planrelatedtestcase.FieldTestCaseID] = struct{}{}
}

// TestCaseIDCleared returns if the "test_case_id" field was cleared in this mutation.
func (m *PlanRelatedTestCaseMutation) TestCaseIDCleared() bool {
	_, ok := m.clearedFields[planrelatedtestcase.FieldTestCaseID]
	return ok
}

// ResetTestCaseID resets all changes to the "test_case_id" field.
func (m *PlanRelatedTestCaseMutation) ResetTestCaseID() {
	m.test_case_id = nil
	delete(m.clearedFields, planrelatedtestcase.FieldTestCaseID)
}

// SetTestCaseOutput sets the "test_case_output" field.
func (m *PlanRelatedTestCaseMutation) SetTestCaseOutput(s string) {
	m.test_case_output = &s
}

// TestCaseOutput returns the value of the "test_case_output" field in the mutation.
func (m *PlanRelatedTestCaseMutation) TestCaseOutput() (r string, exists bool) {
	v := m.test_case_output
	if v == nil {
		return
	}
	return *v, true
}

// OldTestCaseOutput returns the old "test_case_output" field's value of the PlanRelatedTestCase entity.
// If the PlanRelatedTestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanRelatedTestCaseMutation) OldTestCaseOutput(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTestCaseOutput is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTestCaseOutput requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTestCaseOutput: %w", err)
	}
	return oldValue.TestCaseOutput, nil
}

// ClearTestCaseOutput clears the value of the "test_case_output" field.
func (m *PlanRelatedTestCaseMutation) ClearTestCaseOutput() {
	m.test_case_output = nil
	m.clearedFields[planrelatedtestcase.FieldTestCaseOutput] = struct{}{}
}

// TestCaseOutputCleared returns if the "test_case_output" field was cleared in this mutation.
func (m *PlanRelatedTestCaseMutation) TestCaseOutputCleared() bool {
	_, ok := m.clearedFields[planrelatedtestcase.FieldTestCaseOutput]
	return ok
}

// ResetTestCaseOutput resets all changes to the "test_case_output" field.
func (m *PlanRelatedTestCaseMutation) ResetTestCaseOutput() {
	m.test_case_output = nil
	delete(m.clearedFields, planrelatedtestcase.FieldTestCaseOutput)
}

// SetDescription sets the "description" field.
func (m *PlanRelatedTestCaseMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PlanRelatedTestCaseMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the PlanRelatedTestCase entity.
// If the PlanRelatedTestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanRelatedTestCaseMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *PlanRelatedTestCaseMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[planrelatedtestcase.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *PlanRelatedTestCaseMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[planrelatedtestcase.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *PlanRelatedTestCaseMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, planrelatedtestcase.FieldDescription)
}

// SetTestUserID sets the "test_user_id" field.
func (m *PlanRelatedTestCaseMutation) SetTestUserID(u uuid.UUID) {
	m.test_user_id = &u
}

// TestUserID returns the value of the "test_user_id" field in the mutation.
func (m *PlanRelatedTestCaseMutation) TestUserID() (r uuid.UUID, exists bool) {
	v := m.test_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTestUserID returns the old "test_user_id" field's value of the PlanRelatedTestCase entity.
// If the PlanRelatedTestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanRelatedTestCaseMutation) OldTestUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTestUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTestUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTestUserID: %w", err)
	}
	return oldValue.TestUserID, nil
}

// ClearTestUserID clears the value of the "test_user_id" field.
func (m *PlanRelatedTestCaseMutation) ClearTestUserID() {
	m.test_user_id = nil
	m.clearedFields[planrelatedtestcase.FieldTestUserID] = struct{}{}
}

// TestUserIDCleared returns if the "test_user_id" field was cleared in this mutation.
func (m *PlanRelatedTestCaseMutation) TestUserIDCleared() bool {
	_, ok := m.clearedFields[planrelatedtestcase.FieldTestUserID]
	return ok
}

// ResetTestUserID resets all changes to the "test_user_id" field.
func (m *PlanRelatedTestCaseMutation) ResetTestUserID() {
	m.test_user_id = nil
	delete(m.clearedFields, planrelatedtestcase.FieldTestUserID)
}

// SetRunDuration sets the "run_duration" field.
func (m *PlanRelatedTestCaseMutation) SetRunDuration(u uint32) {
	m.run_duration = &u
	m.addrun_duration = nil
}

// RunDuration returns the value of the "run_duration" field in the mutation.
func (m *PlanRelatedTestCaseMutation) RunDuration() (r uint32, exists bool) {
	v := m.run_duration
	if v == nil {
		return
	}
	return *v, true
}

// OldRunDuration returns the old "run_duration" field's value of the PlanRelatedTestCase entity.
// If the PlanRelatedTestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanRelatedTestCaseMutation) OldRunDuration(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRunDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRunDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRunDuration: %w", err)
	}
	return oldValue.RunDuration, nil
}

// AddRunDuration adds u to the "run_duration" field.
func (m *PlanRelatedTestCaseMutation) AddRunDuration(u int32) {
	if m.addrun_duration != nil {
		*m.addrun_duration += u
	} else {
		m.addrun_duration = &u
	}
}

// AddedRunDuration returns the value that was added to the "run_duration" field in this mutation.
func (m *PlanRelatedTestCaseMutation) AddedRunDuration() (r int32, exists bool) {
	v := m.addrun_duration
	if v == nil {
		return
	}
	return *v, true
}

// ClearRunDuration clears the value of the "run_duration" field.
func (m *PlanRelatedTestCaseMutation) ClearRunDuration() {
	m.run_duration = nil
	m.addrun_duration = nil
	m.clearedFields[planrelatedtestcase.FieldRunDuration] = struct{}{}
}

// RunDurationCleared returns if the "run_duration" field was cleared in this mutation.
func (m *PlanRelatedTestCaseMutation) RunDurationCleared() bool {
	_, ok := m.clearedFields[planrelatedtestcase.FieldRunDuration]
	return ok
}

// ResetRunDuration resets all changes to the "run_duration" field.
func (m *PlanRelatedTestCaseMutation) ResetRunDuration() {
	m.run_duration = nil
	m.addrun_duration = nil
	delete(m.clearedFields, planrelatedtestcase.FieldRunDuration)
}

// SetTestCaseResult sets the "test_case_result" field.
func (m *PlanRelatedTestCaseMutation) SetTestCaseResult(s string) {
	m.test_case_result = &s
}

// TestCaseResult returns the value of the "test_case_result" field in the mutation.
func (m *PlanRelatedTestCaseMutation) TestCaseResult() (r string, exists bool) {
	v := m.test_case_result
	if v == nil {
		return
	}
	return *v, true
}

// OldTestCaseResult returns the old "test_case_result" field's value of the PlanRelatedTestCase entity.
// If the PlanRelatedTestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlanRelatedTestCaseMutation) OldTestCaseResult(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTestCaseResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTestCaseResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTestCaseResult: %w", err)
	}
	return oldValue.TestCaseResult, nil
}

// ClearTestCaseResult clears the value of the "test_case_result" field.
func (m *PlanRelatedTestCaseMutation) ClearTestCaseResult() {
	m.test_case_result = nil
	m.clearedFields[planrelatedtestcase.FieldTestCaseResult] = struct{}{}
}

// TestCaseResultCleared returns if the "test_case_result" field was cleared in this mutation.
func (m *PlanRelatedTestCaseMutation) TestCaseResultCleared() bool {
	_, ok := m.clearedFields[planrelatedtestcase.FieldTestCaseResult]
	return ok
}

// ResetTestCaseResult resets all changes to the "test_case_result" field.
func (m *PlanRelatedTestCaseMutation) ResetTestCaseResult() {
	m.test_case_result = nil
	delete(m.clearedFields, planrelatedtestcase.FieldTestCaseResult)
}

// Where appends a list predicates to the PlanRelatedTestCaseMutation builder.
func (m *PlanRelatedTestCaseMutation) Where(ps ...predicate.PlanRelatedTestCase) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PlanRelatedTestCaseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PlanRelatedTestCase).
func (m *PlanRelatedTestCaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlanRelatedTestCaseMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, planrelatedtestcase.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, planrelatedtestcase.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, planrelatedtestcase.FieldDeletedAt)
	}
	if m.test_plan_id != nil {
		fields = append(fields, planrelatedtestcase.FieldTestPlanID)
	}
	if m.test_case_id != nil {
		fields = append(fields, planrelatedtestcase.FieldTestCaseID)
	}
	if m.test_case_output != nil {
		fields = append(fields, planrelatedtestcase.FieldTestCaseOutput)
	}
	if m.description != nil {
		fields = append(fields, planrelatedtestcase.FieldDescription)
	}
	if m.test_user_id != nil {
		fields = append(fields, planrelatedtestcase.FieldTestUserID)
	}
	if m.run_duration != nil {
		fields = append(fields, planrelatedtestcase.FieldRunDuration)
	}
	if m.test_case_result != nil {
		fields = append(fields, planrelatedtestcase.FieldTestCaseResult)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlanRelatedTestCaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case planrelatedtestcase.FieldCreatedAt:
		return m.CreatedAt()
	case planrelatedtestcase.FieldUpdatedAt:
		return m.UpdatedAt()
	case planrelatedtestcase.FieldDeletedAt:
		return m.DeletedAt()
	case planrelatedtestcase.FieldTestPlanID:
		return m.TestPlanID()
	case planrelatedtestcase.FieldTestCaseID:
		return m.TestCaseID()
	case planrelatedtestcase.FieldTestCaseOutput:
		return m.TestCaseOutput()
	case planrelatedtestcase.FieldDescription:
		return m.Description()
	case planrelatedtestcase.FieldTestUserID:
		return m.TestUserID()
	case planrelatedtestcase.FieldRunDuration:
		return m.RunDuration()
	case planrelatedtestcase.FieldTestCaseResult:
		return m.TestCaseResult()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlanRelatedTestCaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case planrelatedtestcase.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case planrelatedtestcase.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case planrelatedtestcase.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case planrelatedtestcase.FieldTestPlanID:
		return m.OldTestPlanID(ctx)
	case planrelatedtestcase.FieldTestCaseID:
		return m.OldTestCaseID(ctx)
	case planrelatedtestcase.FieldTestCaseOutput:
		return m.OldTestCaseOutput(ctx)
	case planrelatedtestcase.FieldDescription:
		return m.OldDescription(ctx)
	case planrelatedtestcase.FieldTestUserID:
		return m.OldTestUserID(ctx)
	case planrelatedtestcase.FieldRunDuration:
		return m.OldRunDuration(ctx)
	case planrelatedtestcase.FieldTestCaseResult:
		return m.OldTestCaseResult(ctx)
	}
	return nil, fmt.Errorf("unknown PlanRelatedTestCase field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlanRelatedTestCaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case planrelatedtestcase.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case planrelatedtestcase.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case planrelatedtestcase.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case planrelatedtestcase.FieldTestPlanID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTestPlanID(v)
		return nil
	case planrelatedtestcase.FieldTestCaseID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTestCaseID(v)
		return nil
	case planrelatedtestcase.FieldTestCaseOutput:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTestCaseOutput(v)
		return nil
	case planrelatedtestcase.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case planrelatedtestcase.FieldTestUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTestUserID(v)
		return nil
	case planrelatedtestcase.FieldRunDuration:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRunDuration(v)
		return nil
	case planrelatedtestcase.FieldTestCaseResult:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTestCaseResult(v)
		return nil
	}
	return fmt.Errorf("unknown PlanRelatedTestCase field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlanRelatedTestCaseMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, planrelatedtestcase.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, planrelatedtestcase.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, planrelatedtestcase.FieldDeletedAt)
	}
	if m.addrun_duration != nil {
		fields = append(fields, planrelatedtestcase.FieldRunDuration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlanRelatedTestCaseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case planrelatedtestcase.FieldCreatedAt:
		return m.AddedCreatedAt()
	case planrelatedtestcase.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case planrelatedtestcase.FieldDeletedAt:
		return m.AddedDeletedAt()
	case planrelatedtestcase.FieldRunDuration:
		return m.AddedRunDuration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlanRelatedTestCaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case planrelatedtestcase.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case planrelatedtestcase.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case planrelatedtestcase.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case planrelatedtestcase.FieldRunDuration:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRunDuration(v)
		return nil
	}
	return fmt.Errorf("unknown PlanRelatedTestCase numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlanRelatedTestCaseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(planrelatedtestcase.FieldTestPlanID) {
		fields = append(fields, planrelatedtestcase.FieldTestPlanID)
	}
	if m.FieldCleared(planrelatedtestcase.FieldTestCaseID) {
		fields = append(fields, planrelatedtestcase.FieldTestCaseID)
	}
	if m.FieldCleared(planrelatedtestcase.FieldTestCaseOutput) {
		fields = append(fields, planrelatedtestcase.FieldTestCaseOutput)
	}
	if m.FieldCleared(planrelatedtestcase.FieldDescription) {
		fields = append(fields, planrelatedtestcase.FieldDescription)
	}
	if m.FieldCleared(planrelatedtestcase.FieldTestUserID) {
		fields = append(fields, planrelatedtestcase.FieldTestUserID)
	}
	if m.FieldCleared(planrelatedtestcase.FieldRunDuration) {
		fields = append(fields, planrelatedtestcase.FieldRunDuration)
	}
	if m.FieldCleared(planrelatedtestcase.FieldTestCaseResult) {
		fields = append(fields, planrelatedtestcase.FieldTestCaseResult)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlanRelatedTestCaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlanRelatedTestCaseMutation) ClearField(name string) error {
	switch name {
	case planrelatedtestcase.FieldTestPlanID:
		m.ClearTestPlanID()
		return nil
	case planrelatedtestcase.FieldTestCaseID:
		m.ClearTestCaseID()
		return nil
	case planrelatedtestcase.FieldTestCaseOutput:
		m.ClearTestCaseOutput()
		return nil
	case planrelatedtestcase.FieldDescription:
		m.ClearDescription()
		return nil
	case planrelatedtestcase.FieldTestUserID:
		m.ClearTestUserID()
		return nil
	case planrelatedtestcase.FieldRunDuration:
		m.ClearRunDuration()
		return nil
	case planrelatedtestcase.FieldTestCaseResult:
		m.ClearTestCaseResult()
		return nil
	}
	return fmt.Errorf("unknown PlanRelatedTestCase nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlanRelatedTestCaseMutation) ResetField(name string) error {
	switch name {
	case planrelatedtestcase.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case planrelatedtestcase.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case planrelatedtestcase.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case planrelatedtestcase.FieldTestPlanID:
		m.ResetTestPlanID()
		return nil
	case planrelatedtestcase.FieldTestCaseID:
		m.ResetTestCaseID()
		return nil
	case planrelatedtestcase.FieldTestCaseOutput:
		m.ResetTestCaseOutput()
		return nil
	case planrelatedtestcase.FieldDescription:
		m.ResetDescription()
		return nil
	case planrelatedtestcase.FieldTestUserID:
		m.ResetTestUserID()
		return nil
	case planrelatedtestcase.FieldRunDuration:
		m.ResetRunDuration()
		return nil
	case planrelatedtestcase.FieldTestCaseResult:
		m.ResetTestCaseResult()
		return nil
	}
	return fmt.Errorf("unknown PlanRelatedTestCase field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlanRelatedTestCaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlanRelatedTestCaseMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlanRelatedTestCaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlanRelatedTestCaseMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlanRelatedTestCaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlanRelatedTestCaseMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlanRelatedTestCaseMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PlanRelatedTestCase unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlanRelatedTestCaseMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PlanRelatedTestCase edge %s", name)
}

// RelatedTestCaseMutation represents an operation that mutates the RelatedTestCase nodes in the graph.
type RelatedTestCaseMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	created_at           *uint32
	addcreated_at        *int32
	updated_at           *uint32
	addupdated_at        *int32
	deleted_at           *uint32
	adddeleted_at        *int32
	cond_type            *string
	test_case_id         *uuid.UUID
	related_test_case_id *uuid.UUID
	arguments_transfer   *string
	index                *uint32
	addindex             *int32
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*RelatedTestCase, error)
	predicates           []predicate.RelatedTestCase
}

var _ ent.Mutation = (*RelatedTestCaseMutation)(nil)

// relatedtestcaseOption allows management of the mutation configuration using functional options.
type relatedtestcaseOption func(*RelatedTestCaseMutation)

// newRelatedTestCaseMutation creates new mutation for the RelatedTestCase entity.
func newRelatedTestCaseMutation(c config, op Op, opts ...relatedtestcaseOption) *RelatedTestCaseMutation {
	m := &RelatedTestCaseMutation{
		config:        c,
		op:            op,
		typ:           TypeRelatedTestCase,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRelatedTestCaseID sets the ID field of the mutation.
func withRelatedTestCaseID(id uuid.UUID) relatedtestcaseOption {
	return func(m *RelatedTestCaseMutation) {
		var (
			err   error
			once  sync.Once
			value *RelatedTestCase
		)
		m.oldValue = func(ctx context.Context) (*RelatedTestCase, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RelatedTestCase.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRelatedTestCase sets the old RelatedTestCase of the mutation.
func withRelatedTestCase(node *RelatedTestCase) relatedtestcaseOption {
	return func(m *RelatedTestCaseMutation) {
		m.oldValue = func(context.Context) (*RelatedTestCase, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RelatedTestCaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RelatedTestCaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RelatedTestCase entities.
func (m *RelatedTestCaseMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RelatedTestCaseMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RelatedTestCaseMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RelatedTestCase.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *RelatedTestCaseMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RelatedTestCaseMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the RelatedTestCase entity.
// If the RelatedTestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RelatedTestCaseMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *RelatedTestCaseMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *RelatedTestCaseMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RelatedTestCaseMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RelatedTestCaseMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RelatedTestCaseMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the RelatedTestCase entity.
// If the RelatedTestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RelatedTestCaseMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *RelatedTestCaseMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *RelatedTestCaseMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RelatedTestCaseMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *RelatedTestCaseMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *RelatedTestCaseMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the RelatedTestCase entity.
// If the RelatedTestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RelatedTestCaseMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *RelatedTestCaseMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *RelatedTestCaseMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *RelatedTestCaseMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetCondType sets the "cond_type" field.
func (m *RelatedTestCaseMutation) SetCondType(s string) {
	m.cond_type = &s
}

// CondType returns the value of the "cond_type" field in the mutation.
func (m *RelatedTestCaseMutation) CondType() (r string, exists bool) {
	v := m.cond_type
	if v == nil {
		return
	}
	return *v, true
}

// OldCondType returns the old "cond_type" field's value of the RelatedTestCase entity.
// If the RelatedTestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RelatedTestCaseMutation) OldCondType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCondType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCondType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCondType: %w", err)
	}
	return oldValue.CondType, nil
}

// ClearCondType clears the value of the "cond_type" field.
func (m *RelatedTestCaseMutation) ClearCondType() {
	m.cond_type = nil
	m.clearedFields[relatedtestcase.FieldCondType] = struct{}{}
}

// CondTypeCleared returns if the "cond_type" field was cleared in this mutation.
func (m *RelatedTestCaseMutation) CondTypeCleared() bool {
	_, ok := m.clearedFields[relatedtestcase.FieldCondType]
	return ok
}

// ResetCondType resets all changes to the "cond_type" field.
func (m *RelatedTestCaseMutation) ResetCondType() {
	m.cond_type = nil
	delete(m.clearedFields, relatedtestcase.FieldCondType)
}

// SetTestCaseID sets the "test_case_id" field.
func (m *RelatedTestCaseMutation) SetTestCaseID(u uuid.UUID) {
	m.test_case_id = &u
}

// TestCaseID returns the value of the "test_case_id" field in the mutation.
func (m *RelatedTestCaseMutation) TestCaseID() (r uuid.UUID, exists bool) {
	v := m.test_case_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTestCaseID returns the old "test_case_id" field's value of the RelatedTestCase entity.
// If the RelatedTestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RelatedTestCaseMutation) OldTestCaseID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTestCaseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTestCaseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTestCaseID: %w", err)
	}
	return oldValue.TestCaseID, nil
}

// ClearTestCaseID clears the value of the "test_case_id" field.
func (m *RelatedTestCaseMutation) ClearTestCaseID() {
	m.test_case_id = nil
	m.clearedFields[relatedtestcase.FieldTestCaseID] = struct{}{}
}

// TestCaseIDCleared returns if the "test_case_id" field was cleared in this mutation.
func (m *RelatedTestCaseMutation) TestCaseIDCleared() bool {
	_, ok := m.clearedFields[relatedtestcase.FieldTestCaseID]
	return ok
}

// ResetTestCaseID resets all changes to the "test_case_id" field.
func (m *RelatedTestCaseMutation) ResetTestCaseID() {
	m.test_case_id = nil
	delete(m.clearedFields, relatedtestcase.FieldTestCaseID)
}

// SetRelatedTestCaseID sets the "related_test_case_id" field.
func (m *RelatedTestCaseMutation) SetRelatedTestCaseID(u uuid.UUID) {
	m.related_test_case_id = &u
}

// RelatedTestCaseID returns the value of the "related_test_case_id" field in the mutation.
func (m *RelatedTestCaseMutation) RelatedTestCaseID() (r uuid.UUID, exists bool) {
	v := m.related_test_case_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRelatedTestCaseID returns the old "related_test_case_id" field's value of the RelatedTestCase entity.
// If the RelatedTestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RelatedTestCaseMutation) OldRelatedTestCaseID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRelatedTestCaseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRelatedTestCaseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRelatedTestCaseID: %w", err)
	}
	return oldValue.RelatedTestCaseID, nil
}

// ClearRelatedTestCaseID clears the value of the "related_test_case_id" field.
func (m *RelatedTestCaseMutation) ClearRelatedTestCaseID() {
	m.related_test_case_id = nil
	m.clearedFields[relatedtestcase.FieldRelatedTestCaseID] = struct{}{}
}

// RelatedTestCaseIDCleared returns if the "related_test_case_id" field was cleared in this mutation.
func (m *RelatedTestCaseMutation) RelatedTestCaseIDCleared() bool {
	_, ok := m.clearedFields[relatedtestcase.FieldRelatedTestCaseID]
	return ok
}

// ResetRelatedTestCaseID resets all changes to the "related_test_case_id" field.
func (m *RelatedTestCaseMutation) ResetRelatedTestCaseID() {
	m.related_test_case_id = nil
	delete(m.clearedFields, relatedtestcase.FieldRelatedTestCaseID)
}

// SetArgumentsTransfer sets the "arguments_transfer" field.
func (m *RelatedTestCaseMutation) SetArgumentsTransfer(s string) {
	m.arguments_transfer = &s
}

// ArgumentsTransfer returns the value of the "arguments_transfer" field in the mutation.
func (m *RelatedTestCaseMutation) ArgumentsTransfer() (r string, exists bool) {
	v := m.arguments_transfer
	if v == nil {
		return
	}
	return *v, true
}

// OldArgumentsTransfer returns the old "arguments_transfer" field's value of the RelatedTestCase entity.
// If the RelatedTestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RelatedTestCaseMutation) OldArgumentsTransfer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArgumentsTransfer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArgumentsTransfer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArgumentsTransfer: %w", err)
	}
	return oldValue.ArgumentsTransfer, nil
}

// ClearArgumentsTransfer clears the value of the "arguments_transfer" field.
func (m *RelatedTestCaseMutation) ClearArgumentsTransfer() {
	m.arguments_transfer = nil
	m.clearedFields[relatedtestcase.FieldArgumentsTransfer] = struct{}{}
}

// ArgumentsTransferCleared returns if the "arguments_transfer" field was cleared in this mutation.
func (m *RelatedTestCaseMutation) ArgumentsTransferCleared() bool {
	_, ok := m.clearedFields[relatedtestcase.FieldArgumentsTransfer]
	return ok
}

// ResetArgumentsTransfer resets all changes to the "arguments_transfer" field.
func (m *RelatedTestCaseMutation) ResetArgumentsTransfer() {
	m.arguments_transfer = nil
	delete(m.clearedFields, relatedtestcase.FieldArgumentsTransfer)
}

// SetIndex sets the "index" field.
func (m *RelatedTestCaseMutation) SetIndex(u uint32) {
	m.index = &u
	m.addindex = nil
}

// Index returns the value of the "index" field in the mutation.
func (m *RelatedTestCaseMutation) Index() (r uint32, exists bool) {
	v := m.index
	if v == nil {
		return
	}
	return *v, true
}

// OldIndex returns the old "index" field's value of the RelatedTestCase entity.
// If the RelatedTestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RelatedTestCaseMutation) OldIndex(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndex: %w", err)
	}
	return oldValue.Index, nil
}

// AddIndex adds u to the "index" field.
func (m *RelatedTestCaseMutation) AddIndex(u int32) {
	if m.addindex != nil {
		*m.addindex += u
	} else {
		m.addindex = &u
	}
}

// AddedIndex returns the value that was added to the "index" field in this mutation.
func (m *RelatedTestCaseMutation) AddedIndex() (r int32, exists bool) {
	v := m.addindex
	if v == nil {
		return
	}
	return *v, true
}

// ClearIndex clears the value of the "index" field.
func (m *RelatedTestCaseMutation) ClearIndex() {
	m.index = nil
	m.addindex = nil
	m.clearedFields[relatedtestcase.FieldIndex] = struct{}{}
}

// IndexCleared returns if the "index" field was cleared in this mutation.
func (m *RelatedTestCaseMutation) IndexCleared() bool {
	_, ok := m.clearedFields[relatedtestcase.FieldIndex]
	return ok
}

// ResetIndex resets all changes to the "index" field.
func (m *RelatedTestCaseMutation) ResetIndex() {
	m.index = nil
	m.addindex = nil
	delete(m.clearedFields, relatedtestcase.FieldIndex)
}

// Where appends a list predicates to the RelatedTestCaseMutation builder.
func (m *RelatedTestCaseMutation) Where(ps ...predicate.RelatedTestCase) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RelatedTestCaseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RelatedTestCase).
func (m *RelatedTestCaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RelatedTestCaseMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, relatedtestcase.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, relatedtestcase.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, relatedtestcase.FieldDeletedAt)
	}
	if m.cond_type != nil {
		fields = append(fields, relatedtestcase.FieldCondType)
	}
	if m.test_case_id != nil {
		fields = append(fields, relatedtestcase.FieldTestCaseID)
	}
	if m.related_test_case_id != nil {
		fields = append(fields, relatedtestcase.FieldRelatedTestCaseID)
	}
	if m.arguments_transfer != nil {
		fields = append(fields, relatedtestcase.FieldArgumentsTransfer)
	}
	if m.index != nil {
		fields = append(fields, relatedtestcase.FieldIndex)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RelatedTestCaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case relatedtestcase.FieldCreatedAt:
		return m.CreatedAt()
	case relatedtestcase.FieldUpdatedAt:
		return m.UpdatedAt()
	case relatedtestcase.FieldDeletedAt:
		return m.DeletedAt()
	case relatedtestcase.FieldCondType:
		return m.CondType()
	case relatedtestcase.FieldTestCaseID:
		return m.TestCaseID()
	case relatedtestcase.FieldRelatedTestCaseID:
		return m.RelatedTestCaseID()
	case relatedtestcase.FieldArgumentsTransfer:
		return m.ArgumentsTransfer()
	case relatedtestcase.FieldIndex:
		return m.Index()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RelatedTestCaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case relatedtestcase.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case relatedtestcase.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case relatedtestcase.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case relatedtestcase.FieldCondType:
		return m.OldCondType(ctx)
	case relatedtestcase.FieldTestCaseID:
		return m.OldTestCaseID(ctx)
	case relatedtestcase.FieldRelatedTestCaseID:
		return m.OldRelatedTestCaseID(ctx)
	case relatedtestcase.FieldArgumentsTransfer:
		return m.OldArgumentsTransfer(ctx)
	case relatedtestcase.FieldIndex:
		return m.OldIndex(ctx)
	}
	return nil, fmt.Errorf("unknown RelatedTestCase field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RelatedTestCaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case relatedtestcase.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case relatedtestcase.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case relatedtestcase.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case relatedtestcase.FieldCondType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCondType(v)
		return nil
	case relatedtestcase.FieldTestCaseID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTestCaseID(v)
		return nil
	case relatedtestcase.FieldRelatedTestCaseID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRelatedTestCaseID(v)
		return nil
	case relatedtestcase.FieldArgumentsTransfer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArgumentsTransfer(v)
		return nil
	case relatedtestcase.FieldIndex:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndex(v)
		return nil
	}
	return fmt.Errorf("unknown RelatedTestCase field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RelatedTestCaseMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, relatedtestcase.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, relatedtestcase.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, relatedtestcase.FieldDeletedAt)
	}
	if m.addindex != nil {
		fields = append(fields, relatedtestcase.FieldIndex)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RelatedTestCaseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case relatedtestcase.FieldCreatedAt:
		return m.AddedCreatedAt()
	case relatedtestcase.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case relatedtestcase.FieldDeletedAt:
		return m.AddedDeletedAt()
	case relatedtestcase.FieldIndex:
		return m.AddedIndex()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RelatedTestCaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case relatedtestcase.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case relatedtestcase.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case relatedtestcase.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case relatedtestcase.FieldIndex:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIndex(v)
		return nil
	}
	return fmt.Errorf("unknown RelatedTestCase numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RelatedTestCaseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(relatedtestcase.FieldCondType) {
		fields = append(fields, relatedtestcase.FieldCondType)
	}
	if m.FieldCleared(relatedtestcase.FieldTestCaseID) {
		fields = append(fields, relatedtestcase.FieldTestCaseID)
	}
	if m.FieldCleared(relatedtestcase.FieldRelatedTestCaseID) {
		fields = append(fields, relatedtestcase.FieldRelatedTestCaseID)
	}
	if m.FieldCleared(relatedtestcase.FieldArgumentsTransfer) {
		fields = append(fields, relatedtestcase.FieldArgumentsTransfer)
	}
	if m.FieldCleared(relatedtestcase.FieldIndex) {
		fields = append(fields, relatedtestcase.FieldIndex)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RelatedTestCaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RelatedTestCaseMutation) ClearField(name string) error {
	switch name {
	case relatedtestcase.FieldCondType:
		m.ClearCondType()
		return nil
	case relatedtestcase.FieldTestCaseID:
		m.ClearTestCaseID()
		return nil
	case relatedtestcase.FieldRelatedTestCaseID:
		m.ClearRelatedTestCaseID()
		return nil
	case relatedtestcase.FieldArgumentsTransfer:
		m.ClearArgumentsTransfer()
		return nil
	case relatedtestcase.FieldIndex:
		m.ClearIndex()
		return nil
	}
	return fmt.Errorf("unknown RelatedTestCase nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RelatedTestCaseMutation) ResetField(name string) error {
	switch name {
	case relatedtestcase.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case relatedtestcase.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case relatedtestcase.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case relatedtestcase.FieldCondType:
		m.ResetCondType()
		return nil
	case relatedtestcase.FieldTestCaseID:
		m.ResetTestCaseID()
		return nil
	case relatedtestcase.FieldRelatedTestCaseID:
		m.ResetRelatedTestCaseID()
		return nil
	case relatedtestcase.FieldArgumentsTransfer:
		m.ResetArgumentsTransfer()
		return nil
	case relatedtestcase.FieldIndex:
		m.ResetIndex()
		return nil
	}
	return fmt.Errorf("unknown RelatedTestCase field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RelatedTestCaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RelatedTestCaseMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RelatedTestCaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RelatedTestCaseMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RelatedTestCaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RelatedTestCaseMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RelatedTestCaseMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RelatedTestCase unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RelatedTestCaseMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RelatedTestCase edge %s", name)
}

// TestCaseMutation represents an operation that mutates the TestCase nodes in the graph.
type TestCaseMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	created_at           *uint32
	addcreated_at        *int32
	updated_at           *uint32
	addupdated_at        *int32
	deleted_at           *uint32
	adddeleted_at        *int32
	name                 *string
	description          *string
	module_id            *uuid.UUID
	api_id               *uuid.UUID
	arguments            *string
	arg_type_description *string
	expectation_result   *string
	test_case_type       *string
	deprecated           *bool
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*TestCase, error)
	predicates           []predicate.TestCase
}

var _ ent.Mutation = (*TestCaseMutation)(nil)

// testcaseOption allows management of the mutation configuration using functional options.
type testcaseOption func(*TestCaseMutation)

// newTestCaseMutation creates new mutation for the TestCase entity.
func newTestCaseMutation(c config, op Op, opts ...testcaseOption) *TestCaseMutation {
	m := &TestCaseMutation{
		config:        c,
		op:            op,
		typ:           TypeTestCase,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTestCaseID sets the ID field of the mutation.
func withTestCaseID(id uuid.UUID) testcaseOption {
	return func(m *TestCaseMutation) {
		var (
			err   error
			once  sync.Once
			value *TestCase
		)
		m.oldValue = func(ctx context.Context) (*TestCase, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TestCase.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTestCase sets the old TestCase of the mutation.
func withTestCase(node *TestCase) testcaseOption {
	return func(m *TestCaseMutation) {
		m.oldValue = func(context.Context) (*TestCase, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TestCaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TestCaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TestCase entities.
func (m *TestCaseMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TestCaseMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TestCaseMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TestCase.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TestCaseMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TestCaseMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TestCase entity.
// If the TestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestCaseMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *TestCaseMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *TestCaseMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TestCaseMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TestCaseMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TestCaseMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TestCase entity.
// If the TestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestCaseMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *TestCaseMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *TestCaseMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TestCaseMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *TestCaseMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *TestCaseMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the TestCase entity.
// If the TestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestCaseMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *TestCaseMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *TestCaseMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *TestCaseMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetName sets the "name" field.
func (m *TestCaseMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TestCaseMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TestCase entity.
// If the TestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestCaseMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *TestCaseMutation) ClearName() {
	m.name = nil
	m.clearedFields[testcase.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *TestCaseMutation) NameCleared() bool {
	_, ok := m.clearedFields[testcase.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *TestCaseMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, testcase.FieldName)
}

// SetDescription sets the "description" field.
func (m *TestCaseMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TestCaseMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the TestCase entity.
// If the TestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestCaseMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *TestCaseMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[testcase.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *TestCaseMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[testcase.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *TestCaseMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, testcase.FieldDescription)
}

// SetModuleID sets the "module_id" field.
func (m *TestCaseMutation) SetModuleID(u uuid.UUID) {
	m.module_id = &u
}

// ModuleID returns the value of the "module_id" field in the mutation.
func (m *TestCaseMutation) ModuleID() (r uuid.UUID, exists bool) {
	v := m.module_id
	if v == nil {
		return
	}
	return *v, true
}

// OldModuleID returns the old "module_id" field's value of the TestCase entity.
// If the TestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestCaseMutation) OldModuleID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModuleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModuleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModuleID: %w", err)
	}
	return oldValue.ModuleID, nil
}

// ClearModuleID clears the value of the "module_id" field.
func (m *TestCaseMutation) ClearModuleID() {
	m.module_id = nil
	m.clearedFields[testcase.FieldModuleID] = struct{}{}
}

// ModuleIDCleared returns if the "module_id" field was cleared in this mutation.
func (m *TestCaseMutation) ModuleIDCleared() bool {
	_, ok := m.clearedFields[testcase.FieldModuleID]
	return ok
}

// ResetModuleID resets all changes to the "module_id" field.
func (m *TestCaseMutation) ResetModuleID() {
	m.module_id = nil
	delete(m.clearedFields, testcase.FieldModuleID)
}

// SetAPIID sets the "api_id" field.
func (m *TestCaseMutation) SetAPIID(u uuid.UUID) {
	m.api_id = &u
}

// APIID returns the value of the "api_id" field in the mutation.
func (m *TestCaseMutation) APIID() (r uuid.UUID, exists bool) {
	v := m.api_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAPIID returns the old "api_id" field's value of the TestCase entity.
// If the TestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestCaseMutation) OldAPIID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAPIID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAPIID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAPIID: %w", err)
	}
	return oldValue.APIID, nil
}

// ClearAPIID clears the value of the "api_id" field.
func (m *TestCaseMutation) ClearAPIID() {
	m.api_id = nil
	m.clearedFields[testcase.FieldAPIID] = struct{}{}
}

// APIIDCleared returns if the "api_id" field was cleared in this mutation.
func (m *TestCaseMutation) APIIDCleared() bool {
	_, ok := m.clearedFields[testcase.FieldAPIID]
	return ok
}

// ResetAPIID resets all changes to the "api_id" field.
func (m *TestCaseMutation) ResetAPIID() {
	m.api_id = nil
	delete(m.clearedFields, testcase.FieldAPIID)
}

// SetArguments sets the "arguments" field.
func (m *TestCaseMutation) SetArguments(s string) {
	m.arguments = &s
}

// Arguments returns the value of the "arguments" field in the mutation.
func (m *TestCaseMutation) Arguments() (r string, exists bool) {
	v := m.arguments
	if v == nil {
		return
	}
	return *v, true
}

// OldArguments returns the old "arguments" field's value of the TestCase entity.
// If the TestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestCaseMutation) OldArguments(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArguments is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArguments requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArguments: %w", err)
	}
	return oldValue.Arguments, nil
}

// ClearArguments clears the value of the "arguments" field.
func (m *TestCaseMutation) ClearArguments() {
	m.arguments = nil
	m.clearedFields[testcase.FieldArguments] = struct{}{}
}

// ArgumentsCleared returns if the "arguments" field was cleared in this mutation.
func (m *TestCaseMutation) ArgumentsCleared() bool {
	_, ok := m.clearedFields[testcase.FieldArguments]
	return ok
}

// ResetArguments resets all changes to the "arguments" field.
func (m *TestCaseMutation) ResetArguments() {
	m.arguments = nil
	delete(m.clearedFields, testcase.FieldArguments)
}

// SetArgTypeDescription sets the "arg_type_description" field.
func (m *TestCaseMutation) SetArgTypeDescription(s string) {
	m.arg_type_description = &s
}

// ArgTypeDescription returns the value of the "arg_type_description" field in the mutation.
func (m *TestCaseMutation) ArgTypeDescription() (r string, exists bool) {
	v := m.arg_type_description
	if v == nil {
		return
	}
	return *v, true
}

// OldArgTypeDescription returns the old "arg_type_description" field's value of the TestCase entity.
// If the TestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestCaseMutation) OldArgTypeDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArgTypeDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArgTypeDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArgTypeDescription: %w", err)
	}
	return oldValue.ArgTypeDescription, nil
}

// ClearArgTypeDescription clears the value of the "arg_type_description" field.
func (m *TestCaseMutation) ClearArgTypeDescription() {
	m.arg_type_description = nil
	m.clearedFields[testcase.FieldArgTypeDescription] = struct{}{}
}

// ArgTypeDescriptionCleared returns if the "arg_type_description" field was cleared in this mutation.
func (m *TestCaseMutation) ArgTypeDescriptionCleared() bool {
	_, ok := m.clearedFields[testcase.FieldArgTypeDescription]
	return ok
}

// ResetArgTypeDescription resets all changes to the "arg_type_description" field.
func (m *TestCaseMutation) ResetArgTypeDescription() {
	m.arg_type_description = nil
	delete(m.clearedFields, testcase.FieldArgTypeDescription)
}

// SetExpectationResult sets the "expectation_result" field.
func (m *TestCaseMutation) SetExpectationResult(s string) {
	m.expectation_result = &s
}

// ExpectationResult returns the value of the "expectation_result" field in the mutation.
func (m *TestCaseMutation) ExpectationResult() (r string, exists bool) {
	v := m.expectation_result
	if v == nil {
		return
	}
	return *v, true
}

// OldExpectationResult returns the old "expectation_result" field's value of the TestCase entity.
// If the TestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestCaseMutation) OldExpectationResult(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpectationResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpectationResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpectationResult: %w", err)
	}
	return oldValue.ExpectationResult, nil
}

// ClearExpectationResult clears the value of the "expectation_result" field.
func (m *TestCaseMutation) ClearExpectationResult() {
	m.expectation_result = nil
	m.clearedFields[testcase.FieldExpectationResult] = struct{}{}
}

// ExpectationResultCleared returns if the "expectation_result" field was cleared in this mutation.
func (m *TestCaseMutation) ExpectationResultCleared() bool {
	_, ok := m.clearedFields[testcase.FieldExpectationResult]
	return ok
}

// ResetExpectationResult resets all changes to the "expectation_result" field.
func (m *TestCaseMutation) ResetExpectationResult() {
	m.expectation_result = nil
	delete(m.clearedFields, testcase.FieldExpectationResult)
}

// SetTestCaseType sets the "test_case_type" field.
func (m *TestCaseMutation) SetTestCaseType(s string) {
	m.test_case_type = &s
}

// TestCaseType returns the value of the "test_case_type" field in the mutation.
func (m *TestCaseMutation) TestCaseType() (r string, exists bool) {
	v := m.test_case_type
	if v == nil {
		return
	}
	return *v, true
}

// OldTestCaseType returns the old "test_case_type" field's value of the TestCase entity.
// If the TestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestCaseMutation) OldTestCaseType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTestCaseType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTestCaseType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTestCaseType: %w", err)
	}
	return oldValue.TestCaseType, nil
}

// ClearTestCaseType clears the value of the "test_case_type" field.
func (m *TestCaseMutation) ClearTestCaseType() {
	m.test_case_type = nil
	m.clearedFields[testcase.FieldTestCaseType] = struct{}{}
}

// TestCaseTypeCleared returns if the "test_case_type" field was cleared in this mutation.
func (m *TestCaseMutation) TestCaseTypeCleared() bool {
	_, ok := m.clearedFields[testcase.FieldTestCaseType]
	return ok
}

// ResetTestCaseType resets all changes to the "test_case_type" field.
func (m *TestCaseMutation) ResetTestCaseType() {
	m.test_case_type = nil
	delete(m.clearedFields, testcase.FieldTestCaseType)
}

// SetDeprecated sets the "deprecated" field.
func (m *TestCaseMutation) SetDeprecated(b bool) {
	m.deprecated = &b
}

// Deprecated returns the value of the "deprecated" field in the mutation.
func (m *TestCaseMutation) Deprecated() (r bool, exists bool) {
	v := m.deprecated
	if v == nil {
		return
	}
	return *v, true
}

// OldDeprecated returns the old "deprecated" field's value of the TestCase entity.
// If the TestCase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestCaseMutation) OldDeprecated(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeprecated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeprecated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeprecated: %w", err)
	}
	return oldValue.Deprecated, nil
}

// ClearDeprecated clears the value of the "deprecated" field.
func (m *TestCaseMutation) ClearDeprecated() {
	m.deprecated = nil
	m.clearedFields[testcase.FieldDeprecated] = struct{}{}
}

// DeprecatedCleared returns if the "deprecated" field was cleared in this mutation.
func (m *TestCaseMutation) DeprecatedCleared() bool {
	_, ok := m.clearedFields[testcase.FieldDeprecated]
	return ok
}

// ResetDeprecated resets all changes to the "deprecated" field.
func (m *TestCaseMutation) ResetDeprecated() {
	m.deprecated = nil
	delete(m.clearedFields, testcase.FieldDeprecated)
}

// Where appends a list predicates to the TestCaseMutation builder.
func (m *TestCaseMutation) Where(ps ...predicate.TestCase) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TestCaseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TestCase).
func (m *TestCaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TestCaseMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, testcase.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, testcase.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, testcase.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, testcase.FieldName)
	}
	if m.description != nil {
		fields = append(fields, testcase.FieldDescription)
	}
	if m.module_id != nil {
		fields = append(fields, testcase.FieldModuleID)
	}
	if m.api_id != nil {
		fields = append(fields, testcase.FieldAPIID)
	}
	if m.arguments != nil {
		fields = append(fields, testcase.FieldArguments)
	}
	if m.arg_type_description != nil {
		fields = append(fields, testcase.FieldArgTypeDescription)
	}
	if m.expectation_result != nil {
		fields = append(fields, testcase.FieldExpectationResult)
	}
	if m.test_case_type != nil {
		fields = append(fields, testcase.FieldTestCaseType)
	}
	if m.deprecated != nil {
		fields = append(fields, testcase.FieldDeprecated)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TestCaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case testcase.FieldCreatedAt:
		return m.CreatedAt()
	case testcase.FieldUpdatedAt:
		return m.UpdatedAt()
	case testcase.FieldDeletedAt:
		return m.DeletedAt()
	case testcase.FieldName:
		return m.Name()
	case testcase.FieldDescription:
		return m.Description()
	case testcase.FieldModuleID:
		return m.ModuleID()
	case testcase.FieldAPIID:
		return m.APIID()
	case testcase.FieldArguments:
		return m.Arguments()
	case testcase.FieldArgTypeDescription:
		return m.ArgTypeDescription()
	case testcase.FieldExpectationResult:
		return m.ExpectationResult()
	case testcase.FieldTestCaseType:
		return m.TestCaseType()
	case testcase.FieldDeprecated:
		return m.Deprecated()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TestCaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case testcase.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case testcase.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case testcase.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case testcase.FieldName:
		return m.OldName(ctx)
	case testcase.FieldDescription:
		return m.OldDescription(ctx)
	case testcase.FieldModuleID:
		return m.OldModuleID(ctx)
	case testcase.FieldAPIID:
		return m.OldAPIID(ctx)
	case testcase.FieldArguments:
		return m.OldArguments(ctx)
	case testcase.FieldArgTypeDescription:
		return m.OldArgTypeDescription(ctx)
	case testcase.FieldExpectationResult:
		return m.OldExpectationResult(ctx)
	case testcase.FieldTestCaseType:
		return m.OldTestCaseType(ctx)
	case testcase.FieldDeprecated:
		return m.OldDeprecated(ctx)
	}
	return nil, fmt.Errorf("unknown TestCase field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestCaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case testcase.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case testcase.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case testcase.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case testcase.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case testcase.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case testcase.FieldModuleID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModuleID(v)
		return nil
	case testcase.FieldAPIID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAPIID(v)
		return nil
	case testcase.FieldArguments:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArguments(v)
		return nil
	case testcase.FieldArgTypeDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArgTypeDescription(v)
		return nil
	case testcase.FieldExpectationResult:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpectationResult(v)
		return nil
	case testcase.FieldTestCaseType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTestCaseType(v)
		return nil
	case testcase.FieldDeprecated:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeprecated(v)
		return nil
	}
	return fmt.Errorf("unknown TestCase field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TestCaseMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, testcase.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, testcase.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, testcase.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TestCaseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case testcase.FieldCreatedAt:
		return m.AddedCreatedAt()
	case testcase.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case testcase.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestCaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case testcase.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case testcase.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case testcase.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TestCase numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TestCaseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(testcase.FieldName) {
		fields = append(fields, testcase.FieldName)
	}
	if m.FieldCleared(testcase.FieldDescription) {
		fields = append(fields, testcase.FieldDescription)
	}
	if m.FieldCleared(testcase.FieldModuleID) {
		fields = append(fields, testcase.FieldModuleID)
	}
	if m.FieldCleared(testcase.FieldAPIID) {
		fields = append(fields, testcase.FieldAPIID)
	}
	if m.FieldCleared(testcase.FieldArguments) {
		fields = append(fields, testcase.FieldArguments)
	}
	if m.FieldCleared(testcase.FieldArgTypeDescription) {
		fields = append(fields, testcase.FieldArgTypeDescription)
	}
	if m.FieldCleared(testcase.FieldExpectationResult) {
		fields = append(fields, testcase.FieldExpectationResult)
	}
	if m.FieldCleared(testcase.FieldTestCaseType) {
		fields = append(fields, testcase.FieldTestCaseType)
	}
	if m.FieldCleared(testcase.FieldDeprecated) {
		fields = append(fields, testcase.FieldDeprecated)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TestCaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TestCaseMutation) ClearField(name string) error {
	switch name {
	case testcase.FieldName:
		m.ClearName()
		return nil
	case testcase.FieldDescription:
		m.ClearDescription()
		return nil
	case testcase.FieldModuleID:
		m.ClearModuleID()
		return nil
	case testcase.FieldAPIID:
		m.ClearAPIID()
		return nil
	case testcase.FieldArguments:
		m.ClearArguments()
		return nil
	case testcase.FieldArgTypeDescription:
		m.ClearArgTypeDescription()
		return nil
	case testcase.FieldExpectationResult:
		m.ClearExpectationResult()
		return nil
	case testcase.FieldTestCaseType:
		m.ClearTestCaseType()
		return nil
	case testcase.FieldDeprecated:
		m.ClearDeprecated()
		return nil
	}
	return fmt.Errorf("unknown TestCase nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TestCaseMutation) ResetField(name string) error {
	switch name {
	case testcase.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case testcase.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case testcase.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case testcase.FieldName:
		m.ResetName()
		return nil
	case testcase.FieldDescription:
		m.ResetDescription()
		return nil
	case testcase.FieldModuleID:
		m.ResetModuleID()
		return nil
	case testcase.FieldAPIID:
		m.ResetAPIID()
		return nil
	case testcase.FieldArguments:
		m.ResetArguments()
		return nil
	case testcase.FieldArgTypeDescription:
		m.ResetArgTypeDescription()
		return nil
	case testcase.FieldExpectationResult:
		m.ResetExpectationResult()
		return nil
	case testcase.FieldTestCaseType:
		m.ResetTestCaseType()
		return nil
	case testcase.FieldDeprecated:
		m.ResetDeprecated()
		return nil
	}
	return fmt.Errorf("unknown TestCase field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TestCaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TestCaseMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TestCaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TestCaseMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TestCaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TestCaseMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TestCaseMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TestCase unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TestCaseMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TestCase edge %s", name)
}

// TestPlanMutation represents an operation that mutates the TestPlan nodes in the graph.
type TestPlanMutation struct {
	config
	op                          Op
	typ                         string
	id                          *uuid.UUID
	created_at                  *uint32
	addcreated_at               *int32
	updated_at                  *uint32
	addupdated_at               *int32
	deleted_at                  *uint32
	adddeleted_at               *int32
	name                        *string
	state                       *string
	owner_id                    *uuid.UUID
	responsible_user_id         *uuid.UUID
	failed_test_cases_count     *uint32
	addfailed_test_cases_count  *int32
	passed_test_cases_count     *uint32
	addpassed_test_cases_count  *int32
	skipped_test_cases_count    *uint32
	addskipped_test_cases_count *int32
	run_duration                *uint32
	addrun_duration             *int32
	deadline                    *uint32
	adddeadline                 *int32
	test_result                 *string
	clearedFields               map[string]struct{}
	done                        bool
	oldValue                    func(context.Context) (*TestPlan, error)
	predicates                  []predicate.TestPlan
}

var _ ent.Mutation = (*TestPlanMutation)(nil)

// testplanOption allows management of the mutation configuration using functional options.
type testplanOption func(*TestPlanMutation)

// newTestPlanMutation creates new mutation for the TestPlan entity.
func newTestPlanMutation(c config, op Op, opts ...testplanOption) *TestPlanMutation {
	m := &TestPlanMutation{
		config:        c,
		op:            op,
		typ:           TypeTestPlan,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTestPlanID sets the ID field of the mutation.
func withTestPlanID(id uuid.UUID) testplanOption {
	return func(m *TestPlanMutation) {
		var (
			err   error
			once  sync.Once
			value *TestPlan
		)
		m.oldValue = func(ctx context.Context) (*TestPlan, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TestPlan.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTestPlan sets the old TestPlan of the mutation.
func withTestPlan(node *TestPlan) testplanOption {
	return func(m *TestPlanMutation) {
		m.oldValue = func(context.Context) (*TestPlan, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TestPlanMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TestPlanMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TestPlan entities.
func (m *TestPlanMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TestPlanMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TestPlanMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TestPlan.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TestPlanMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TestPlanMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TestPlan entity.
// If the TestPlan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestPlanMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *TestPlanMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *TestPlanMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TestPlanMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TestPlanMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TestPlanMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TestPlan entity.
// If the TestPlan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestPlanMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *TestPlanMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *TestPlanMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TestPlanMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *TestPlanMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *TestPlanMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the TestPlan entity.
// If the TestPlan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestPlanMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *TestPlanMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *TestPlanMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *TestPlanMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetName sets the "name" field.
func (m *TestPlanMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TestPlanMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TestPlan entity.
// If the TestPlan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestPlanMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *TestPlanMutation) ClearName() {
	m.name = nil
	m.clearedFields[testplan.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *TestPlanMutation) NameCleared() bool {
	_, ok := m.clearedFields[testplan.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *TestPlanMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, testplan.FieldName)
}

// SetState sets the "state" field.
func (m *TestPlanMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *TestPlanMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the TestPlan entity.
// If the TestPlan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestPlanMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ClearState clears the value of the "state" field.
func (m *TestPlanMutation) ClearState() {
	m.state = nil
	m.clearedFields[testplan.FieldState] = struct{}{}
}

// StateCleared returns if the "state" field was cleared in this mutation.
func (m *TestPlanMutation) StateCleared() bool {
	_, ok := m.clearedFields[testplan.FieldState]
	return ok
}

// ResetState resets all changes to the "state" field.
func (m *TestPlanMutation) ResetState() {
	m.state = nil
	delete(m.clearedFields, testplan.FieldState)
}

// SetOwnerID sets the "owner_id" field.
func (m *TestPlanMutation) SetOwnerID(u uuid.UUID) {
	m.owner_id = &u
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *TestPlanMutation) OwnerID() (r uuid.UUID, exists bool) {
	v := m.owner_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the TestPlan entity.
// If the TestPlan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestPlanMutation) OldOwnerID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ClearOwnerID clears the value of the "owner_id" field.
func (m *TestPlanMutation) ClearOwnerID() {
	m.owner_id = nil
	m.clearedFields[testplan.FieldOwnerID] = struct{}{}
}

// OwnerIDCleared returns if the "owner_id" field was cleared in this mutation.
func (m *TestPlanMutation) OwnerIDCleared() bool {
	_, ok := m.clearedFields[testplan.FieldOwnerID]
	return ok
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *TestPlanMutation) ResetOwnerID() {
	m.owner_id = nil
	delete(m.clearedFields, testplan.FieldOwnerID)
}

// SetResponsibleUserID sets the "responsible_user_id" field.
func (m *TestPlanMutation) SetResponsibleUserID(u uuid.UUID) {
	m.responsible_user_id = &u
}

// ResponsibleUserID returns the value of the "responsible_user_id" field in the mutation.
func (m *TestPlanMutation) ResponsibleUserID() (r uuid.UUID, exists bool) {
	v := m.responsible_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResponsibleUserID returns the old "responsible_user_id" field's value of the TestPlan entity.
// If the TestPlan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestPlanMutation) OldResponsibleUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResponsibleUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResponsibleUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResponsibleUserID: %w", err)
	}
	return oldValue.ResponsibleUserID, nil
}

// ClearResponsibleUserID clears the value of the "responsible_user_id" field.
func (m *TestPlanMutation) ClearResponsibleUserID() {
	m.responsible_user_id = nil
	m.clearedFields[testplan.FieldResponsibleUserID] = struct{}{}
}

// ResponsibleUserIDCleared returns if the "responsible_user_id" field was cleared in this mutation.
func (m *TestPlanMutation) ResponsibleUserIDCleared() bool {
	_, ok := m.clearedFields[testplan.FieldResponsibleUserID]
	return ok
}

// ResetResponsibleUserID resets all changes to the "responsible_user_id" field.
func (m *TestPlanMutation) ResetResponsibleUserID() {
	m.responsible_user_id = nil
	delete(m.clearedFields, testplan.FieldResponsibleUserID)
}

// SetFailedTestCasesCount sets the "failed_test_cases_count" field.
func (m *TestPlanMutation) SetFailedTestCasesCount(u uint32) {
	m.failed_test_cases_count = &u
	m.addfailed_test_cases_count = nil
}

// FailedTestCasesCount returns the value of the "failed_test_cases_count" field in the mutation.
func (m *TestPlanMutation) FailedTestCasesCount() (r uint32, exists bool) {
	v := m.failed_test_cases_count
	if v == nil {
		return
	}
	return *v, true
}

// OldFailedTestCasesCount returns the old "failed_test_cases_count" field's value of the TestPlan entity.
// If the TestPlan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestPlanMutation) OldFailedTestCasesCount(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFailedTestCasesCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFailedTestCasesCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFailedTestCasesCount: %w", err)
	}
	return oldValue.FailedTestCasesCount, nil
}

// AddFailedTestCasesCount adds u to the "failed_test_cases_count" field.
func (m *TestPlanMutation) AddFailedTestCasesCount(u int32) {
	if m.addfailed_test_cases_count != nil {
		*m.addfailed_test_cases_count += u
	} else {
		m.addfailed_test_cases_count = &u
	}
}

// AddedFailedTestCasesCount returns the value that was added to the "failed_test_cases_count" field in this mutation.
func (m *TestPlanMutation) AddedFailedTestCasesCount() (r int32, exists bool) {
	v := m.addfailed_test_cases_count
	if v == nil {
		return
	}
	return *v, true
}

// ClearFailedTestCasesCount clears the value of the "failed_test_cases_count" field.
func (m *TestPlanMutation) ClearFailedTestCasesCount() {
	m.failed_test_cases_count = nil
	m.addfailed_test_cases_count = nil
	m.clearedFields[testplan.FieldFailedTestCasesCount] = struct{}{}
}

// FailedTestCasesCountCleared returns if the "failed_test_cases_count" field was cleared in this mutation.
func (m *TestPlanMutation) FailedTestCasesCountCleared() bool {
	_, ok := m.clearedFields[testplan.FieldFailedTestCasesCount]
	return ok
}

// ResetFailedTestCasesCount resets all changes to the "failed_test_cases_count" field.
func (m *TestPlanMutation) ResetFailedTestCasesCount() {
	m.failed_test_cases_count = nil
	m.addfailed_test_cases_count = nil
	delete(m.clearedFields, testplan.FieldFailedTestCasesCount)
}

// SetPassedTestCasesCount sets the "passed_test_cases_count" field.
func (m *TestPlanMutation) SetPassedTestCasesCount(u uint32) {
	m.passed_test_cases_count = &u
	m.addpassed_test_cases_count = nil
}

// PassedTestCasesCount returns the value of the "passed_test_cases_count" field in the mutation.
func (m *TestPlanMutation) PassedTestCasesCount() (r uint32, exists bool) {
	v := m.passed_test_cases_count
	if v == nil {
		return
	}
	return *v, true
}

// OldPassedTestCasesCount returns the old "passed_test_cases_count" field's value of the TestPlan entity.
// If the TestPlan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestPlanMutation) OldPassedTestCasesCount(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassedTestCasesCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassedTestCasesCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassedTestCasesCount: %w", err)
	}
	return oldValue.PassedTestCasesCount, nil
}

// AddPassedTestCasesCount adds u to the "passed_test_cases_count" field.
func (m *TestPlanMutation) AddPassedTestCasesCount(u int32) {
	if m.addpassed_test_cases_count != nil {
		*m.addpassed_test_cases_count += u
	} else {
		m.addpassed_test_cases_count = &u
	}
}

// AddedPassedTestCasesCount returns the value that was added to the "passed_test_cases_count" field in this mutation.
func (m *TestPlanMutation) AddedPassedTestCasesCount() (r int32, exists bool) {
	v := m.addpassed_test_cases_count
	if v == nil {
		return
	}
	return *v, true
}

// ClearPassedTestCasesCount clears the value of the "passed_test_cases_count" field.
func (m *TestPlanMutation) ClearPassedTestCasesCount() {
	m.passed_test_cases_count = nil
	m.addpassed_test_cases_count = nil
	m.clearedFields[testplan.FieldPassedTestCasesCount] = struct{}{}
}

// PassedTestCasesCountCleared returns if the "passed_test_cases_count" field was cleared in this mutation.
func (m *TestPlanMutation) PassedTestCasesCountCleared() bool {
	_, ok := m.clearedFields[testplan.FieldPassedTestCasesCount]
	return ok
}

// ResetPassedTestCasesCount resets all changes to the "passed_test_cases_count" field.
func (m *TestPlanMutation) ResetPassedTestCasesCount() {
	m.passed_test_cases_count = nil
	m.addpassed_test_cases_count = nil
	delete(m.clearedFields, testplan.FieldPassedTestCasesCount)
}

// SetSkippedTestCasesCount sets the "skipped_test_cases_count" field.
func (m *TestPlanMutation) SetSkippedTestCasesCount(u uint32) {
	m.skipped_test_cases_count = &u
	m.addskipped_test_cases_count = nil
}

// SkippedTestCasesCount returns the value of the "skipped_test_cases_count" field in the mutation.
func (m *TestPlanMutation) SkippedTestCasesCount() (r uint32, exists bool) {
	v := m.skipped_test_cases_count
	if v == nil {
		return
	}
	return *v, true
}

// OldSkippedTestCasesCount returns the old "skipped_test_cases_count" field's value of the TestPlan entity.
// If the TestPlan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestPlanMutation) OldSkippedTestCasesCount(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSkippedTestCasesCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSkippedTestCasesCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSkippedTestCasesCount: %w", err)
	}
	return oldValue.SkippedTestCasesCount, nil
}

// AddSkippedTestCasesCount adds u to the "skipped_test_cases_count" field.
func (m *TestPlanMutation) AddSkippedTestCasesCount(u int32) {
	if m.addskipped_test_cases_count != nil {
		*m.addskipped_test_cases_count += u
	} else {
		m.addskipped_test_cases_count = &u
	}
}

// AddedSkippedTestCasesCount returns the value that was added to the "skipped_test_cases_count" field in this mutation.
func (m *TestPlanMutation) AddedSkippedTestCasesCount() (r int32, exists bool) {
	v := m.addskipped_test_cases_count
	if v == nil {
		return
	}
	return *v, true
}

// ClearSkippedTestCasesCount clears the value of the "skipped_test_cases_count" field.
func (m *TestPlanMutation) ClearSkippedTestCasesCount() {
	m.skipped_test_cases_count = nil
	m.addskipped_test_cases_count = nil
	m.clearedFields[testplan.FieldSkippedTestCasesCount] = struct{}{}
}

// SkippedTestCasesCountCleared returns if the "skipped_test_cases_count" field was cleared in this mutation.
func (m *TestPlanMutation) SkippedTestCasesCountCleared() bool {
	_, ok := m.clearedFields[testplan.FieldSkippedTestCasesCount]
	return ok
}

// ResetSkippedTestCasesCount resets all changes to the "skipped_test_cases_count" field.
func (m *TestPlanMutation) ResetSkippedTestCasesCount() {
	m.skipped_test_cases_count = nil
	m.addskipped_test_cases_count = nil
	delete(m.clearedFields, testplan.FieldSkippedTestCasesCount)
}

// SetRunDuration sets the "run_duration" field.
func (m *TestPlanMutation) SetRunDuration(u uint32) {
	m.run_duration = &u
	m.addrun_duration = nil
}

// RunDuration returns the value of the "run_duration" field in the mutation.
func (m *TestPlanMutation) RunDuration() (r uint32, exists bool) {
	v := m.run_duration
	if v == nil {
		return
	}
	return *v, true
}

// OldRunDuration returns the old "run_duration" field's value of the TestPlan entity.
// If the TestPlan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestPlanMutation) OldRunDuration(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRunDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRunDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRunDuration: %w", err)
	}
	return oldValue.RunDuration, nil
}

// AddRunDuration adds u to the "run_duration" field.
func (m *TestPlanMutation) AddRunDuration(u int32) {
	if m.addrun_duration != nil {
		*m.addrun_duration += u
	} else {
		m.addrun_duration = &u
	}
}

// AddedRunDuration returns the value that was added to the "run_duration" field in this mutation.
func (m *TestPlanMutation) AddedRunDuration() (r int32, exists bool) {
	v := m.addrun_duration
	if v == nil {
		return
	}
	return *v, true
}

// ClearRunDuration clears the value of the "run_duration" field.
func (m *TestPlanMutation) ClearRunDuration() {
	m.run_duration = nil
	m.addrun_duration = nil
	m.clearedFields[testplan.FieldRunDuration] = struct{}{}
}

// RunDurationCleared returns if the "run_duration" field was cleared in this mutation.
func (m *TestPlanMutation) RunDurationCleared() bool {
	_, ok := m.clearedFields[testplan.FieldRunDuration]
	return ok
}

// ResetRunDuration resets all changes to the "run_duration" field.
func (m *TestPlanMutation) ResetRunDuration() {
	m.run_duration = nil
	m.addrun_duration = nil
	delete(m.clearedFields, testplan.FieldRunDuration)
}

// SetDeadline sets the "deadline" field.
func (m *TestPlanMutation) SetDeadline(u uint32) {
	m.deadline = &u
	m.adddeadline = nil
}

// Deadline returns the value of the "deadline" field in the mutation.
func (m *TestPlanMutation) Deadline() (r uint32, exists bool) {
	v := m.deadline
	if v == nil {
		return
	}
	return *v, true
}

// OldDeadline returns the old "deadline" field's value of the TestPlan entity.
// If the TestPlan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestPlanMutation) OldDeadline(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeadline is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeadline requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeadline: %w", err)
	}
	return oldValue.Deadline, nil
}

// AddDeadline adds u to the "deadline" field.
func (m *TestPlanMutation) AddDeadline(u int32) {
	if m.adddeadline != nil {
		*m.adddeadline += u
	} else {
		m.adddeadline = &u
	}
}

// AddedDeadline returns the value that was added to the "deadline" field in this mutation.
func (m *TestPlanMutation) AddedDeadline() (r int32, exists bool) {
	v := m.adddeadline
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeadline clears the value of the "deadline" field.
func (m *TestPlanMutation) ClearDeadline() {
	m.deadline = nil
	m.adddeadline = nil
	m.clearedFields[testplan.FieldDeadline] = struct{}{}
}

// DeadlineCleared returns if the "deadline" field was cleared in this mutation.
func (m *TestPlanMutation) DeadlineCleared() bool {
	_, ok := m.clearedFields[testplan.FieldDeadline]
	return ok
}

// ResetDeadline resets all changes to the "deadline" field.
func (m *TestPlanMutation) ResetDeadline() {
	m.deadline = nil
	m.adddeadline = nil
	delete(m.clearedFields, testplan.FieldDeadline)
}

// SetTestResult sets the "test_result" field.
func (m *TestPlanMutation) SetTestResult(s string) {
	m.test_result = &s
}

// TestResult returns the value of the "test_result" field in the mutation.
func (m *TestPlanMutation) TestResult() (r string, exists bool) {
	v := m.test_result
	if v == nil {
		return
	}
	return *v, true
}

// OldTestResult returns the old "test_result" field's value of the TestPlan entity.
// If the TestPlan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestPlanMutation) OldTestResult(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTestResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTestResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTestResult: %w", err)
	}
	return oldValue.TestResult, nil
}

// ClearTestResult clears the value of the "test_result" field.
func (m *TestPlanMutation) ClearTestResult() {
	m.test_result = nil
	m.clearedFields[testplan.FieldTestResult] = struct{}{}
}

// TestResultCleared returns if the "test_result" field was cleared in this mutation.
func (m *TestPlanMutation) TestResultCleared() bool {
	_, ok := m.clearedFields[testplan.FieldTestResult]
	return ok
}

// ResetTestResult resets all changes to the "test_result" field.
func (m *TestPlanMutation) ResetTestResult() {
	m.test_result = nil
	delete(m.clearedFields, testplan.FieldTestResult)
}

// Where appends a list predicates to the TestPlanMutation builder.
func (m *TestPlanMutation) Where(ps ...predicate.TestPlan) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TestPlanMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TestPlan).
func (m *TestPlanMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TestPlanMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.created_at != nil {
		fields = append(fields, testplan.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, testplan.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, testplan.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, testplan.FieldName)
	}
	if m.state != nil {
		fields = append(fields, testplan.FieldState)
	}
	if m.owner_id != nil {
		fields = append(fields, testplan.FieldOwnerID)
	}
	if m.responsible_user_id != nil {
		fields = append(fields, testplan.FieldResponsibleUserID)
	}
	if m.failed_test_cases_count != nil {
		fields = append(fields, testplan.FieldFailedTestCasesCount)
	}
	if m.passed_test_cases_count != nil {
		fields = append(fields, testplan.FieldPassedTestCasesCount)
	}
	if m.skipped_test_cases_count != nil {
		fields = append(fields, testplan.FieldSkippedTestCasesCount)
	}
	if m.run_duration != nil {
		fields = append(fields, testplan.FieldRunDuration)
	}
	if m.deadline != nil {
		fields = append(fields, testplan.FieldDeadline)
	}
	if m.test_result != nil {
		fields = append(fields, testplan.FieldTestResult)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TestPlanMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case testplan.FieldCreatedAt:
		return m.CreatedAt()
	case testplan.FieldUpdatedAt:
		return m.UpdatedAt()
	case testplan.FieldDeletedAt:
		return m.DeletedAt()
	case testplan.FieldName:
		return m.Name()
	case testplan.FieldState:
		return m.State()
	case testplan.FieldOwnerID:
		return m.OwnerID()
	case testplan.FieldResponsibleUserID:
		return m.ResponsibleUserID()
	case testplan.FieldFailedTestCasesCount:
		return m.FailedTestCasesCount()
	case testplan.FieldPassedTestCasesCount:
		return m.PassedTestCasesCount()
	case testplan.FieldSkippedTestCasesCount:
		return m.SkippedTestCasesCount()
	case testplan.FieldRunDuration:
		return m.RunDuration()
	case testplan.FieldDeadline:
		return m.Deadline()
	case testplan.FieldTestResult:
		return m.TestResult()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TestPlanMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case testplan.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case testplan.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case testplan.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case testplan.FieldName:
		return m.OldName(ctx)
	case testplan.FieldState:
		return m.OldState(ctx)
	case testplan.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case testplan.FieldResponsibleUserID:
		return m.OldResponsibleUserID(ctx)
	case testplan.FieldFailedTestCasesCount:
		return m.OldFailedTestCasesCount(ctx)
	case testplan.FieldPassedTestCasesCount:
		return m.OldPassedTestCasesCount(ctx)
	case testplan.FieldSkippedTestCasesCount:
		return m.OldSkippedTestCasesCount(ctx)
	case testplan.FieldRunDuration:
		return m.OldRunDuration(ctx)
	case testplan.FieldDeadline:
		return m.OldDeadline(ctx)
	case testplan.FieldTestResult:
		return m.OldTestResult(ctx)
	}
	return nil, fmt.Errorf("unknown TestPlan field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestPlanMutation) SetField(name string, value ent.Value) error {
	switch name {
	case testplan.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case testplan.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case testplan.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case testplan.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case testplan.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case testplan.FieldOwnerID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case testplan.FieldResponsibleUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResponsibleUserID(v)
		return nil
	case testplan.FieldFailedTestCasesCount:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFailedTestCasesCount(v)
		return nil
	case testplan.FieldPassedTestCasesCount:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassedTestCasesCount(v)
		return nil
	case testplan.FieldSkippedTestCasesCount:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSkippedTestCasesCount(v)
		return nil
	case testplan.FieldRunDuration:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRunDuration(v)
		return nil
	case testplan.FieldDeadline:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeadline(v)
		return nil
	case testplan.FieldTestResult:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTestResult(v)
		return nil
	}
	return fmt.Errorf("unknown TestPlan field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TestPlanMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, testplan.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, testplan.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, testplan.FieldDeletedAt)
	}
	if m.addfailed_test_cases_count != nil {
		fields = append(fields, testplan.FieldFailedTestCasesCount)
	}
	if m.addpassed_test_cases_count != nil {
		fields = append(fields, testplan.FieldPassedTestCasesCount)
	}
	if m.addskipped_test_cases_count != nil {
		fields = append(fields, testplan.FieldSkippedTestCasesCount)
	}
	if m.addrun_duration != nil {
		fields = append(fields, testplan.FieldRunDuration)
	}
	if m.adddeadline != nil {
		fields = append(fields, testplan.FieldDeadline)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TestPlanMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case testplan.FieldCreatedAt:
		return m.AddedCreatedAt()
	case testplan.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case testplan.FieldDeletedAt:
		return m.AddedDeletedAt()
	case testplan.FieldFailedTestCasesCount:
		return m.AddedFailedTestCasesCount()
	case testplan.FieldPassedTestCasesCount:
		return m.AddedPassedTestCasesCount()
	case testplan.FieldSkippedTestCasesCount:
		return m.AddedSkippedTestCasesCount()
	case testplan.FieldRunDuration:
		return m.AddedRunDuration()
	case testplan.FieldDeadline:
		return m.AddedDeadline()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestPlanMutation) AddField(name string, value ent.Value) error {
	switch name {
	case testplan.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case testplan.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case testplan.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case testplan.FieldFailedTestCasesCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFailedTestCasesCount(v)
		return nil
	case testplan.FieldPassedTestCasesCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPassedTestCasesCount(v)
		return nil
	case testplan.FieldSkippedTestCasesCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSkippedTestCasesCount(v)
		return nil
	case testplan.FieldRunDuration:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRunDuration(v)
		return nil
	case testplan.FieldDeadline:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeadline(v)
		return nil
	}
	return fmt.Errorf("unknown TestPlan numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TestPlanMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(testplan.FieldName) {
		fields = append(fields, testplan.FieldName)
	}
	if m.FieldCleared(testplan.FieldState) {
		fields = append(fields, testplan.FieldState)
	}
	if m.FieldCleared(testplan.FieldOwnerID) {
		fields = append(fields, testplan.FieldOwnerID)
	}
	if m.FieldCleared(testplan.FieldResponsibleUserID) {
		fields = append(fields, testplan.FieldResponsibleUserID)
	}
	if m.FieldCleared(testplan.FieldFailedTestCasesCount) {
		fields = append(fields, testplan.FieldFailedTestCasesCount)
	}
	if m.FieldCleared(testplan.FieldPassedTestCasesCount) {
		fields = append(fields, testplan.FieldPassedTestCasesCount)
	}
	if m.FieldCleared(testplan.FieldSkippedTestCasesCount) {
		fields = append(fields, testplan.FieldSkippedTestCasesCount)
	}
	if m.FieldCleared(testplan.FieldRunDuration) {
		fields = append(fields, testplan.FieldRunDuration)
	}
	if m.FieldCleared(testplan.FieldDeadline) {
		fields = append(fields, testplan.FieldDeadline)
	}
	if m.FieldCleared(testplan.FieldTestResult) {
		fields = append(fields, testplan.FieldTestResult)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TestPlanMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TestPlanMutation) ClearField(name string) error {
	switch name {
	case testplan.FieldName:
		m.ClearName()
		return nil
	case testplan.FieldState:
		m.ClearState()
		return nil
	case testplan.FieldOwnerID:
		m.ClearOwnerID()
		return nil
	case testplan.FieldResponsibleUserID:
		m.ClearResponsibleUserID()
		return nil
	case testplan.FieldFailedTestCasesCount:
		m.ClearFailedTestCasesCount()
		return nil
	case testplan.FieldPassedTestCasesCount:
		m.ClearPassedTestCasesCount()
		return nil
	case testplan.FieldSkippedTestCasesCount:
		m.ClearSkippedTestCasesCount()
		return nil
	case testplan.FieldRunDuration:
		m.ClearRunDuration()
		return nil
	case testplan.FieldDeadline:
		m.ClearDeadline()
		return nil
	case testplan.FieldTestResult:
		m.ClearTestResult()
		return nil
	}
	return fmt.Errorf("unknown TestPlan nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TestPlanMutation) ResetField(name string) error {
	switch name {
	case testplan.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case testplan.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case testplan.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case testplan.FieldName:
		m.ResetName()
		return nil
	case testplan.FieldState:
		m.ResetState()
		return nil
	case testplan.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case testplan.FieldResponsibleUserID:
		m.ResetResponsibleUserID()
		return nil
	case testplan.FieldFailedTestCasesCount:
		m.ResetFailedTestCasesCount()
		return nil
	case testplan.FieldPassedTestCasesCount:
		m.ResetPassedTestCasesCount()
		return nil
	case testplan.FieldSkippedTestCasesCount:
		m.ResetSkippedTestCasesCount()
		return nil
	case testplan.FieldRunDuration:
		m.ResetRunDuration()
		return nil
	case testplan.FieldDeadline:
		m.ResetDeadline()
		return nil
	case testplan.FieldTestResult:
		m.ResetTestResult()
		return nil
	}
	return fmt.Errorf("unknown TestPlan field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TestPlanMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TestPlanMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TestPlanMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TestPlanMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TestPlanMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TestPlanMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TestPlanMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TestPlan unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TestPlanMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TestPlan edge %s", name)
}
