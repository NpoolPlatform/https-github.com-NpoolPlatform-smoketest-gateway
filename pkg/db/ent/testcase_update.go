// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/testcase"
	"github.com/google/uuid"
)

// TestCaseUpdate is the builder for updating TestCase entities.
type TestCaseUpdate struct {
	config
	hooks     []Hook
	mutation  *TestCaseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TestCaseUpdate builder.
func (tcu *TestCaseUpdate) Where(ps ...predicate.TestCase) *TestCaseUpdate {
	tcu.mutation.Where(ps...)
	return tcu
}

// SetCreatedAt sets the "created_at" field.
func (tcu *TestCaseUpdate) SetCreatedAt(u uint32) *TestCaseUpdate {
	tcu.mutation.ResetCreatedAt()
	tcu.mutation.SetCreatedAt(u)
	return tcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableCreatedAt(u *uint32) *TestCaseUpdate {
	if u != nil {
		tcu.SetCreatedAt(*u)
	}
	return tcu
}

// AddCreatedAt adds u to the "created_at" field.
func (tcu *TestCaseUpdate) AddCreatedAt(u int32) *TestCaseUpdate {
	tcu.mutation.AddCreatedAt(u)
	return tcu
}

// SetUpdatedAt sets the "updated_at" field.
func (tcu *TestCaseUpdate) SetUpdatedAt(u uint32) *TestCaseUpdate {
	tcu.mutation.ResetUpdatedAt()
	tcu.mutation.SetUpdatedAt(u)
	return tcu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tcu *TestCaseUpdate) AddUpdatedAt(u int32) *TestCaseUpdate {
	tcu.mutation.AddUpdatedAt(u)
	return tcu
}

// SetDeletedAt sets the "deleted_at" field.
func (tcu *TestCaseUpdate) SetDeletedAt(u uint32) *TestCaseUpdate {
	tcu.mutation.ResetDeletedAt()
	tcu.mutation.SetDeletedAt(u)
	return tcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableDeletedAt(u *uint32) *TestCaseUpdate {
	if u != nil {
		tcu.SetDeletedAt(*u)
	}
	return tcu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tcu *TestCaseUpdate) AddDeletedAt(u int32) *TestCaseUpdate {
	tcu.mutation.AddDeletedAt(u)
	return tcu
}

// SetEntID sets the "ent_id" field.
func (tcu *TestCaseUpdate) SetEntID(u uuid.UUID) *TestCaseUpdate {
	tcu.mutation.SetEntID(u)
	return tcu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableEntID(u *uuid.UUID) *TestCaseUpdate {
	if u != nil {
		tcu.SetEntID(*u)
	}
	return tcu
}

// SetName sets the "name" field.
func (tcu *TestCaseUpdate) SetName(s string) *TestCaseUpdate {
	tcu.mutation.SetName(s)
	return tcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableName(s *string) *TestCaseUpdate {
	if s != nil {
		tcu.SetName(*s)
	}
	return tcu
}

// ClearName clears the value of the "name" field.
func (tcu *TestCaseUpdate) ClearName() *TestCaseUpdate {
	tcu.mutation.ClearName()
	return tcu
}

// SetDescription sets the "description" field.
func (tcu *TestCaseUpdate) SetDescription(s string) *TestCaseUpdate {
	tcu.mutation.SetDescription(s)
	return tcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableDescription(s *string) *TestCaseUpdate {
	if s != nil {
		tcu.SetDescription(*s)
	}
	return tcu
}

// ClearDescription clears the value of the "description" field.
func (tcu *TestCaseUpdate) ClearDescription() *TestCaseUpdate {
	tcu.mutation.ClearDescription()
	return tcu
}

// SetModuleID sets the "module_id" field.
func (tcu *TestCaseUpdate) SetModuleID(u uuid.UUID) *TestCaseUpdate {
	tcu.mutation.SetModuleID(u)
	return tcu
}

// SetNillableModuleID sets the "module_id" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableModuleID(u *uuid.UUID) *TestCaseUpdate {
	if u != nil {
		tcu.SetModuleID(*u)
	}
	return tcu
}

// ClearModuleID clears the value of the "module_id" field.
func (tcu *TestCaseUpdate) ClearModuleID() *TestCaseUpdate {
	tcu.mutation.ClearModuleID()
	return tcu
}

// SetAPIID sets the "api_id" field.
func (tcu *TestCaseUpdate) SetAPIID(u uuid.UUID) *TestCaseUpdate {
	tcu.mutation.SetAPIID(u)
	return tcu
}

// SetNillableAPIID sets the "api_id" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableAPIID(u *uuid.UUID) *TestCaseUpdate {
	if u != nil {
		tcu.SetAPIID(*u)
	}
	return tcu
}

// ClearAPIID clears the value of the "api_id" field.
func (tcu *TestCaseUpdate) ClearAPIID() *TestCaseUpdate {
	tcu.mutation.ClearAPIID()
	return tcu
}

// SetInput sets the "input" field.
func (tcu *TestCaseUpdate) SetInput(s string) *TestCaseUpdate {
	tcu.mutation.SetInput(s)
	return tcu
}

// SetNillableInput sets the "input" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableInput(s *string) *TestCaseUpdate {
	if s != nil {
		tcu.SetInput(*s)
	}
	return tcu
}

// ClearInput clears the value of the "input" field.
func (tcu *TestCaseUpdate) ClearInput() *TestCaseUpdate {
	tcu.mutation.ClearInput()
	return tcu
}

// SetInputDesc sets the "input_desc" field.
func (tcu *TestCaseUpdate) SetInputDesc(s string) *TestCaseUpdate {
	tcu.mutation.SetInputDesc(s)
	return tcu
}

// SetNillableInputDesc sets the "input_desc" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableInputDesc(s *string) *TestCaseUpdate {
	if s != nil {
		tcu.SetInputDesc(*s)
	}
	return tcu
}

// ClearInputDesc clears the value of the "input_desc" field.
func (tcu *TestCaseUpdate) ClearInputDesc() *TestCaseUpdate {
	tcu.mutation.ClearInputDesc()
	return tcu
}

// SetExpectation sets the "expectation" field.
func (tcu *TestCaseUpdate) SetExpectation(s string) *TestCaseUpdate {
	tcu.mutation.SetExpectation(s)
	return tcu
}

// SetNillableExpectation sets the "expectation" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableExpectation(s *string) *TestCaseUpdate {
	if s != nil {
		tcu.SetExpectation(*s)
	}
	return tcu
}

// ClearExpectation clears the value of the "expectation" field.
func (tcu *TestCaseUpdate) ClearExpectation() *TestCaseUpdate {
	tcu.mutation.ClearExpectation()
	return tcu
}

// SetOutputDesc sets the "output_desc" field.
func (tcu *TestCaseUpdate) SetOutputDesc(s string) *TestCaseUpdate {
	tcu.mutation.SetOutputDesc(s)
	return tcu
}

// SetNillableOutputDesc sets the "output_desc" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableOutputDesc(s *string) *TestCaseUpdate {
	if s != nil {
		tcu.SetOutputDesc(*s)
	}
	return tcu
}

// ClearOutputDesc clears the value of the "output_desc" field.
func (tcu *TestCaseUpdate) ClearOutputDesc() *TestCaseUpdate {
	tcu.mutation.ClearOutputDesc()
	return tcu
}

// SetTestCaseType sets the "test_case_type" field.
func (tcu *TestCaseUpdate) SetTestCaseType(s string) *TestCaseUpdate {
	tcu.mutation.SetTestCaseType(s)
	return tcu
}

// SetNillableTestCaseType sets the "test_case_type" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableTestCaseType(s *string) *TestCaseUpdate {
	if s != nil {
		tcu.SetTestCaseType(*s)
	}
	return tcu
}

// ClearTestCaseType clears the value of the "test_case_type" field.
func (tcu *TestCaseUpdate) ClearTestCaseType() *TestCaseUpdate {
	tcu.mutation.ClearTestCaseType()
	return tcu
}

// SetTestCaseClass sets the "test_case_class" field.
func (tcu *TestCaseUpdate) SetTestCaseClass(s string) *TestCaseUpdate {
	tcu.mutation.SetTestCaseClass(s)
	return tcu
}

// SetNillableTestCaseClass sets the "test_case_class" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableTestCaseClass(s *string) *TestCaseUpdate {
	if s != nil {
		tcu.SetTestCaseClass(*s)
	}
	return tcu
}

// ClearTestCaseClass clears the value of the "test_case_class" field.
func (tcu *TestCaseUpdate) ClearTestCaseClass() *TestCaseUpdate {
	tcu.mutation.ClearTestCaseClass()
	return tcu
}

// SetDeprecated sets the "deprecated" field.
func (tcu *TestCaseUpdate) SetDeprecated(b bool) *TestCaseUpdate {
	tcu.mutation.SetDeprecated(b)
	return tcu
}

// SetNillableDeprecated sets the "deprecated" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableDeprecated(b *bool) *TestCaseUpdate {
	if b != nil {
		tcu.SetDeprecated(*b)
	}
	return tcu
}

// ClearDeprecated clears the value of the "deprecated" field.
func (tcu *TestCaseUpdate) ClearDeprecated() *TestCaseUpdate {
	tcu.mutation.ClearDeprecated()
	return tcu
}

// Mutation returns the TestCaseMutation object of the builder.
func (tcu *TestCaseUpdate) Mutation() *TestCaseMutation {
	return tcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcu *TestCaseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := tcu.defaults(); err != nil {
		return 0, err
	}
	if len(tcu.hooks) == 0 {
		affected, err = tcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestCaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tcu.mutation = mutation
			affected, err = tcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tcu.hooks) - 1; i >= 0; i-- {
			if tcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tcu *TestCaseUpdate) SaveX(ctx context.Context) int {
	affected, err := tcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcu *TestCaseUpdate) Exec(ctx context.Context) error {
	_, err := tcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcu *TestCaseUpdate) ExecX(ctx context.Context) {
	if err := tcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcu *TestCaseUpdate) defaults() error {
	if _, ok := tcu.mutation.UpdatedAt(); !ok {
		if testcase.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testcase.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testcase.UpdateDefaultUpdatedAt()
		tcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tcu *TestCaseUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TestCaseUpdate {
	tcu.modifiers = append(tcu.modifiers, modifiers...)
	return tcu
}

func (tcu *TestCaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   testcase.Table,
			Columns: testcase.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: testcase.FieldID,
			},
		},
	}
	if ps := tcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testcase.FieldCreatedAt,
		})
	}
	if value, ok := tcu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testcase.FieldCreatedAt,
		})
	}
	if value, ok := tcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testcase.FieldUpdatedAt,
		})
	}
	if value, ok := tcu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testcase.FieldUpdatedAt,
		})
	}
	if value, ok := tcu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testcase.FieldDeletedAt,
		})
	}
	if value, ok := tcu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testcase.FieldDeletedAt,
		})
	}
	if value, ok := tcu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: testcase.FieldEntID,
		})
	}
	if value, ok := tcu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldName,
		})
	}
	if tcu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testcase.FieldName,
		})
	}
	if value, ok := tcu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldDescription,
		})
	}
	if tcu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testcase.FieldDescription,
		})
	}
	if value, ok := tcu.mutation.ModuleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: testcase.FieldModuleID,
		})
	}
	if tcu.mutation.ModuleIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: testcase.FieldModuleID,
		})
	}
	if value, ok := tcu.mutation.APIID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: testcase.FieldAPIID,
		})
	}
	if tcu.mutation.APIIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: testcase.FieldAPIID,
		})
	}
	if value, ok := tcu.mutation.Input(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldInput,
		})
	}
	if tcu.mutation.InputCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testcase.FieldInput,
		})
	}
	if value, ok := tcu.mutation.InputDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldInputDesc,
		})
	}
	if tcu.mutation.InputDescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testcase.FieldInputDesc,
		})
	}
	if value, ok := tcu.mutation.Expectation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldExpectation,
		})
	}
	if tcu.mutation.ExpectationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testcase.FieldExpectation,
		})
	}
	if value, ok := tcu.mutation.OutputDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldOutputDesc,
		})
	}
	if tcu.mutation.OutputDescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testcase.FieldOutputDesc,
		})
	}
	if value, ok := tcu.mutation.TestCaseType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldTestCaseType,
		})
	}
	if tcu.mutation.TestCaseTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testcase.FieldTestCaseType,
		})
	}
	if value, ok := tcu.mutation.TestCaseClass(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldTestCaseClass,
		})
	}
	if tcu.mutation.TestCaseClassCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testcase.FieldTestCaseClass,
		})
	}
	if value, ok := tcu.mutation.Deprecated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: testcase.FieldDeprecated,
		})
	}
	if tcu.mutation.DeprecatedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: testcase.FieldDeprecated,
		})
	}
	_spec.Modifiers = tcu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, tcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testcase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TestCaseUpdateOne is the builder for updating a single TestCase entity.
type TestCaseUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TestCaseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (tcuo *TestCaseUpdateOne) SetCreatedAt(u uint32) *TestCaseUpdateOne {
	tcuo.mutation.ResetCreatedAt()
	tcuo.mutation.SetCreatedAt(u)
	return tcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableCreatedAt(u *uint32) *TestCaseUpdateOne {
	if u != nil {
		tcuo.SetCreatedAt(*u)
	}
	return tcuo
}

// AddCreatedAt adds u to the "created_at" field.
func (tcuo *TestCaseUpdateOne) AddCreatedAt(u int32) *TestCaseUpdateOne {
	tcuo.mutation.AddCreatedAt(u)
	return tcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tcuo *TestCaseUpdateOne) SetUpdatedAt(u uint32) *TestCaseUpdateOne {
	tcuo.mutation.ResetUpdatedAt()
	tcuo.mutation.SetUpdatedAt(u)
	return tcuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tcuo *TestCaseUpdateOne) AddUpdatedAt(u int32) *TestCaseUpdateOne {
	tcuo.mutation.AddUpdatedAt(u)
	return tcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tcuo *TestCaseUpdateOne) SetDeletedAt(u uint32) *TestCaseUpdateOne {
	tcuo.mutation.ResetDeletedAt()
	tcuo.mutation.SetDeletedAt(u)
	return tcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableDeletedAt(u *uint32) *TestCaseUpdateOne {
	if u != nil {
		tcuo.SetDeletedAt(*u)
	}
	return tcuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tcuo *TestCaseUpdateOne) AddDeletedAt(u int32) *TestCaseUpdateOne {
	tcuo.mutation.AddDeletedAt(u)
	return tcuo
}

// SetEntID sets the "ent_id" field.
func (tcuo *TestCaseUpdateOne) SetEntID(u uuid.UUID) *TestCaseUpdateOne {
	tcuo.mutation.SetEntID(u)
	return tcuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableEntID(u *uuid.UUID) *TestCaseUpdateOne {
	if u != nil {
		tcuo.SetEntID(*u)
	}
	return tcuo
}

// SetName sets the "name" field.
func (tcuo *TestCaseUpdateOne) SetName(s string) *TestCaseUpdateOne {
	tcuo.mutation.SetName(s)
	return tcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableName(s *string) *TestCaseUpdateOne {
	if s != nil {
		tcuo.SetName(*s)
	}
	return tcuo
}

// ClearName clears the value of the "name" field.
func (tcuo *TestCaseUpdateOne) ClearName() *TestCaseUpdateOne {
	tcuo.mutation.ClearName()
	return tcuo
}

// SetDescription sets the "description" field.
func (tcuo *TestCaseUpdateOne) SetDescription(s string) *TestCaseUpdateOne {
	tcuo.mutation.SetDescription(s)
	return tcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableDescription(s *string) *TestCaseUpdateOne {
	if s != nil {
		tcuo.SetDescription(*s)
	}
	return tcuo
}

// ClearDescription clears the value of the "description" field.
func (tcuo *TestCaseUpdateOne) ClearDescription() *TestCaseUpdateOne {
	tcuo.mutation.ClearDescription()
	return tcuo
}

// SetModuleID sets the "module_id" field.
func (tcuo *TestCaseUpdateOne) SetModuleID(u uuid.UUID) *TestCaseUpdateOne {
	tcuo.mutation.SetModuleID(u)
	return tcuo
}

// SetNillableModuleID sets the "module_id" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableModuleID(u *uuid.UUID) *TestCaseUpdateOne {
	if u != nil {
		tcuo.SetModuleID(*u)
	}
	return tcuo
}

// ClearModuleID clears the value of the "module_id" field.
func (tcuo *TestCaseUpdateOne) ClearModuleID() *TestCaseUpdateOne {
	tcuo.mutation.ClearModuleID()
	return tcuo
}

// SetAPIID sets the "api_id" field.
func (tcuo *TestCaseUpdateOne) SetAPIID(u uuid.UUID) *TestCaseUpdateOne {
	tcuo.mutation.SetAPIID(u)
	return tcuo
}

// SetNillableAPIID sets the "api_id" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableAPIID(u *uuid.UUID) *TestCaseUpdateOne {
	if u != nil {
		tcuo.SetAPIID(*u)
	}
	return tcuo
}

// ClearAPIID clears the value of the "api_id" field.
func (tcuo *TestCaseUpdateOne) ClearAPIID() *TestCaseUpdateOne {
	tcuo.mutation.ClearAPIID()
	return tcuo
}

// SetInput sets the "input" field.
func (tcuo *TestCaseUpdateOne) SetInput(s string) *TestCaseUpdateOne {
	tcuo.mutation.SetInput(s)
	return tcuo
}

// SetNillableInput sets the "input" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableInput(s *string) *TestCaseUpdateOne {
	if s != nil {
		tcuo.SetInput(*s)
	}
	return tcuo
}

// ClearInput clears the value of the "input" field.
func (tcuo *TestCaseUpdateOne) ClearInput() *TestCaseUpdateOne {
	tcuo.mutation.ClearInput()
	return tcuo
}

// SetInputDesc sets the "input_desc" field.
func (tcuo *TestCaseUpdateOne) SetInputDesc(s string) *TestCaseUpdateOne {
	tcuo.mutation.SetInputDesc(s)
	return tcuo
}

// SetNillableInputDesc sets the "input_desc" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableInputDesc(s *string) *TestCaseUpdateOne {
	if s != nil {
		tcuo.SetInputDesc(*s)
	}
	return tcuo
}

// ClearInputDesc clears the value of the "input_desc" field.
func (tcuo *TestCaseUpdateOne) ClearInputDesc() *TestCaseUpdateOne {
	tcuo.mutation.ClearInputDesc()
	return tcuo
}

// SetExpectation sets the "expectation" field.
func (tcuo *TestCaseUpdateOne) SetExpectation(s string) *TestCaseUpdateOne {
	tcuo.mutation.SetExpectation(s)
	return tcuo
}

// SetNillableExpectation sets the "expectation" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableExpectation(s *string) *TestCaseUpdateOne {
	if s != nil {
		tcuo.SetExpectation(*s)
	}
	return tcuo
}

// ClearExpectation clears the value of the "expectation" field.
func (tcuo *TestCaseUpdateOne) ClearExpectation() *TestCaseUpdateOne {
	tcuo.mutation.ClearExpectation()
	return tcuo
}

// SetOutputDesc sets the "output_desc" field.
func (tcuo *TestCaseUpdateOne) SetOutputDesc(s string) *TestCaseUpdateOne {
	tcuo.mutation.SetOutputDesc(s)
	return tcuo
}

// SetNillableOutputDesc sets the "output_desc" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableOutputDesc(s *string) *TestCaseUpdateOne {
	if s != nil {
		tcuo.SetOutputDesc(*s)
	}
	return tcuo
}

// ClearOutputDesc clears the value of the "output_desc" field.
func (tcuo *TestCaseUpdateOne) ClearOutputDesc() *TestCaseUpdateOne {
	tcuo.mutation.ClearOutputDesc()
	return tcuo
}

// SetTestCaseType sets the "test_case_type" field.
func (tcuo *TestCaseUpdateOne) SetTestCaseType(s string) *TestCaseUpdateOne {
	tcuo.mutation.SetTestCaseType(s)
	return tcuo
}

// SetNillableTestCaseType sets the "test_case_type" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableTestCaseType(s *string) *TestCaseUpdateOne {
	if s != nil {
		tcuo.SetTestCaseType(*s)
	}
	return tcuo
}

// ClearTestCaseType clears the value of the "test_case_type" field.
func (tcuo *TestCaseUpdateOne) ClearTestCaseType() *TestCaseUpdateOne {
	tcuo.mutation.ClearTestCaseType()
	return tcuo
}

// SetTestCaseClass sets the "test_case_class" field.
func (tcuo *TestCaseUpdateOne) SetTestCaseClass(s string) *TestCaseUpdateOne {
	tcuo.mutation.SetTestCaseClass(s)
	return tcuo
}

// SetNillableTestCaseClass sets the "test_case_class" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableTestCaseClass(s *string) *TestCaseUpdateOne {
	if s != nil {
		tcuo.SetTestCaseClass(*s)
	}
	return tcuo
}

// ClearTestCaseClass clears the value of the "test_case_class" field.
func (tcuo *TestCaseUpdateOne) ClearTestCaseClass() *TestCaseUpdateOne {
	tcuo.mutation.ClearTestCaseClass()
	return tcuo
}

// SetDeprecated sets the "deprecated" field.
func (tcuo *TestCaseUpdateOne) SetDeprecated(b bool) *TestCaseUpdateOne {
	tcuo.mutation.SetDeprecated(b)
	return tcuo
}

// SetNillableDeprecated sets the "deprecated" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableDeprecated(b *bool) *TestCaseUpdateOne {
	if b != nil {
		tcuo.SetDeprecated(*b)
	}
	return tcuo
}

// ClearDeprecated clears the value of the "deprecated" field.
func (tcuo *TestCaseUpdateOne) ClearDeprecated() *TestCaseUpdateOne {
	tcuo.mutation.ClearDeprecated()
	return tcuo
}

// Mutation returns the TestCaseMutation object of the builder.
func (tcuo *TestCaseUpdateOne) Mutation() *TestCaseMutation {
	return tcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcuo *TestCaseUpdateOne) Select(field string, fields ...string) *TestCaseUpdateOne {
	tcuo.fields = append([]string{field}, fields...)
	return tcuo
}

// Save executes the query and returns the updated TestCase entity.
func (tcuo *TestCaseUpdateOne) Save(ctx context.Context) (*TestCase, error) {
	var (
		err  error
		node *TestCase
	)
	if err := tcuo.defaults(); err != nil {
		return nil, err
	}
	if len(tcuo.hooks) == 0 {
		node, err = tcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestCaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tcuo.mutation = mutation
			node, err = tcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tcuo.hooks) - 1; i >= 0; i-- {
			if tcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tcuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tcuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TestCase)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TestCaseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tcuo *TestCaseUpdateOne) SaveX(ctx context.Context) *TestCase {
	node, err := tcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcuo *TestCaseUpdateOne) Exec(ctx context.Context) error {
	_, err := tcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcuo *TestCaseUpdateOne) ExecX(ctx context.Context) {
	if err := tcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcuo *TestCaseUpdateOne) defaults() error {
	if _, ok := tcuo.mutation.UpdatedAt(); !ok {
		if testcase.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testcase.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testcase.UpdateDefaultUpdatedAt()
		tcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tcuo *TestCaseUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TestCaseUpdateOne {
	tcuo.modifiers = append(tcuo.modifiers, modifiers...)
	return tcuo
}

func (tcuo *TestCaseUpdateOne) sqlSave(ctx context.Context) (_node *TestCase, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   testcase.Table,
			Columns: testcase.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: testcase.FieldID,
			},
		},
	}
	id, ok := tcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestCase.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testcase.FieldID)
		for _, f := range fields {
			if !testcase.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testcase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testcase.FieldCreatedAt,
		})
	}
	if value, ok := tcuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testcase.FieldCreatedAt,
		})
	}
	if value, ok := tcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testcase.FieldUpdatedAt,
		})
	}
	if value, ok := tcuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testcase.FieldUpdatedAt,
		})
	}
	if value, ok := tcuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testcase.FieldDeletedAt,
		})
	}
	if value, ok := tcuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testcase.FieldDeletedAt,
		})
	}
	if value, ok := tcuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: testcase.FieldEntID,
		})
	}
	if value, ok := tcuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldName,
		})
	}
	if tcuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testcase.FieldName,
		})
	}
	if value, ok := tcuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldDescription,
		})
	}
	if tcuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testcase.FieldDescription,
		})
	}
	if value, ok := tcuo.mutation.ModuleID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: testcase.FieldModuleID,
		})
	}
	if tcuo.mutation.ModuleIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: testcase.FieldModuleID,
		})
	}
	if value, ok := tcuo.mutation.APIID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: testcase.FieldAPIID,
		})
	}
	if tcuo.mutation.APIIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: testcase.FieldAPIID,
		})
	}
	if value, ok := tcuo.mutation.Input(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldInput,
		})
	}
	if tcuo.mutation.InputCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testcase.FieldInput,
		})
	}
	if value, ok := tcuo.mutation.InputDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldInputDesc,
		})
	}
	if tcuo.mutation.InputDescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testcase.FieldInputDesc,
		})
	}
	if value, ok := tcuo.mutation.Expectation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldExpectation,
		})
	}
	if tcuo.mutation.ExpectationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testcase.FieldExpectation,
		})
	}
	if value, ok := tcuo.mutation.OutputDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldOutputDesc,
		})
	}
	if tcuo.mutation.OutputDescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testcase.FieldOutputDesc,
		})
	}
	if value, ok := tcuo.mutation.TestCaseType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldTestCaseType,
		})
	}
	if tcuo.mutation.TestCaseTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testcase.FieldTestCaseType,
		})
	}
	if value, ok := tcuo.mutation.TestCaseClass(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testcase.FieldTestCaseClass,
		})
	}
	if tcuo.mutation.TestCaseClassCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testcase.FieldTestCaseClass,
		})
	}
	if value, ok := tcuo.mutation.Deprecated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: testcase.FieldDeprecated,
		})
	}
	if tcuo.mutation.DeprecatedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: testcase.FieldDeprecated,
		})
	}
	_spec.Modifiers = tcuo.modifiers
	_node = &TestCase{config: tcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testcase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
