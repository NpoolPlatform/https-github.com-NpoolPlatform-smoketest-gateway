// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/testplan"
	"github.com/google/uuid"
)

// TestPlanUpdate is the builder for updating TestPlan entities.
type TestPlanUpdate struct {
	config
	hooks     []Hook
	mutation  *TestPlanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TestPlanUpdate builder.
func (tpu *TestPlanUpdate) Where(ps ...predicate.TestPlan) *TestPlanUpdate {
	tpu.mutation.Where(ps...)
	return tpu
}

// SetCreatedAt sets the "created_at" field.
func (tpu *TestPlanUpdate) SetCreatedAt(u uint32) *TestPlanUpdate {
	tpu.mutation.ResetCreatedAt()
	tpu.mutation.SetCreatedAt(u)
	return tpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableCreatedAt(u *uint32) *TestPlanUpdate {
	if u != nil {
		tpu.SetCreatedAt(*u)
	}
	return tpu
}

// AddCreatedAt adds u to the "created_at" field.
func (tpu *TestPlanUpdate) AddCreatedAt(u int32) *TestPlanUpdate {
	tpu.mutation.AddCreatedAt(u)
	return tpu
}

// SetUpdatedAt sets the "updated_at" field.
func (tpu *TestPlanUpdate) SetUpdatedAt(u uint32) *TestPlanUpdate {
	tpu.mutation.ResetUpdatedAt()
	tpu.mutation.SetUpdatedAt(u)
	return tpu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tpu *TestPlanUpdate) AddUpdatedAt(u int32) *TestPlanUpdate {
	tpu.mutation.AddUpdatedAt(u)
	return tpu
}

// SetDeletedAt sets the "deleted_at" field.
func (tpu *TestPlanUpdate) SetDeletedAt(u uint32) *TestPlanUpdate {
	tpu.mutation.ResetDeletedAt()
	tpu.mutation.SetDeletedAt(u)
	return tpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableDeletedAt(u *uint32) *TestPlanUpdate {
	if u != nil {
		tpu.SetDeletedAt(*u)
	}
	return tpu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tpu *TestPlanUpdate) AddDeletedAt(u int32) *TestPlanUpdate {
	tpu.mutation.AddDeletedAt(u)
	return tpu
}

// SetName sets the "name" field.
func (tpu *TestPlanUpdate) SetName(s string) *TestPlanUpdate {
	tpu.mutation.SetName(s)
	return tpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableName(s *string) *TestPlanUpdate {
	if s != nil {
		tpu.SetName(*s)
	}
	return tpu
}

// ClearName clears the value of the "name" field.
func (tpu *TestPlanUpdate) ClearName() *TestPlanUpdate {
	tpu.mutation.ClearName()
	return tpu
}

// SetState sets the "state" field.
func (tpu *TestPlanUpdate) SetState(s string) *TestPlanUpdate {
	tpu.mutation.SetState(s)
	return tpu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableState(s *string) *TestPlanUpdate {
	if s != nil {
		tpu.SetState(*s)
	}
	return tpu
}

// ClearState clears the value of the "state" field.
func (tpu *TestPlanUpdate) ClearState() *TestPlanUpdate {
	tpu.mutation.ClearState()
	return tpu
}

// SetOwnerID sets the "owner_id" field.
func (tpu *TestPlanUpdate) SetOwnerID(u uuid.UUID) *TestPlanUpdate {
	tpu.mutation.SetOwnerID(u)
	return tpu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableOwnerID(u *uuid.UUID) *TestPlanUpdate {
	if u != nil {
		tpu.SetOwnerID(*u)
	}
	return tpu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (tpu *TestPlanUpdate) ClearOwnerID() *TestPlanUpdate {
	tpu.mutation.ClearOwnerID()
	return tpu
}

// SetResponsibleUserID sets the "responsible_user_id" field.
func (tpu *TestPlanUpdate) SetResponsibleUserID(u uuid.UUID) *TestPlanUpdate {
	tpu.mutation.SetResponsibleUserID(u)
	return tpu
}

// SetNillableResponsibleUserID sets the "responsible_user_id" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableResponsibleUserID(u *uuid.UUID) *TestPlanUpdate {
	if u != nil {
		tpu.SetResponsibleUserID(*u)
	}
	return tpu
}

// ClearResponsibleUserID clears the value of the "responsible_user_id" field.
func (tpu *TestPlanUpdate) ClearResponsibleUserID() *TestPlanUpdate {
	tpu.mutation.ClearResponsibleUserID()
	return tpu
}

// SetFailedTestCasesCount sets the "failed_test_cases_count" field.
func (tpu *TestPlanUpdate) SetFailedTestCasesCount(u uint32) *TestPlanUpdate {
	tpu.mutation.ResetFailedTestCasesCount()
	tpu.mutation.SetFailedTestCasesCount(u)
	return tpu
}

// SetNillableFailedTestCasesCount sets the "failed_test_cases_count" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableFailedTestCasesCount(u *uint32) *TestPlanUpdate {
	if u != nil {
		tpu.SetFailedTestCasesCount(*u)
	}
	return tpu
}

// AddFailedTestCasesCount adds u to the "failed_test_cases_count" field.
func (tpu *TestPlanUpdate) AddFailedTestCasesCount(u int32) *TestPlanUpdate {
	tpu.mutation.AddFailedTestCasesCount(u)
	return tpu
}

// ClearFailedTestCasesCount clears the value of the "failed_test_cases_count" field.
func (tpu *TestPlanUpdate) ClearFailedTestCasesCount() *TestPlanUpdate {
	tpu.mutation.ClearFailedTestCasesCount()
	return tpu
}

// SetPassedTestCasesCount sets the "passed_test_cases_count" field.
func (tpu *TestPlanUpdate) SetPassedTestCasesCount(u uint32) *TestPlanUpdate {
	tpu.mutation.ResetPassedTestCasesCount()
	tpu.mutation.SetPassedTestCasesCount(u)
	return tpu
}

// SetNillablePassedTestCasesCount sets the "passed_test_cases_count" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillablePassedTestCasesCount(u *uint32) *TestPlanUpdate {
	if u != nil {
		tpu.SetPassedTestCasesCount(*u)
	}
	return tpu
}

// AddPassedTestCasesCount adds u to the "passed_test_cases_count" field.
func (tpu *TestPlanUpdate) AddPassedTestCasesCount(u int32) *TestPlanUpdate {
	tpu.mutation.AddPassedTestCasesCount(u)
	return tpu
}

// ClearPassedTestCasesCount clears the value of the "passed_test_cases_count" field.
func (tpu *TestPlanUpdate) ClearPassedTestCasesCount() *TestPlanUpdate {
	tpu.mutation.ClearPassedTestCasesCount()
	return tpu
}

// SetSkippedTestCasesCount sets the "skipped_test_cases_count" field.
func (tpu *TestPlanUpdate) SetSkippedTestCasesCount(u uint32) *TestPlanUpdate {
	tpu.mutation.ResetSkippedTestCasesCount()
	tpu.mutation.SetSkippedTestCasesCount(u)
	return tpu
}

// SetNillableSkippedTestCasesCount sets the "skipped_test_cases_count" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableSkippedTestCasesCount(u *uint32) *TestPlanUpdate {
	if u != nil {
		tpu.SetSkippedTestCasesCount(*u)
	}
	return tpu
}

// AddSkippedTestCasesCount adds u to the "skipped_test_cases_count" field.
func (tpu *TestPlanUpdate) AddSkippedTestCasesCount(u int32) *TestPlanUpdate {
	tpu.mutation.AddSkippedTestCasesCount(u)
	return tpu
}

// ClearSkippedTestCasesCount clears the value of the "skipped_test_cases_count" field.
func (tpu *TestPlanUpdate) ClearSkippedTestCasesCount() *TestPlanUpdate {
	tpu.mutation.ClearSkippedTestCasesCount()
	return tpu
}

// SetRunDuration sets the "run_duration" field.
func (tpu *TestPlanUpdate) SetRunDuration(u uint32) *TestPlanUpdate {
	tpu.mutation.ResetRunDuration()
	tpu.mutation.SetRunDuration(u)
	return tpu
}

// SetNillableRunDuration sets the "run_duration" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableRunDuration(u *uint32) *TestPlanUpdate {
	if u != nil {
		tpu.SetRunDuration(*u)
	}
	return tpu
}

// AddRunDuration adds u to the "run_duration" field.
func (tpu *TestPlanUpdate) AddRunDuration(u int32) *TestPlanUpdate {
	tpu.mutation.AddRunDuration(u)
	return tpu
}

// ClearRunDuration clears the value of the "run_duration" field.
func (tpu *TestPlanUpdate) ClearRunDuration() *TestPlanUpdate {
	tpu.mutation.ClearRunDuration()
	return tpu
}

// SetDeadline sets the "deadline" field.
func (tpu *TestPlanUpdate) SetDeadline(u uint32) *TestPlanUpdate {
	tpu.mutation.ResetDeadline()
	tpu.mutation.SetDeadline(u)
	return tpu
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableDeadline(u *uint32) *TestPlanUpdate {
	if u != nil {
		tpu.SetDeadline(*u)
	}
	return tpu
}

// AddDeadline adds u to the "deadline" field.
func (tpu *TestPlanUpdate) AddDeadline(u int32) *TestPlanUpdate {
	tpu.mutation.AddDeadline(u)
	return tpu
}

// ClearDeadline clears the value of the "deadline" field.
func (tpu *TestPlanUpdate) ClearDeadline() *TestPlanUpdate {
	tpu.mutation.ClearDeadline()
	return tpu
}

// SetTestResult sets the "test_result" field.
func (tpu *TestPlanUpdate) SetTestResult(s string) *TestPlanUpdate {
	tpu.mutation.SetTestResult(s)
	return tpu
}

// SetNillableTestResult sets the "test_result" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableTestResult(s *string) *TestPlanUpdate {
	if s != nil {
		tpu.SetTestResult(*s)
	}
	return tpu
}

// ClearTestResult clears the value of the "test_result" field.
func (tpu *TestPlanUpdate) ClearTestResult() *TestPlanUpdate {
	tpu.mutation.ClearTestResult()
	return tpu
}

// Mutation returns the TestPlanMutation object of the builder.
func (tpu *TestPlanUpdate) Mutation() *TestPlanMutation {
	return tpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tpu *TestPlanUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := tpu.defaults(); err != nil {
		return 0, err
	}
	if len(tpu.hooks) == 0 {
		affected, err = tpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestPlanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tpu.mutation = mutation
			affected, err = tpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tpu.hooks) - 1; i >= 0; i-- {
			if tpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tpu *TestPlanUpdate) SaveX(ctx context.Context) int {
	affected, err := tpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tpu *TestPlanUpdate) Exec(ctx context.Context) error {
	_, err := tpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpu *TestPlanUpdate) ExecX(ctx context.Context) {
	if err := tpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpu *TestPlanUpdate) defaults() error {
	if _, ok := tpu.mutation.UpdatedAt(); !ok {
		if testplan.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testplan.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testplan.UpdateDefaultUpdatedAt()
		tpu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tpu *TestPlanUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TestPlanUpdate {
	tpu.modifiers = append(tpu.modifiers, modifiers...)
	return tpu
}

func (tpu *TestPlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   testplan.Table,
			Columns: testplan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: testplan.FieldID,
			},
		},
	}
	if ps := tpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldCreatedAt,
		})
	}
	if value, ok := tpu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldCreatedAt,
		})
	}
	if value, ok := tpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldUpdatedAt,
		})
	}
	if value, ok := tpu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldUpdatedAt,
		})
	}
	if value, ok := tpu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldDeletedAt,
		})
	}
	if value, ok := tpu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldDeletedAt,
		})
	}
	if value, ok := tpu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testplan.FieldName,
		})
	}
	if tpu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testplan.FieldName,
		})
	}
	if value, ok := tpu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testplan.FieldState,
		})
	}
	if tpu.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testplan.FieldState,
		})
	}
	if value, ok := tpu.mutation.OwnerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: testplan.FieldOwnerID,
		})
	}
	if tpu.mutation.OwnerIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: testplan.FieldOwnerID,
		})
	}
	if value, ok := tpu.mutation.ResponsibleUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: testplan.FieldResponsibleUserID,
		})
	}
	if tpu.mutation.ResponsibleUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: testplan.FieldResponsibleUserID,
		})
	}
	if value, ok := tpu.mutation.FailedTestCasesCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldFailedTestCasesCount,
		})
	}
	if value, ok := tpu.mutation.AddedFailedTestCasesCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldFailedTestCasesCount,
		})
	}
	if tpu.mutation.FailedTestCasesCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: testplan.FieldFailedTestCasesCount,
		})
	}
	if value, ok := tpu.mutation.PassedTestCasesCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldPassedTestCasesCount,
		})
	}
	if value, ok := tpu.mutation.AddedPassedTestCasesCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldPassedTestCasesCount,
		})
	}
	if tpu.mutation.PassedTestCasesCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: testplan.FieldPassedTestCasesCount,
		})
	}
	if value, ok := tpu.mutation.SkippedTestCasesCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldSkippedTestCasesCount,
		})
	}
	if value, ok := tpu.mutation.AddedSkippedTestCasesCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldSkippedTestCasesCount,
		})
	}
	if tpu.mutation.SkippedTestCasesCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: testplan.FieldSkippedTestCasesCount,
		})
	}
	if value, ok := tpu.mutation.RunDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldRunDuration,
		})
	}
	if value, ok := tpu.mutation.AddedRunDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldRunDuration,
		})
	}
	if tpu.mutation.RunDurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: testplan.FieldRunDuration,
		})
	}
	if value, ok := tpu.mutation.Deadline(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldDeadline,
		})
	}
	if value, ok := tpu.mutation.AddedDeadline(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldDeadline,
		})
	}
	if tpu.mutation.DeadlineCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: testplan.FieldDeadline,
		})
	}
	if value, ok := tpu.mutation.TestResult(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testplan.FieldTestResult,
		})
	}
	if tpu.mutation.TestResultCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testplan.FieldTestResult,
		})
	}
	_spec.Modifiers = tpu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, tpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testplan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TestPlanUpdateOne is the builder for updating a single TestPlan entity.
type TestPlanUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TestPlanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (tpuo *TestPlanUpdateOne) SetCreatedAt(u uint32) *TestPlanUpdateOne {
	tpuo.mutation.ResetCreatedAt()
	tpuo.mutation.SetCreatedAt(u)
	return tpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableCreatedAt(u *uint32) *TestPlanUpdateOne {
	if u != nil {
		tpuo.SetCreatedAt(*u)
	}
	return tpuo
}

// AddCreatedAt adds u to the "created_at" field.
func (tpuo *TestPlanUpdateOne) AddCreatedAt(u int32) *TestPlanUpdateOne {
	tpuo.mutation.AddCreatedAt(u)
	return tpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tpuo *TestPlanUpdateOne) SetUpdatedAt(u uint32) *TestPlanUpdateOne {
	tpuo.mutation.ResetUpdatedAt()
	tpuo.mutation.SetUpdatedAt(u)
	return tpuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tpuo *TestPlanUpdateOne) AddUpdatedAt(u int32) *TestPlanUpdateOne {
	tpuo.mutation.AddUpdatedAt(u)
	return tpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tpuo *TestPlanUpdateOne) SetDeletedAt(u uint32) *TestPlanUpdateOne {
	tpuo.mutation.ResetDeletedAt()
	tpuo.mutation.SetDeletedAt(u)
	return tpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableDeletedAt(u *uint32) *TestPlanUpdateOne {
	if u != nil {
		tpuo.SetDeletedAt(*u)
	}
	return tpuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tpuo *TestPlanUpdateOne) AddDeletedAt(u int32) *TestPlanUpdateOne {
	tpuo.mutation.AddDeletedAt(u)
	return tpuo
}

// SetName sets the "name" field.
func (tpuo *TestPlanUpdateOne) SetName(s string) *TestPlanUpdateOne {
	tpuo.mutation.SetName(s)
	return tpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableName(s *string) *TestPlanUpdateOne {
	if s != nil {
		tpuo.SetName(*s)
	}
	return tpuo
}

// ClearName clears the value of the "name" field.
func (tpuo *TestPlanUpdateOne) ClearName() *TestPlanUpdateOne {
	tpuo.mutation.ClearName()
	return tpuo
}

// SetState sets the "state" field.
func (tpuo *TestPlanUpdateOne) SetState(s string) *TestPlanUpdateOne {
	tpuo.mutation.SetState(s)
	return tpuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableState(s *string) *TestPlanUpdateOne {
	if s != nil {
		tpuo.SetState(*s)
	}
	return tpuo
}

// ClearState clears the value of the "state" field.
func (tpuo *TestPlanUpdateOne) ClearState() *TestPlanUpdateOne {
	tpuo.mutation.ClearState()
	return tpuo
}

// SetOwnerID sets the "owner_id" field.
func (tpuo *TestPlanUpdateOne) SetOwnerID(u uuid.UUID) *TestPlanUpdateOne {
	tpuo.mutation.SetOwnerID(u)
	return tpuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableOwnerID(u *uuid.UUID) *TestPlanUpdateOne {
	if u != nil {
		tpuo.SetOwnerID(*u)
	}
	return tpuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (tpuo *TestPlanUpdateOne) ClearOwnerID() *TestPlanUpdateOne {
	tpuo.mutation.ClearOwnerID()
	return tpuo
}

// SetResponsibleUserID sets the "responsible_user_id" field.
func (tpuo *TestPlanUpdateOne) SetResponsibleUserID(u uuid.UUID) *TestPlanUpdateOne {
	tpuo.mutation.SetResponsibleUserID(u)
	return tpuo
}

// SetNillableResponsibleUserID sets the "responsible_user_id" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableResponsibleUserID(u *uuid.UUID) *TestPlanUpdateOne {
	if u != nil {
		tpuo.SetResponsibleUserID(*u)
	}
	return tpuo
}

// ClearResponsibleUserID clears the value of the "responsible_user_id" field.
func (tpuo *TestPlanUpdateOne) ClearResponsibleUserID() *TestPlanUpdateOne {
	tpuo.mutation.ClearResponsibleUserID()
	return tpuo
}

// SetFailedTestCasesCount sets the "failed_test_cases_count" field.
func (tpuo *TestPlanUpdateOne) SetFailedTestCasesCount(u uint32) *TestPlanUpdateOne {
	tpuo.mutation.ResetFailedTestCasesCount()
	tpuo.mutation.SetFailedTestCasesCount(u)
	return tpuo
}

// SetNillableFailedTestCasesCount sets the "failed_test_cases_count" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableFailedTestCasesCount(u *uint32) *TestPlanUpdateOne {
	if u != nil {
		tpuo.SetFailedTestCasesCount(*u)
	}
	return tpuo
}

// AddFailedTestCasesCount adds u to the "failed_test_cases_count" field.
func (tpuo *TestPlanUpdateOne) AddFailedTestCasesCount(u int32) *TestPlanUpdateOne {
	tpuo.mutation.AddFailedTestCasesCount(u)
	return tpuo
}

// ClearFailedTestCasesCount clears the value of the "failed_test_cases_count" field.
func (tpuo *TestPlanUpdateOne) ClearFailedTestCasesCount() *TestPlanUpdateOne {
	tpuo.mutation.ClearFailedTestCasesCount()
	return tpuo
}

// SetPassedTestCasesCount sets the "passed_test_cases_count" field.
func (tpuo *TestPlanUpdateOne) SetPassedTestCasesCount(u uint32) *TestPlanUpdateOne {
	tpuo.mutation.ResetPassedTestCasesCount()
	tpuo.mutation.SetPassedTestCasesCount(u)
	return tpuo
}

// SetNillablePassedTestCasesCount sets the "passed_test_cases_count" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillablePassedTestCasesCount(u *uint32) *TestPlanUpdateOne {
	if u != nil {
		tpuo.SetPassedTestCasesCount(*u)
	}
	return tpuo
}

// AddPassedTestCasesCount adds u to the "passed_test_cases_count" field.
func (tpuo *TestPlanUpdateOne) AddPassedTestCasesCount(u int32) *TestPlanUpdateOne {
	tpuo.mutation.AddPassedTestCasesCount(u)
	return tpuo
}

// ClearPassedTestCasesCount clears the value of the "passed_test_cases_count" field.
func (tpuo *TestPlanUpdateOne) ClearPassedTestCasesCount() *TestPlanUpdateOne {
	tpuo.mutation.ClearPassedTestCasesCount()
	return tpuo
}

// SetSkippedTestCasesCount sets the "skipped_test_cases_count" field.
func (tpuo *TestPlanUpdateOne) SetSkippedTestCasesCount(u uint32) *TestPlanUpdateOne {
	tpuo.mutation.ResetSkippedTestCasesCount()
	tpuo.mutation.SetSkippedTestCasesCount(u)
	return tpuo
}

// SetNillableSkippedTestCasesCount sets the "skipped_test_cases_count" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableSkippedTestCasesCount(u *uint32) *TestPlanUpdateOne {
	if u != nil {
		tpuo.SetSkippedTestCasesCount(*u)
	}
	return tpuo
}

// AddSkippedTestCasesCount adds u to the "skipped_test_cases_count" field.
func (tpuo *TestPlanUpdateOne) AddSkippedTestCasesCount(u int32) *TestPlanUpdateOne {
	tpuo.mutation.AddSkippedTestCasesCount(u)
	return tpuo
}

// ClearSkippedTestCasesCount clears the value of the "skipped_test_cases_count" field.
func (tpuo *TestPlanUpdateOne) ClearSkippedTestCasesCount() *TestPlanUpdateOne {
	tpuo.mutation.ClearSkippedTestCasesCount()
	return tpuo
}

// SetRunDuration sets the "run_duration" field.
func (tpuo *TestPlanUpdateOne) SetRunDuration(u uint32) *TestPlanUpdateOne {
	tpuo.mutation.ResetRunDuration()
	tpuo.mutation.SetRunDuration(u)
	return tpuo
}

// SetNillableRunDuration sets the "run_duration" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableRunDuration(u *uint32) *TestPlanUpdateOne {
	if u != nil {
		tpuo.SetRunDuration(*u)
	}
	return tpuo
}

// AddRunDuration adds u to the "run_duration" field.
func (tpuo *TestPlanUpdateOne) AddRunDuration(u int32) *TestPlanUpdateOne {
	tpuo.mutation.AddRunDuration(u)
	return tpuo
}

// ClearRunDuration clears the value of the "run_duration" field.
func (tpuo *TestPlanUpdateOne) ClearRunDuration() *TestPlanUpdateOne {
	tpuo.mutation.ClearRunDuration()
	return tpuo
}

// SetDeadline sets the "deadline" field.
func (tpuo *TestPlanUpdateOne) SetDeadline(u uint32) *TestPlanUpdateOne {
	tpuo.mutation.ResetDeadline()
	tpuo.mutation.SetDeadline(u)
	return tpuo
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableDeadline(u *uint32) *TestPlanUpdateOne {
	if u != nil {
		tpuo.SetDeadline(*u)
	}
	return tpuo
}

// AddDeadline adds u to the "deadline" field.
func (tpuo *TestPlanUpdateOne) AddDeadline(u int32) *TestPlanUpdateOne {
	tpuo.mutation.AddDeadline(u)
	return tpuo
}

// ClearDeadline clears the value of the "deadline" field.
func (tpuo *TestPlanUpdateOne) ClearDeadline() *TestPlanUpdateOne {
	tpuo.mutation.ClearDeadline()
	return tpuo
}

// SetTestResult sets the "test_result" field.
func (tpuo *TestPlanUpdateOne) SetTestResult(s string) *TestPlanUpdateOne {
	tpuo.mutation.SetTestResult(s)
	return tpuo
}

// SetNillableTestResult sets the "test_result" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableTestResult(s *string) *TestPlanUpdateOne {
	if s != nil {
		tpuo.SetTestResult(*s)
	}
	return tpuo
}

// ClearTestResult clears the value of the "test_result" field.
func (tpuo *TestPlanUpdateOne) ClearTestResult() *TestPlanUpdateOne {
	tpuo.mutation.ClearTestResult()
	return tpuo
}

// Mutation returns the TestPlanMutation object of the builder.
func (tpuo *TestPlanUpdateOne) Mutation() *TestPlanMutation {
	return tpuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tpuo *TestPlanUpdateOne) Select(field string, fields ...string) *TestPlanUpdateOne {
	tpuo.fields = append([]string{field}, fields...)
	return tpuo
}

// Save executes the query and returns the updated TestPlan entity.
func (tpuo *TestPlanUpdateOne) Save(ctx context.Context) (*TestPlan, error) {
	var (
		err  error
		node *TestPlan
	)
	if err := tpuo.defaults(); err != nil {
		return nil, err
	}
	if len(tpuo.hooks) == 0 {
		node, err = tpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestPlanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tpuo.mutation = mutation
			node, err = tpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tpuo.hooks) - 1; i >= 0; i-- {
			if tpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tpuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tpuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TestPlan)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TestPlanMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tpuo *TestPlanUpdateOne) SaveX(ctx context.Context) *TestPlan {
	node, err := tpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tpuo *TestPlanUpdateOne) Exec(ctx context.Context) error {
	_, err := tpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpuo *TestPlanUpdateOne) ExecX(ctx context.Context) {
	if err := tpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpuo *TestPlanUpdateOne) defaults() error {
	if _, ok := tpuo.mutation.UpdatedAt(); !ok {
		if testplan.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testplan.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testplan.UpdateDefaultUpdatedAt()
		tpuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tpuo *TestPlanUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TestPlanUpdateOne {
	tpuo.modifiers = append(tpuo.modifiers, modifiers...)
	return tpuo
}

func (tpuo *TestPlanUpdateOne) sqlSave(ctx context.Context) (_node *TestPlan, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   testplan.Table,
			Columns: testplan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: testplan.FieldID,
			},
		},
	}
	id, ok := tpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestPlan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testplan.FieldID)
		for _, f := range fields {
			if !testplan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testplan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldCreatedAt,
		})
	}
	if value, ok := tpuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldCreatedAt,
		})
	}
	if value, ok := tpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldUpdatedAt,
		})
	}
	if value, ok := tpuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldUpdatedAt,
		})
	}
	if value, ok := tpuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldDeletedAt,
		})
	}
	if value, ok := tpuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldDeletedAt,
		})
	}
	if value, ok := tpuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testplan.FieldName,
		})
	}
	if tpuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testplan.FieldName,
		})
	}
	if value, ok := tpuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testplan.FieldState,
		})
	}
	if tpuo.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testplan.FieldState,
		})
	}
	if value, ok := tpuo.mutation.OwnerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: testplan.FieldOwnerID,
		})
	}
	if tpuo.mutation.OwnerIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: testplan.FieldOwnerID,
		})
	}
	if value, ok := tpuo.mutation.ResponsibleUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: testplan.FieldResponsibleUserID,
		})
	}
	if tpuo.mutation.ResponsibleUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: testplan.FieldResponsibleUserID,
		})
	}
	if value, ok := tpuo.mutation.FailedTestCasesCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldFailedTestCasesCount,
		})
	}
	if value, ok := tpuo.mutation.AddedFailedTestCasesCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldFailedTestCasesCount,
		})
	}
	if tpuo.mutation.FailedTestCasesCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: testplan.FieldFailedTestCasesCount,
		})
	}
	if value, ok := tpuo.mutation.PassedTestCasesCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldPassedTestCasesCount,
		})
	}
	if value, ok := tpuo.mutation.AddedPassedTestCasesCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldPassedTestCasesCount,
		})
	}
	if tpuo.mutation.PassedTestCasesCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: testplan.FieldPassedTestCasesCount,
		})
	}
	if value, ok := tpuo.mutation.SkippedTestCasesCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldSkippedTestCasesCount,
		})
	}
	if value, ok := tpuo.mutation.AddedSkippedTestCasesCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldSkippedTestCasesCount,
		})
	}
	if tpuo.mutation.SkippedTestCasesCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: testplan.FieldSkippedTestCasesCount,
		})
	}
	if value, ok := tpuo.mutation.RunDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldRunDuration,
		})
	}
	if value, ok := tpuo.mutation.AddedRunDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldRunDuration,
		})
	}
	if tpuo.mutation.RunDurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: testplan.FieldRunDuration,
		})
	}
	if value, ok := tpuo.mutation.Deadline(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldDeadline,
		})
	}
	if value, ok := tpuo.mutation.AddedDeadline(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldDeadline,
		})
	}
	if tpuo.mutation.DeadlineCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: testplan.FieldDeadline,
		})
	}
	if value, ok := tpuo.mutation.TestResult(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testplan.FieldTestResult,
		})
	}
	if tpuo.mutation.TestResultCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testplan.FieldTestResult,
		})
	}
	_spec.Modifiers = tpuo.modifiers
	_node = &TestPlan{config: tpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testplan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
