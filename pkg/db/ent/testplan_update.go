// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/testplan"
	"github.com/google/uuid"
)

// TestPlanUpdate is the builder for updating TestPlan entities.
type TestPlanUpdate struct {
	config
	hooks     []Hook
	mutation  *TestPlanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TestPlanUpdate builder.
func (tpu *TestPlanUpdate) Where(ps ...predicate.TestPlan) *TestPlanUpdate {
	tpu.mutation.Where(ps...)
	return tpu
}

// SetCreatedAt sets the "created_at" field.
func (tpu *TestPlanUpdate) SetCreatedAt(u uint32) *TestPlanUpdate {
	tpu.mutation.ResetCreatedAt()
	tpu.mutation.SetCreatedAt(u)
	return tpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableCreatedAt(u *uint32) *TestPlanUpdate {
	if u != nil {
		tpu.SetCreatedAt(*u)
	}
	return tpu
}

// AddCreatedAt adds u to the "created_at" field.
func (tpu *TestPlanUpdate) AddCreatedAt(u int32) *TestPlanUpdate {
	tpu.mutation.AddCreatedAt(u)
	return tpu
}

// SetUpdatedAt sets the "updated_at" field.
func (tpu *TestPlanUpdate) SetUpdatedAt(u uint32) *TestPlanUpdate {
	tpu.mutation.ResetUpdatedAt()
	tpu.mutation.SetUpdatedAt(u)
	return tpu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tpu *TestPlanUpdate) AddUpdatedAt(u int32) *TestPlanUpdate {
	tpu.mutation.AddUpdatedAt(u)
	return tpu
}

// SetDeletedAt sets the "deleted_at" field.
func (tpu *TestPlanUpdate) SetDeletedAt(u uint32) *TestPlanUpdate {
	tpu.mutation.ResetDeletedAt()
	tpu.mutation.SetDeletedAt(u)
	return tpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableDeletedAt(u *uint32) *TestPlanUpdate {
	if u != nil {
		tpu.SetDeletedAt(*u)
	}
	return tpu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tpu *TestPlanUpdate) AddDeletedAt(u int32) *TestPlanUpdate {
	tpu.mutation.AddDeletedAt(u)
	return tpu
}

// SetName sets the "name" field.
func (tpu *TestPlanUpdate) SetName(s string) *TestPlanUpdate {
	tpu.mutation.SetName(s)
	return tpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableName(s *string) *TestPlanUpdate {
	if s != nil {
		tpu.SetName(*s)
	}
	return tpu
}

// ClearName clears the value of the "name" field.
func (tpu *TestPlanUpdate) ClearName() *TestPlanUpdate {
	tpu.mutation.ClearName()
	return tpu
}

// SetState sets the "state" field.
func (tpu *TestPlanUpdate) SetState(s string) *TestPlanUpdate {
	tpu.mutation.SetState(s)
	return tpu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableState(s *string) *TestPlanUpdate {
	if s != nil {
		tpu.SetState(*s)
	}
	return tpu
}

// ClearState clears the value of the "state" field.
func (tpu *TestPlanUpdate) ClearState() *TestPlanUpdate {
	tpu.mutation.ClearState()
	return tpu
}

// SetCreatedBy sets the "created_by" field.
func (tpu *TestPlanUpdate) SetCreatedBy(u uuid.UUID) *TestPlanUpdate {
	tpu.mutation.SetCreatedBy(u)
	return tpu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableCreatedBy(u *uuid.UUID) *TestPlanUpdate {
	if u != nil {
		tpu.SetCreatedBy(*u)
	}
	return tpu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tpu *TestPlanUpdate) ClearCreatedBy() *TestPlanUpdate {
	tpu.mutation.ClearCreatedBy()
	return tpu
}

// SetExecutor sets the "executor" field.
func (tpu *TestPlanUpdate) SetExecutor(u uuid.UUID) *TestPlanUpdate {
	tpu.mutation.SetExecutor(u)
	return tpu
}

// SetNillableExecutor sets the "executor" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableExecutor(u *uuid.UUID) *TestPlanUpdate {
	if u != nil {
		tpu.SetExecutor(*u)
	}
	return tpu
}

// ClearExecutor clears the value of the "executor" field.
func (tpu *TestPlanUpdate) ClearExecutor() *TestPlanUpdate {
	tpu.mutation.ClearExecutor()
	return tpu
}

// SetFails sets the "fails" field.
func (tpu *TestPlanUpdate) SetFails(u uint32) *TestPlanUpdate {
	tpu.mutation.ResetFails()
	tpu.mutation.SetFails(u)
	return tpu
}

// SetNillableFails sets the "fails" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableFails(u *uint32) *TestPlanUpdate {
	if u != nil {
		tpu.SetFails(*u)
	}
	return tpu
}

// AddFails adds u to the "fails" field.
func (tpu *TestPlanUpdate) AddFails(u int32) *TestPlanUpdate {
	tpu.mutation.AddFails(u)
	return tpu
}

// ClearFails clears the value of the "fails" field.
func (tpu *TestPlanUpdate) ClearFails() *TestPlanUpdate {
	tpu.mutation.ClearFails()
	return tpu
}

// SetPasses sets the "passes" field.
func (tpu *TestPlanUpdate) SetPasses(u uint32) *TestPlanUpdate {
	tpu.mutation.ResetPasses()
	tpu.mutation.SetPasses(u)
	return tpu
}

// SetNillablePasses sets the "passes" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillablePasses(u *uint32) *TestPlanUpdate {
	if u != nil {
		tpu.SetPasses(*u)
	}
	return tpu
}

// AddPasses adds u to the "passes" field.
func (tpu *TestPlanUpdate) AddPasses(u int32) *TestPlanUpdate {
	tpu.mutation.AddPasses(u)
	return tpu
}

// ClearPasses clears the value of the "passes" field.
func (tpu *TestPlanUpdate) ClearPasses() *TestPlanUpdate {
	tpu.mutation.ClearPasses()
	return tpu
}

// SetSkips sets the "skips" field.
func (tpu *TestPlanUpdate) SetSkips(u uint32) *TestPlanUpdate {
	tpu.mutation.ResetSkips()
	tpu.mutation.SetSkips(u)
	return tpu
}

// SetNillableSkips sets the "skips" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableSkips(u *uint32) *TestPlanUpdate {
	if u != nil {
		tpu.SetSkips(*u)
	}
	return tpu
}

// AddSkips adds u to the "skips" field.
func (tpu *TestPlanUpdate) AddSkips(u int32) *TestPlanUpdate {
	tpu.mutation.AddSkips(u)
	return tpu
}

// ClearSkips clears the value of the "skips" field.
func (tpu *TestPlanUpdate) ClearSkips() *TestPlanUpdate {
	tpu.mutation.ClearSkips()
	return tpu
}

// SetRunDuration sets the "run_duration" field.
func (tpu *TestPlanUpdate) SetRunDuration(u uint32) *TestPlanUpdate {
	tpu.mutation.ResetRunDuration()
	tpu.mutation.SetRunDuration(u)
	return tpu
}

// SetNillableRunDuration sets the "run_duration" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableRunDuration(u *uint32) *TestPlanUpdate {
	if u != nil {
		tpu.SetRunDuration(*u)
	}
	return tpu
}

// AddRunDuration adds u to the "run_duration" field.
func (tpu *TestPlanUpdate) AddRunDuration(u int32) *TestPlanUpdate {
	tpu.mutation.AddRunDuration(u)
	return tpu
}

// ClearRunDuration clears the value of the "run_duration" field.
func (tpu *TestPlanUpdate) ClearRunDuration() *TestPlanUpdate {
	tpu.mutation.ClearRunDuration()
	return tpu
}

// SetDeadline sets the "deadline" field.
func (tpu *TestPlanUpdate) SetDeadline(u uint32) *TestPlanUpdate {
	tpu.mutation.ResetDeadline()
	tpu.mutation.SetDeadline(u)
	return tpu
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableDeadline(u *uint32) *TestPlanUpdate {
	if u != nil {
		tpu.SetDeadline(*u)
	}
	return tpu
}

// AddDeadline adds u to the "deadline" field.
func (tpu *TestPlanUpdate) AddDeadline(u int32) *TestPlanUpdate {
	tpu.mutation.AddDeadline(u)
	return tpu
}

// ClearDeadline clears the value of the "deadline" field.
func (tpu *TestPlanUpdate) ClearDeadline() *TestPlanUpdate {
	tpu.mutation.ClearDeadline()
	return tpu
}

// SetResult sets the "result" field.
func (tpu *TestPlanUpdate) SetResult(s string) *TestPlanUpdate {
	tpu.mutation.SetResult(s)
	return tpu
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (tpu *TestPlanUpdate) SetNillableResult(s *string) *TestPlanUpdate {
	if s != nil {
		tpu.SetResult(*s)
	}
	return tpu
}

// ClearResult clears the value of the "result" field.
func (tpu *TestPlanUpdate) ClearResult() *TestPlanUpdate {
	tpu.mutation.ClearResult()
	return tpu
}

// Mutation returns the TestPlanMutation object of the builder.
func (tpu *TestPlanUpdate) Mutation() *TestPlanMutation {
	return tpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tpu *TestPlanUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := tpu.defaults(); err != nil {
		return 0, err
	}
	if len(tpu.hooks) == 0 {
		affected, err = tpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestPlanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tpu.mutation = mutation
			affected, err = tpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tpu.hooks) - 1; i >= 0; i-- {
			if tpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tpu *TestPlanUpdate) SaveX(ctx context.Context) int {
	affected, err := tpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tpu *TestPlanUpdate) Exec(ctx context.Context) error {
	_, err := tpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpu *TestPlanUpdate) ExecX(ctx context.Context) {
	if err := tpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpu *TestPlanUpdate) defaults() error {
	if _, ok := tpu.mutation.UpdatedAt(); !ok {
		if testplan.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testplan.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testplan.UpdateDefaultUpdatedAt()
		tpu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tpu *TestPlanUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TestPlanUpdate {
	tpu.modifiers = append(tpu.modifiers, modifiers...)
	return tpu
}

func (tpu *TestPlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   testplan.Table,
			Columns: testplan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: testplan.FieldID,
			},
		},
	}
	if ps := tpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldCreatedAt,
		})
	}
	if value, ok := tpu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldCreatedAt,
		})
	}
	if value, ok := tpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldUpdatedAt,
		})
	}
	if value, ok := tpu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldUpdatedAt,
		})
	}
	if value, ok := tpu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldDeletedAt,
		})
	}
	if value, ok := tpu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldDeletedAt,
		})
	}
	if value, ok := tpu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testplan.FieldName,
		})
	}
	if tpu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testplan.FieldName,
		})
	}
	if value, ok := tpu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testplan.FieldState,
		})
	}
	if tpu.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testplan.FieldState,
		})
	}
	if value, ok := tpu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: testplan.FieldCreatedBy,
		})
	}
	if tpu.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: testplan.FieldCreatedBy,
		})
	}
	if value, ok := tpu.mutation.Executor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: testplan.FieldExecutor,
		})
	}
	if tpu.mutation.ExecutorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: testplan.FieldExecutor,
		})
	}
	if value, ok := tpu.mutation.Fails(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldFails,
		})
	}
	if value, ok := tpu.mutation.AddedFails(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldFails,
		})
	}
	if tpu.mutation.FailsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: testplan.FieldFails,
		})
	}
	if value, ok := tpu.mutation.Passes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldPasses,
		})
	}
	if value, ok := tpu.mutation.AddedPasses(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldPasses,
		})
	}
	if tpu.mutation.PassesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: testplan.FieldPasses,
		})
	}
	if value, ok := tpu.mutation.Skips(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldSkips,
		})
	}
	if value, ok := tpu.mutation.AddedSkips(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldSkips,
		})
	}
	if tpu.mutation.SkipsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: testplan.FieldSkips,
		})
	}
	if value, ok := tpu.mutation.RunDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldRunDuration,
		})
	}
	if value, ok := tpu.mutation.AddedRunDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldRunDuration,
		})
	}
	if tpu.mutation.RunDurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: testplan.FieldRunDuration,
		})
	}
	if value, ok := tpu.mutation.Deadline(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldDeadline,
		})
	}
	if value, ok := tpu.mutation.AddedDeadline(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldDeadline,
		})
	}
	if tpu.mutation.DeadlineCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: testplan.FieldDeadline,
		})
	}
	if value, ok := tpu.mutation.Result(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testplan.FieldResult,
		})
	}
	if tpu.mutation.ResultCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testplan.FieldResult,
		})
	}
	_spec.Modifiers = tpu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, tpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testplan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TestPlanUpdateOne is the builder for updating a single TestPlan entity.
type TestPlanUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TestPlanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (tpuo *TestPlanUpdateOne) SetCreatedAt(u uint32) *TestPlanUpdateOne {
	tpuo.mutation.ResetCreatedAt()
	tpuo.mutation.SetCreatedAt(u)
	return tpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableCreatedAt(u *uint32) *TestPlanUpdateOne {
	if u != nil {
		tpuo.SetCreatedAt(*u)
	}
	return tpuo
}

// AddCreatedAt adds u to the "created_at" field.
func (tpuo *TestPlanUpdateOne) AddCreatedAt(u int32) *TestPlanUpdateOne {
	tpuo.mutation.AddCreatedAt(u)
	return tpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tpuo *TestPlanUpdateOne) SetUpdatedAt(u uint32) *TestPlanUpdateOne {
	tpuo.mutation.ResetUpdatedAt()
	tpuo.mutation.SetUpdatedAt(u)
	return tpuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tpuo *TestPlanUpdateOne) AddUpdatedAt(u int32) *TestPlanUpdateOne {
	tpuo.mutation.AddUpdatedAt(u)
	return tpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tpuo *TestPlanUpdateOne) SetDeletedAt(u uint32) *TestPlanUpdateOne {
	tpuo.mutation.ResetDeletedAt()
	tpuo.mutation.SetDeletedAt(u)
	return tpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableDeletedAt(u *uint32) *TestPlanUpdateOne {
	if u != nil {
		tpuo.SetDeletedAt(*u)
	}
	return tpuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tpuo *TestPlanUpdateOne) AddDeletedAt(u int32) *TestPlanUpdateOne {
	tpuo.mutation.AddDeletedAt(u)
	return tpuo
}

// SetName sets the "name" field.
func (tpuo *TestPlanUpdateOne) SetName(s string) *TestPlanUpdateOne {
	tpuo.mutation.SetName(s)
	return tpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableName(s *string) *TestPlanUpdateOne {
	if s != nil {
		tpuo.SetName(*s)
	}
	return tpuo
}

// ClearName clears the value of the "name" field.
func (tpuo *TestPlanUpdateOne) ClearName() *TestPlanUpdateOne {
	tpuo.mutation.ClearName()
	return tpuo
}

// SetState sets the "state" field.
func (tpuo *TestPlanUpdateOne) SetState(s string) *TestPlanUpdateOne {
	tpuo.mutation.SetState(s)
	return tpuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableState(s *string) *TestPlanUpdateOne {
	if s != nil {
		tpuo.SetState(*s)
	}
	return tpuo
}

// ClearState clears the value of the "state" field.
func (tpuo *TestPlanUpdateOne) ClearState() *TestPlanUpdateOne {
	tpuo.mutation.ClearState()
	return tpuo
}

// SetCreatedBy sets the "created_by" field.
func (tpuo *TestPlanUpdateOne) SetCreatedBy(u uuid.UUID) *TestPlanUpdateOne {
	tpuo.mutation.SetCreatedBy(u)
	return tpuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *TestPlanUpdateOne {
	if u != nil {
		tpuo.SetCreatedBy(*u)
	}
	return tpuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (tpuo *TestPlanUpdateOne) ClearCreatedBy() *TestPlanUpdateOne {
	tpuo.mutation.ClearCreatedBy()
	return tpuo
}

// SetExecutor sets the "executor" field.
func (tpuo *TestPlanUpdateOne) SetExecutor(u uuid.UUID) *TestPlanUpdateOne {
	tpuo.mutation.SetExecutor(u)
	return tpuo
}

// SetNillableExecutor sets the "executor" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableExecutor(u *uuid.UUID) *TestPlanUpdateOne {
	if u != nil {
		tpuo.SetExecutor(*u)
	}
	return tpuo
}

// ClearExecutor clears the value of the "executor" field.
func (tpuo *TestPlanUpdateOne) ClearExecutor() *TestPlanUpdateOne {
	tpuo.mutation.ClearExecutor()
	return tpuo
}

// SetFails sets the "fails" field.
func (tpuo *TestPlanUpdateOne) SetFails(u uint32) *TestPlanUpdateOne {
	tpuo.mutation.ResetFails()
	tpuo.mutation.SetFails(u)
	return tpuo
}

// SetNillableFails sets the "fails" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableFails(u *uint32) *TestPlanUpdateOne {
	if u != nil {
		tpuo.SetFails(*u)
	}
	return tpuo
}

// AddFails adds u to the "fails" field.
func (tpuo *TestPlanUpdateOne) AddFails(u int32) *TestPlanUpdateOne {
	tpuo.mutation.AddFails(u)
	return tpuo
}

// ClearFails clears the value of the "fails" field.
func (tpuo *TestPlanUpdateOne) ClearFails() *TestPlanUpdateOne {
	tpuo.mutation.ClearFails()
	return tpuo
}

// SetPasses sets the "passes" field.
func (tpuo *TestPlanUpdateOne) SetPasses(u uint32) *TestPlanUpdateOne {
	tpuo.mutation.ResetPasses()
	tpuo.mutation.SetPasses(u)
	return tpuo
}

// SetNillablePasses sets the "passes" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillablePasses(u *uint32) *TestPlanUpdateOne {
	if u != nil {
		tpuo.SetPasses(*u)
	}
	return tpuo
}

// AddPasses adds u to the "passes" field.
func (tpuo *TestPlanUpdateOne) AddPasses(u int32) *TestPlanUpdateOne {
	tpuo.mutation.AddPasses(u)
	return tpuo
}

// ClearPasses clears the value of the "passes" field.
func (tpuo *TestPlanUpdateOne) ClearPasses() *TestPlanUpdateOne {
	tpuo.mutation.ClearPasses()
	return tpuo
}

// SetSkips sets the "skips" field.
func (tpuo *TestPlanUpdateOne) SetSkips(u uint32) *TestPlanUpdateOne {
	tpuo.mutation.ResetSkips()
	tpuo.mutation.SetSkips(u)
	return tpuo
}

// SetNillableSkips sets the "skips" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableSkips(u *uint32) *TestPlanUpdateOne {
	if u != nil {
		tpuo.SetSkips(*u)
	}
	return tpuo
}

// AddSkips adds u to the "skips" field.
func (tpuo *TestPlanUpdateOne) AddSkips(u int32) *TestPlanUpdateOne {
	tpuo.mutation.AddSkips(u)
	return tpuo
}

// ClearSkips clears the value of the "skips" field.
func (tpuo *TestPlanUpdateOne) ClearSkips() *TestPlanUpdateOne {
	tpuo.mutation.ClearSkips()
	return tpuo
}

// SetRunDuration sets the "run_duration" field.
func (tpuo *TestPlanUpdateOne) SetRunDuration(u uint32) *TestPlanUpdateOne {
	tpuo.mutation.ResetRunDuration()
	tpuo.mutation.SetRunDuration(u)
	return tpuo
}

// SetNillableRunDuration sets the "run_duration" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableRunDuration(u *uint32) *TestPlanUpdateOne {
	if u != nil {
		tpuo.SetRunDuration(*u)
	}
	return tpuo
}

// AddRunDuration adds u to the "run_duration" field.
func (tpuo *TestPlanUpdateOne) AddRunDuration(u int32) *TestPlanUpdateOne {
	tpuo.mutation.AddRunDuration(u)
	return tpuo
}

// ClearRunDuration clears the value of the "run_duration" field.
func (tpuo *TestPlanUpdateOne) ClearRunDuration() *TestPlanUpdateOne {
	tpuo.mutation.ClearRunDuration()
	return tpuo
}

// SetDeadline sets the "deadline" field.
func (tpuo *TestPlanUpdateOne) SetDeadline(u uint32) *TestPlanUpdateOne {
	tpuo.mutation.ResetDeadline()
	tpuo.mutation.SetDeadline(u)
	return tpuo
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableDeadline(u *uint32) *TestPlanUpdateOne {
	if u != nil {
		tpuo.SetDeadline(*u)
	}
	return tpuo
}

// AddDeadline adds u to the "deadline" field.
func (tpuo *TestPlanUpdateOne) AddDeadline(u int32) *TestPlanUpdateOne {
	tpuo.mutation.AddDeadline(u)
	return tpuo
}

// ClearDeadline clears the value of the "deadline" field.
func (tpuo *TestPlanUpdateOne) ClearDeadline() *TestPlanUpdateOne {
	tpuo.mutation.ClearDeadline()
	return tpuo
}

// SetResult sets the "result" field.
func (tpuo *TestPlanUpdateOne) SetResult(s string) *TestPlanUpdateOne {
	tpuo.mutation.SetResult(s)
	return tpuo
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (tpuo *TestPlanUpdateOne) SetNillableResult(s *string) *TestPlanUpdateOne {
	if s != nil {
		tpuo.SetResult(*s)
	}
	return tpuo
}

// ClearResult clears the value of the "result" field.
func (tpuo *TestPlanUpdateOne) ClearResult() *TestPlanUpdateOne {
	tpuo.mutation.ClearResult()
	return tpuo
}

// Mutation returns the TestPlanMutation object of the builder.
func (tpuo *TestPlanUpdateOne) Mutation() *TestPlanMutation {
	return tpuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tpuo *TestPlanUpdateOne) Select(field string, fields ...string) *TestPlanUpdateOne {
	tpuo.fields = append([]string{field}, fields...)
	return tpuo
}

// Save executes the query and returns the updated TestPlan entity.
func (tpuo *TestPlanUpdateOne) Save(ctx context.Context) (*TestPlan, error) {
	var (
		err  error
		node *TestPlan
	)
	if err := tpuo.defaults(); err != nil {
		return nil, err
	}
	if len(tpuo.hooks) == 0 {
		node, err = tpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestPlanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tpuo.mutation = mutation
			node, err = tpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tpuo.hooks) - 1; i >= 0; i-- {
			if tpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tpuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tpuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TestPlan)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TestPlanMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tpuo *TestPlanUpdateOne) SaveX(ctx context.Context) *TestPlan {
	node, err := tpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tpuo *TestPlanUpdateOne) Exec(ctx context.Context) error {
	_, err := tpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpuo *TestPlanUpdateOne) ExecX(ctx context.Context) {
	if err := tpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpuo *TestPlanUpdateOne) defaults() error {
	if _, ok := tpuo.mutation.UpdatedAt(); !ok {
		if testplan.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testplan.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testplan.UpdateDefaultUpdatedAt()
		tpuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tpuo *TestPlanUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TestPlanUpdateOne {
	tpuo.modifiers = append(tpuo.modifiers, modifiers...)
	return tpuo
}

func (tpuo *TestPlanUpdateOne) sqlSave(ctx context.Context) (_node *TestPlan, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   testplan.Table,
			Columns: testplan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: testplan.FieldID,
			},
		},
	}
	id, ok := tpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestPlan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testplan.FieldID)
		for _, f := range fields {
			if !testplan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testplan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldCreatedAt,
		})
	}
	if value, ok := tpuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldCreatedAt,
		})
	}
	if value, ok := tpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldUpdatedAt,
		})
	}
	if value, ok := tpuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldUpdatedAt,
		})
	}
	if value, ok := tpuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldDeletedAt,
		})
	}
	if value, ok := tpuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldDeletedAt,
		})
	}
	if value, ok := tpuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testplan.FieldName,
		})
	}
	if tpuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testplan.FieldName,
		})
	}
	if value, ok := tpuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testplan.FieldState,
		})
	}
	if tpuo.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testplan.FieldState,
		})
	}
	if value, ok := tpuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: testplan.FieldCreatedBy,
		})
	}
	if tpuo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: testplan.FieldCreatedBy,
		})
	}
	if value, ok := tpuo.mutation.Executor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: testplan.FieldExecutor,
		})
	}
	if tpuo.mutation.ExecutorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: testplan.FieldExecutor,
		})
	}
	if value, ok := tpuo.mutation.Fails(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldFails,
		})
	}
	if value, ok := tpuo.mutation.AddedFails(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldFails,
		})
	}
	if tpuo.mutation.FailsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: testplan.FieldFails,
		})
	}
	if value, ok := tpuo.mutation.Passes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldPasses,
		})
	}
	if value, ok := tpuo.mutation.AddedPasses(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldPasses,
		})
	}
	if tpuo.mutation.PassesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: testplan.FieldPasses,
		})
	}
	if value, ok := tpuo.mutation.Skips(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldSkips,
		})
	}
	if value, ok := tpuo.mutation.AddedSkips(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldSkips,
		})
	}
	if tpuo.mutation.SkipsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: testplan.FieldSkips,
		})
	}
	if value, ok := tpuo.mutation.RunDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldRunDuration,
		})
	}
	if value, ok := tpuo.mutation.AddedRunDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldRunDuration,
		})
	}
	if tpuo.mutation.RunDurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: testplan.FieldRunDuration,
		})
	}
	if value, ok := tpuo.mutation.Deadline(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldDeadline,
		})
	}
	if value, ok := tpuo.mutation.AddedDeadline(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldDeadline,
		})
	}
	if tpuo.mutation.DeadlineCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: testplan.FieldDeadline,
		})
	}
	if value, ok := tpuo.mutation.Result(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testplan.FieldResult,
		})
	}
	if tpuo.mutation.ResultCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: testplan.FieldResult,
		})
	}
	_spec.Modifiers = tpuo.modifiers
	_node = &TestPlan{config: tpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testplan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
