// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/testplan"
	"github.com/google/uuid"
)

// TestPlanCreate is the builder for creating a TestPlan entity.
type TestPlanCreate struct {
	config
	mutation *TestPlanMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tpc *TestPlanCreate) SetCreatedAt(u uint32) *TestPlanCreate {
	tpc.mutation.SetCreatedAt(u)
	return tpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tpc *TestPlanCreate) SetNillableCreatedAt(u *uint32) *TestPlanCreate {
	if u != nil {
		tpc.SetCreatedAt(*u)
	}
	return tpc
}

// SetUpdatedAt sets the "updated_at" field.
func (tpc *TestPlanCreate) SetUpdatedAt(u uint32) *TestPlanCreate {
	tpc.mutation.SetUpdatedAt(u)
	return tpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tpc *TestPlanCreate) SetNillableUpdatedAt(u *uint32) *TestPlanCreate {
	if u != nil {
		tpc.SetUpdatedAt(*u)
	}
	return tpc
}

// SetDeletedAt sets the "deleted_at" field.
func (tpc *TestPlanCreate) SetDeletedAt(u uint32) *TestPlanCreate {
	tpc.mutation.SetDeletedAt(u)
	return tpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tpc *TestPlanCreate) SetNillableDeletedAt(u *uint32) *TestPlanCreate {
	if u != nil {
		tpc.SetDeletedAt(*u)
	}
	return tpc
}

// SetName sets the "name" field.
func (tpc *TestPlanCreate) SetName(s string) *TestPlanCreate {
	tpc.mutation.SetName(s)
	return tpc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tpc *TestPlanCreate) SetNillableName(s *string) *TestPlanCreate {
	if s != nil {
		tpc.SetName(*s)
	}
	return tpc
}

// SetState sets the "state" field.
func (tpc *TestPlanCreate) SetState(s string) *TestPlanCreate {
	tpc.mutation.SetState(s)
	return tpc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tpc *TestPlanCreate) SetNillableState(s *string) *TestPlanCreate {
	if s != nil {
		tpc.SetState(*s)
	}
	return tpc
}

// SetCreatedBy sets the "created_by" field.
func (tpc *TestPlanCreate) SetCreatedBy(u uuid.UUID) *TestPlanCreate {
	tpc.mutation.SetCreatedBy(u)
	return tpc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tpc *TestPlanCreate) SetNillableCreatedBy(u *uuid.UUID) *TestPlanCreate {
	if u != nil {
		tpc.SetCreatedBy(*u)
	}
	return tpc
}

// SetExecutor sets the "executor" field.
func (tpc *TestPlanCreate) SetExecutor(u uuid.UUID) *TestPlanCreate {
	tpc.mutation.SetExecutor(u)
	return tpc
}

// SetNillableExecutor sets the "executor" field if the given value is not nil.
func (tpc *TestPlanCreate) SetNillableExecutor(u *uuid.UUID) *TestPlanCreate {
	if u != nil {
		tpc.SetExecutor(*u)
	}
	return tpc
}

// SetFails sets the "fails" field.
func (tpc *TestPlanCreate) SetFails(u uint32) *TestPlanCreate {
	tpc.mutation.SetFails(u)
	return tpc
}

// SetNillableFails sets the "fails" field if the given value is not nil.
func (tpc *TestPlanCreate) SetNillableFails(u *uint32) *TestPlanCreate {
	if u != nil {
		tpc.SetFails(*u)
	}
	return tpc
}

// SetPasses sets the "passes" field.
func (tpc *TestPlanCreate) SetPasses(u uint32) *TestPlanCreate {
	tpc.mutation.SetPasses(u)
	return tpc
}

// SetNillablePasses sets the "passes" field if the given value is not nil.
func (tpc *TestPlanCreate) SetNillablePasses(u *uint32) *TestPlanCreate {
	if u != nil {
		tpc.SetPasses(*u)
	}
	return tpc
}

// SetSkips sets the "skips" field.
func (tpc *TestPlanCreate) SetSkips(u uint32) *TestPlanCreate {
	tpc.mutation.SetSkips(u)
	return tpc
}

// SetNillableSkips sets the "skips" field if the given value is not nil.
func (tpc *TestPlanCreate) SetNillableSkips(u *uint32) *TestPlanCreate {
	if u != nil {
		tpc.SetSkips(*u)
	}
	return tpc
}

// SetRunDuration sets the "run_duration" field.
func (tpc *TestPlanCreate) SetRunDuration(u uint32) *TestPlanCreate {
	tpc.mutation.SetRunDuration(u)
	return tpc
}

// SetNillableRunDuration sets the "run_duration" field if the given value is not nil.
func (tpc *TestPlanCreate) SetNillableRunDuration(u *uint32) *TestPlanCreate {
	if u != nil {
		tpc.SetRunDuration(*u)
	}
	return tpc
}

// SetDeadline sets the "deadline" field.
func (tpc *TestPlanCreate) SetDeadline(u uint32) *TestPlanCreate {
	tpc.mutation.SetDeadline(u)
	return tpc
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (tpc *TestPlanCreate) SetNillableDeadline(u *uint32) *TestPlanCreate {
	if u != nil {
		tpc.SetDeadline(*u)
	}
	return tpc
}

// SetResult sets the "result" field.
func (tpc *TestPlanCreate) SetResult(s string) *TestPlanCreate {
	tpc.mutation.SetResult(s)
	return tpc
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (tpc *TestPlanCreate) SetNillableResult(s *string) *TestPlanCreate {
	if s != nil {
		tpc.SetResult(*s)
	}
	return tpc
}

// SetID sets the "id" field.
func (tpc *TestPlanCreate) SetID(u uuid.UUID) *TestPlanCreate {
	tpc.mutation.SetID(u)
	return tpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tpc *TestPlanCreate) SetNillableID(u *uuid.UUID) *TestPlanCreate {
	if u != nil {
		tpc.SetID(*u)
	}
	return tpc
}

// Mutation returns the TestPlanMutation object of the builder.
func (tpc *TestPlanCreate) Mutation() *TestPlanMutation {
	return tpc.mutation
}

// Save creates the TestPlan in the database.
func (tpc *TestPlanCreate) Save(ctx context.Context) (*TestPlan, error) {
	var (
		err  error
		node *TestPlan
	)
	if err := tpc.defaults(); err != nil {
		return nil, err
	}
	if len(tpc.hooks) == 0 {
		if err = tpc.check(); err != nil {
			return nil, err
		}
		node, err = tpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestPlanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tpc.check(); err != nil {
				return nil, err
			}
			tpc.mutation = mutation
			if node, err = tpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tpc.hooks) - 1; i >= 0; i-- {
			if tpc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tpc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tpc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TestPlan)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TestPlanMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tpc *TestPlanCreate) SaveX(ctx context.Context) *TestPlan {
	v, err := tpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tpc *TestPlanCreate) Exec(ctx context.Context) error {
	_, err := tpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpc *TestPlanCreate) ExecX(ctx context.Context) {
	if err := tpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpc *TestPlanCreate) defaults() error {
	if _, ok := tpc.mutation.CreatedAt(); !ok {
		if testplan.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized testplan.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := testplan.DefaultCreatedAt()
		tpc.mutation.SetCreatedAt(v)
	}
	if _, ok := tpc.mutation.UpdatedAt(); !ok {
		if testplan.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized testplan.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := testplan.DefaultUpdatedAt()
		tpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tpc.mutation.DeletedAt(); !ok {
		if testplan.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized testplan.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := testplan.DefaultDeletedAt()
		tpc.mutation.SetDeletedAt(v)
	}
	if _, ok := tpc.mutation.Name(); !ok {
		v := testplan.DefaultName
		tpc.mutation.SetName(v)
	}
	if _, ok := tpc.mutation.State(); !ok {
		v := testplan.DefaultState
		tpc.mutation.SetState(v)
	}
	if _, ok := tpc.mutation.CreatedBy(); !ok {
		if testplan.DefaultCreatedBy == nil {
			return fmt.Errorf("ent: uninitialized testplan.DefaultCreatedBy (forgotten import ent/runtime?)")
		}
		v := testplan.DefaultCreatedBy()
		tpc.mutation.SetCreatedBy(v)
	}
	if _, ok := tpc.mutation.Executor(); !ok {
		if testplan.DefaultExecutor == nil {
			return fmt.Errorf("ent: uninitialized testplan.DefaultExecutor (forgotten import ent/runtime?)")
		}
		v := testplan.DefaultExecutor()
		tpc.mutation.SetExecutor(v)
	}
	if _, ok := tpc.mutation.Fails(); !ok {
		v := testplan.DefaultFails
		tpc.mutation.SetFails(v)
	}
	if _, ok := tpc.mutation.Passes(); !ok {
		v := testplan.DefaultPasses
		tpc.mutation.SetPasses(v)
	}
	if _, ok := tpc.mutation.Skips(); !ok {
		v := testplan.DefaultSkips
		tpc.mutation.SetSkips(v)
	}
	if _, ok := tpc.mutation.RunDuration(); !ok {
		v := testplan.DefaultRunDuration
		tpc.mutation.SetRunDuration(v)
	}
	if _, ok := tpc.mutation.Deadline(); !ok {
		v := testplan.DefaultDeadline
		tpc.mutation.SetDeadline(v)
	}
	if _, ok := tpc.mutation.Result(); !ok {
		v := testplan.DefaultResult
		tpc.mutation.SetResult(v)
	}
	if _, ok := tpc.mutation.ID(); !ok {
		if testplan.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized testplan.DefaultID (forgotten import ent/runtime?)")
		}
		v := testplan.DefaultID()
		tpc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tpc *TestPlanCreate) check() error {
	if _, ok := tpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TestPlan.created_at"`)}
	}
	if _, ok := tpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TestPlan.updated_at"`)}
	}
	if _, ok := tpc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "TestPlan.deleted_at"`)}
	}
	return nil
}

func (tpc *TestPlanCreate) sqlSave(ctx context.Context) (*TestPlan, error) {
	_node, _spec := tpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (tpc *TestPlanCreate) createSpec() (*TestPlan, *sqlgraph.CreateSpec) {
	var (
		_node = &TestPlan{config: tpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: testplan.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: testplan.FieldID,
			},
		}
	)
	_spec.OnConflict = tpc.conflict
	if id, ok := tpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tpc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tpc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tpc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := tpc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testplan.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tpc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testplan.FieldState,
		})
		_node.State = value
	}
	if value, ok := tpc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: testplan.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := tpc.mutation.Executor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: testplan.FieldExecutor,
		})
		_node.Executor = value
	}
	if value, ok := tpc.mutation.Fails(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldFails,
		})
		_node.Fails = value
	}
	if value, ok := tpc.mutation.Passes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldPasses,
		})
		_node.Passes = value
	}
	if value, ok := tpc.mutation.Skips(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldSkips,
		})
		_node.Skips = value
	}
	if value, ok := tpc.mutation.RunDuration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldRunDuration,
		})
		_node.RunDuration = value
	}
	if value, ok := tpc.mutation.Deadline(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: testplan.FieldDeadline,
		})
		_node.Deadline = value
	}
	if value, ok := tpc.mutation.Result(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testplan.FieldResult,
		})
		_node.Result = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TestPlan.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestPlanUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (tpc *TestPlanCreate) OnConflict(opts ...sql.ConflictOption) *TestPlanUpsertOne {
	tpc.conflict = opts
	return &TestPlanUpsertOne{
		create: tpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TestPlan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tpc *TestPlanCreate) OnConflictColumns(columns ...string) *TestPlanUpsertOne {
	tpc.conflict = append(tpc.conflict, sql.ConflictColumns(columns...))
	return &TestPlanUpsertOne{
		create: tpc,
	}
}

type (
	// TestPlanUpsertOne is the builder for "upsert"-ing
	//  one TestPlan node.
	TestPlanUpsertOne struct {
		create *TestPlanCreate
	}

	// TestPlanUpsert is the "OnConflict" setter.
	TestPlanUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *TestPlanUpsert) SetCreatedAt(v uint32) *TestPlanUpsert {
	u.Set(testplan.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TestPlanUpsert) UpdateCreatedAt() *TestPlanUpsert {
	u.SetExcluded(testplan.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TestPlanUpsert) AddCreatedAt(v uint32) *TestPlanUpsert {
	u.Add(testplan.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TestPlanUpsert) SetUpdatedAt(v uint32) *TestPlanUpsert {
	u.Set(testplan.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TestPlanUpsert) UpdateUpdatedAt() *TestPlanUpsert {
	u.SetExcluded(testplan.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TestPlanUpsert) AddUpdatedAt(v uint32) *TestPlanUpsert {
	u.Add(testplan.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TestPlanUpsert) SetDeletedAt(v uint32) *TestPlanUpsert {
	u.Set(testplan.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TestPlanUpsert) UpdateDeletedAt() *TestPlanUpsert {
	u.SetExcluded(testplan.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TestPlanUpsert) AddDeletedAt(v uint32) *TestPlanUpsert {
	u.Add(testplan.FieldDeletedAt, v)
	return u
}

// SetName sets the "name" field.
func (u *TestPlanUpsert) SetName(v string) *TestPlanUpsert {
	u.Set(testplan.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TestPlanUpsert) UpdateName() *TestPlanUpsert {
	u.SetExcluded(testplan.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *TestPlanUpsert) ClearName() *TestPlanUpsert {
	u.SetNull(testplan.FieldName)
	return u
}

// SetState sets the "state" field.
func (u *TestPlanUpsert) SetState(v string) *TestPlanUpsert {
	u.Set(testplan.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *TestPlanUpsert) UpdateState() *TestPlanUpsert {
	u.SetExcluded(testplan.FieldState)
	return u
}

// ClearState clears the value of the "state" field.
func (u *TestPlanUpsert) ClearState() *TestPlanUpsert {
	u.SetNull(testplan.FieldState)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *TestPlanUpsert) SetCreatedBy(v uuid.UUID) *TestPlanUpsert {
	u.Set(testplan.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TestPlanUpsert) UpdateCreatedBy() *TestPlanUpsert {
	u.SetExcluded(testplan.FieldCreatedBy)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *TestPlanUpsert) ClearCreatedBy() *TestPlanUpsert {
	u.SetNull(testplan.FieldCreatedBy)
	return u
}

// SetExecutor sets the "executor" field.
func (u *TestPlanUpsert) SetExecutor(v uuid.UUID) *TestPlanUpsert {
	u.Set(testplan.FieldExecutor, v)
	return u
}

// UpdateExecutor sets the "executor" field to the value that was provided on create.
func (u *TestPlanUpsert) UpdateExecutor() *TestPlanUpsert {
	u.SetExcluded(testplan.FieldExecutor)
	return u
}

// ClearExecutor clears the value of the "executor" field.
func (u *TestPlanUpsert) ClearExecutor() *TestPlanUpsert {
	u.SetNull(testplan.FieldExecutor)
	return u
}

// SetFails sets the "fails" field.
func (u *TestPlanUpsert) SetFails(v uint32) *TestPlanUpsert {
	u.Set(testplan.FieldFails, v)
	return u
}

// UpdateFails sets the "fails" field to the value that was provided on create.
func (u *TestPlanUpsert) UpdateFails() *TestPlanUpsert {
	u.SetExcluded(testplan.FieldFails)
	return u
}

// AddFails adds v to the "fails" field.
func (u *TestPlanUpsert) AddFails(v uint32) *TestPlanUpsert {
	u.Add(testplan.FieldFails, v)
	return u
}

// ClearFails clears the value of the "fails" field.
func (u *TestPlanUpsert) ClearFails() *TestPlanUpsert {
	u.SetNull(testplan.FieldFails)
	return u
}

// SetPasses sets the "passes" field.
func (u *TestPlanUpsert) SetPasses(v uint32) *TestPlanUpsert {
	u.Set(testplan.FieldPasses, v)
	return u
}

// UpdatePasses sets the "passes" field to the value that was provided on create.
func (u *TestPlanUpsert) UpdatePasses() *TestPlanUpsert {
	u.SetExcluded(testplan.FieldPasses)
	return u
}

// AddPasses adds v to the "passes" field.
func (u *TestPlanUpsert) AddPasses(v uint32) *TestPlanUpsert {
	u.Add(testplan.FieldPasses, v)
	return u
}

// ClearPasses clears the value of the "passes" field.
func (u *TestPlanUpsert) ClearPasses() *TestPlanUpsert {
	u.SetNull(testplan.FieldPasses)
	return u
}

// SetSkips sets the "skips" field.
func (u *TestPlanUpsert) SetSkips(v uint32) *TestPlanUpsert {
	u.Set(testplan.FieldSkips, v)
	return u
}

// UpdateSkips sets the "skips" field to the value that was provided on create.
func (u *TestPlanUpsert) UpdateSkips() *TestPlanUpsert {
	u.SetExcluded(testplan.FieldSkips)
	return u
}

// AddSkips adds v to the "skips" field.
func (u *TestPlanUpsert) AddSkips(v uint32) *TestPlanUpsert {
	u.Add(testplan.FieldSkips, v)
	return u
}

// ClearSkips clears the value of the "skips" field.
func (u *TestPlanUpsert) ClearSkips() *TestPlanUpsert {
	u.SetNull(testplan.FieldSkips)
	return u
}

// SetRunDuration sets the "run_duration" field.
func (u *TestPlanUpsert) SetRunDuration(v uint32) *TestPlanUpsert {
	u.Set(testplan.FieldRunDuration, v)
	return u
}

// UpdateRunDuration sets the "run_duration" field to the value that was provided on create.
func (u *TestPlanUpsert) UpdateRunDuration() *TestPlanUpsert {
	u.SetExcluded(testplan.FieldRunDuration)
	return u
}

// AddRunDuration adds v to the "run_duration" field.
func (u *TestPlanUpsert) AddRunDuration(v uint32) *TestPlanUpsert {
	u.Add(testplan.FieldRunDuration, v)
	return u
}

// ClearRunDuration clears the value of the "run_duration" field.
func (u *TestPlanUpsert) ClearRunDuration() *TestPlanUpsert {
	u.SetNull(testplan.FieldRunDuration)
	return u
}

// SetDeadline sets the "deadline" field.
func (u *TestPlanUpsert) SetDeadline(v uint32) *TestPlanUpsert {
	u.Set(testplan.FieldDeadline, v)
	return u
}

// UpdateDeadline sets the "deadline" field to the value that was provided on create.
func (u *TestPlanUpsert) UpdateDeadline() *TestPlanUpsert {
	u.SetExcluded(testplan.FieldDeadline)
	return u
}

// AddDeadline adds v to the "deadline" field.
func (u *TestPlanUpsert) AddDeadline(v uint32) *TestPlanUpsert {
	u.Add(testplan.FieldDeadline, v)
	return u
}

// ClearDeadline clears the value of the "deadline" field.
func (u *TestPlanUpsert) ClearDeadline() *TestPlanUpsert {
	u.SetNull(testplan.FieldDeadline)
	return u
}

// SetResult sets the "result" field.
func (u *TestPlanUpsert) SetResult(v string) *TestPlanUpsert {
	u.Set(testplan.FieldResult, v)
	return u
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *TestPlanUpsert) UpdateResult() *TestPlanUpsert {
	u.SetExcluded(testplan.FieldResult)
	return u
}

// ClearResult clears the value of the "result" field.
func (u *TestPlanUpsert) ClearResult() *TestPlanUpsert {
	u.SetNull(testplan.FieldResult)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TestPlan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(testplan.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TestPlanUpsertOne) UpdateNewValues() *TestPlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(testplan.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TestPlan.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TestPlanUpsertOne) Ignore() *TestPlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestPlanUpsertOne) DoNothing() *TestPlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestPlanCreate.OnConflict
// documentation for more info.
func (u *TestPlanUpsertOne) Update(set func(*TestPlanUpsert)) *TestPlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestPlanUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TestPlanUpsertOne) SetCreatedAt(v uint32) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TestPlanUpsertOne) AddCreatedAt(v uint32) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TestPlanUpsertOne) UpdateCreatedAt() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TestPlanUpsertOne) SetUpdatedAt(v uint32) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TestPlanUpsertOne) AddUpdatedAt(v uint32) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TestPlanUpsertOne) UpdateUpdatedAt() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TestPlanUpsertOne) SetDeletedAt(v uint32) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TestPlanUpsertOne) AddDeletedAt(v uint32) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TestPlanUpsertOne) UpdateDeletedAt() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *TestPlanUpsertOne) SetName(v string) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TestPlanUpsertOne) UpdateName() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TestPlanUpsertOne) ClearName() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.ClearName()
	})
}

// SetState sets the "state" field.
func (u *TestPlanUpsertOne) SetState(v string) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *TestPlanUpsertOne) UpdateState() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *TestPlanUpsertOne) ClearState() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.ClearState()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *TestPlanUpsertOne) SetCreatedBy(v uuid.UUID) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TestPlanUpsertOne) UpdateCreatedBy() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *TestPlanUpsertOne) ClearCreatedBy() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.ClearCreatedBy()
	})
}

// SetExecutor sets the "executor" field.
func (u *TestPlanUpsertOne) SetExecutor(v uuid.UUID) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetExecutor(v)
	})
}

// UpdateExecutor sets the "executor" field to the value that was provided on create.
func (u *TestPlanUpsertOne) UpdateExecutor() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateExecutor()
	})
}

// ClearExecutor clears the value of the "executor" field.
func (u *TestPlanUpsertOne) ClearExecutor() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.ClearExecutor()
	})
}

// SetFails sets the "fails" field.
func (u *TestPlanUpsertOne) SetFails(v uint32) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetFails(v)
	})
}

// AddFails adds v to the "fails" field.
func (u *TestPlanUpsertOne) AddFails(v uint32) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.AddFails(v)
	})
}

// UpdateFails sets the "fails" field to the value that was provided on create.
func (u *TestPlanUpsertOne) UpdateFails() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateFails()
	})
}

// ClearFails clears the value of the "fails" field.
func (u *TestPlanUpsertOne) ClearFails() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.ClearFails()
	})
}

// SetPasses sets the "passes" field.
func (u *TestPlanUpsertOne) SetPasses(v uint32) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetPasses(v)
	})
}

// AddPasses adds v to the "passes" field.
func (u *TestPlanUpsertOne) AddPasses(v uint32) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.AddPasses(v)
	})
}

// UpdatePasses sets the "passes" field to the value that was provided on create.
func (u *TestPlanUpsertOne) UpdatePasses() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdatePasses()
	})
}

// ClearPasses clears the value of the "passes" field.
func (u *TestPlanUpsertOne) ClearPasses() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.ClearPasses()
	})
}

// SetSkips sets the "skips" field.
func (u *TestPlanUpsertOne) SetSkips(v uint32) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetSkips(v)
	})
}

// AddSkips adds v to the "skips" field.
func (u *TestPlanUpsertOne) AddSkips(v uint32) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.AddSkips(v)
	})
}

// UpdateSkips sets the "skips" field to the value that was provided on create.
func (u *TestPlanUpsertOne) UpdateSkips() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateSkips()
	})
}

// ClearSkips clears the value of the "skips" field.
func (u *TestPlanUpsertOne) ClearSkips() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.ClearSkips()
	})
}

// SetRunDuration sets the "run_duration" field.
func (u *TestPlanUpsertOne) SetRunDuration(v uint32) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetRunDuration(v)
	})
}

// AddRunDuration adds v to the "run_duration" field.
func (u *TestPlanUpsertOne) AddRunDuration(v uint32) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.AddRunDuration(v)
	})
}

// UpdateRunDuration sets the "run_duration" field to the value that was provided on create.
func (u *TestPlanUpsertOne) UpdateRunDuration() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateRunDuration()
	})
}

// ClearRunDuration clears the value of the "run_duration" field.
func (u *TestPlanUpsertOne) ClearRunDuration() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.ClearRunDuration()
	})
}

// SetDeadline sets the "deadline" field.
func (u *TestPlanUpsertOne) SetDeadline(v uint32) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetDeadline(v)
	})
}

// AddDeadline adds v to the "deadline" field.
func (u *TestPlanUpsertOne) AddDeadline(v uint32) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.AddDeadline(v)
	})
}

// UpdateDeadline sets the "deadline" field to the value that was provided on create.
func (u *TestPlanUpsertOne) UpdateDeadline() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateDeadline()
	})
}

// ClearDeadline clears the value of the "deadline" field.
func (u *TestPlanUpsertOne) ClearDeadline() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.ClearDeadline()
	})
}

// SetResult sets the "result" field.
func (u *TestPlanUpsertOne) SetResult(v string) *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetResult(v)
	})
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *TestPlanUpsertOne) UpdateResult() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateResult()
	})
}

// ClearResult clears the value of the "result" field.
func (u *TestPlanUpsertOne) ClearResult() *TestPlanUpsertOne {
	return u.Update(func(s *TestPlanUpsert) {
		s.ClearResult()
	})
}

// Exec executes the query.
func (u *TestPlanUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TestPlanCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestPlanUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TestPlanUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TestPlanUpsertOne.ID is not supported by MySQL driver. Use TestPlanUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TestPlanUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TestPlanCreateBulk is the builder for creating many TestPlan entities in bulk.
type TestPlanCreateBulk struct {
	config
	builders []*TestPlanCreate
	conflict []sql.ConflictOption
}

// Save creates the TestPlan entities in the database.
func (tpcb *TestPlanCreateBulk) Save(ctx context.Context) ([]*TestPlan, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tpcb.builders))
	nodes := make([]*TestPlan, len(tpcb.builders))
	mutators := make([]Mutator, len(tpcb.builders))
	for i := range tpcb.builders {
		func(i int, root context.Context) {
			builder := tpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestPlanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tpcb *TestPlanCreateBulk) SaveX(ctx context.Context) []*TestPlan {
	v, err := tpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tpcb *TestPlanCreateBulk) Exec(ctx context.Context) error {
	_, err := tpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpcb *TestPlanCreateBulk) ExecX(ctx context.Context) {
	if err := tpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TestPlan.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TestPlanUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (tpcb *TestPlanCreateBulk) OnConflict(opts ...sql.ConflictOption) *TestPlanUpsertBulk {
	tpcb.conflict = opts
	return &TestPlanUpsertBulk{
		create: tpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TestPlan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tpcb *TestPlanCreateBulk) OnConflictColumns(columns ...string) *TestPlanUpsertBulk {
	tpcb.conflict = append(tpcb.conflict, sql.ConflictColumns(columns...))
	return &TestPlanUpsertBulk{
		create: tpcb,
	}
}

// TestPlanUpsertBulk is the builder for "upsert"-ing
// a bulk of TestPlan nodes.
type TestPlanUpsertBulk struct {
	create *TestPlanCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TestPlan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(testplan.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TestPlanUpsertBulk) UpdateNewValues() *TestPlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(testplan.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TestPlan.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TestPlanUpsertBulk) Ignore() *TestPlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TestPlanUpsertBulk) DoNothing() *TestPlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TestPlanCreateBulk.OnConflict
// documentation for more info.
func (u *TestPlanUpsertBulk) Update(set func(*TestPlanUpsert)) *TestPlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TestPlanUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TestPlanUpsertBulk) SetCreatedAt(v uint32) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TestPlanUpsertBulk) AddCreatedAt(v uint32) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TestPlanUpsertBulk) UpdateCreatedAt() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TestPlanUpsertBulk) SetUpdatedAt(v uint32) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TestPlanUpsertBulk) AddUpdatedAt(v uint32) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TestPlanUpsertBulk) UpdateUpdatedAt() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TestPlanUpsertBulk) SetDeletedAt(v uint32) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TestPlanUpsertBulk) AddDeletedAt(v uint32) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TestPlanUpsertBulk) UpdateDeletedAt() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *TestPlanUpsertBulk) SetName(v string) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TestPlanUpsertBulk) UpdateName() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TestPlanUpsertBulk) ClearName() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.ClearName()
	})
}

// SetState sets the "state" field.
func (u *TestPlanUpsertBulk) SetState(v string) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *TestPlanUpsertBulk) UpdateState() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *TestPlanUpsertBulk) ClearState() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.ClearState()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *TestPlanUpsertBulk) SetCreatedBy(v uuid.UUID) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TestPlanUpsertBulk) UpdateCreatedBy() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *TestPlanUpsertBulk) ClearCreatedBy() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.ClearCreatedBy()
	})
}

// SetExecutor sets the "executor" field.
func (u *TestPlanUpsertBulk) SetExecutor(v uuid.UUID) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetExecutor(v)
	})
}

// UpdateExecutor sets the "executor" field to the value that was provided on create.
func (u *TestPlanUpsertBulk) UpdateExecutor() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateExecutor()
	})
}

// ClearExecutor clears the value of the "executor" field.
func (u *TestPlanUpsertBulk) ClearExecutor() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.ClearExecutor()
	})
}

// SetFails sets the "fails" field.
func (u *TestPlanUpsertBulk) SetFails(v uint32) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetFails(v)
	})
}

// AddFails adds v to the "fails" field.
func (u *TestPlanUpsertBulk) AddFails(v uint32) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.AddFails(v)
	})
}

// UpdateFails sets the "fails" field to the value that was provided on create.
func (u *TestPlanUpsertBulk) UpdateFails() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateFails()
	})
}

// ClearFails clears the value of the "fails" field.
func (u *TestPlanUpsertBulk) ClearFails() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.ClearFails()
	})
}

// SetPasses sets the "passes" field.
func (u *TestPlanUpsertBulk) SetPasses(v uint32) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetPasses(v)
	})
}

// AddPasses adds v to the "passes" field.
func (u *TestPlanUpsertBulk) AddPasses(v uint32) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.AddPasses(v)
	})
}

// UpdatePasses sets the "passes" field to the value that was provided on create.
func (u *TestPlanUpsertBulk) UpdatePasses() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdatePasses()
	})
}

// ClearPasses clears the value of the "passes" field.
func (u *TestPlanUpsertBulk) ClearPasses() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.ClearPasses()
	})
}

// SetSkips sets the "skips" field.
func (u *TestPlanUpsertBulk) SetSkips(v uint32) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetSkips(v)
	})
}

// AddSkips adds v to the "skips" field.
func (u *TestPlanUpsertBulk) AddSkips(v uint32) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.AddSkips(v)
	})
}

// UpdateSkips sets the "skips" field to the value that was provided on create.
func (u *TestPlanUpsertBulk) UpdateSkips() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateSkips()
	})
}

// ClearSkips clears the value of the "skips" field.
func (u *TestPlanUpsertBulk) ClearSkips() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.ClearSkips()
	})
}

// SetRunDuration sets the "run_duration" field.
func (u *TestPlanUpsertBulk) SetRunDuration(v uint32) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetRunDuration(v)
	})
}

// AddRunDuration adds v to the "run_duration" field.
func (u *TestPlanUpsertBulk) AddRunDuration(v uint32) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.AddRunDuration(v)
	})
}

// UpdateRunDuration sets the "run_duration" field to the value that was provided on create.
func (u *TestPlanUpsertBulk) UpdateRunDuration() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateRunDuration()
	})
}

// ClearRunDuration clears the value of the "run_duration" field.
func (u *TestPlanUpsertBulk) ClearRunDuration() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.ClearRunDuration()
	})
}

// SetDeadline sets the "deadline" field.
func (u *TestPlanUpsertBulk) SetDeadline(v uint32) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetDeadline(v)
	})
}

// AddDeadline adds v to the "deadline" field.
func (u *TestPlanUpsertBulk) AddDeadline(v uint32) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.AddDeadline(v)
	})
}

// UpdateDeadline sets the "deadline" field to the value that was provided on create.
func (u *TestPlanUpsertBulk) UpdateDeadline() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateDeadline()
	})
}

// ClearDeadline clears the value of the "deadline" field.
func (u *TestPlanUpsertBulk) ClearDeadline() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.ClearDeadline()
	})
}

// SetResult sets the "result" field.
func (u *TestPlanUpsertBulk) SetResult(v string) *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.SetResult(v)
	})
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *TestPlanUpsertBulk) UpdateResult() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.UpdateResult()
	})
}

// ClearResult clears the value of the "result" field.
func (u *TestPlanUpsertBulk) ClearResult() *TestPlanUpsertBulk {
	return u.Update(func(s *TestPlanUpsert) {
		s.ClearResult()
	})
}

// Exec executes the query.
func (u *TestPlanUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TestPlanCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TestPlanCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TestPlanUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
