// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/migrate"
	"github.com/google/uuid"

	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/cond"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/module"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/planrelatedtestcase"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/testcase"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/testplan"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Cond is the client for interacting with the Cond builders.
	Cond *CondClient
	// Module is the client for interacting with the Module builders.
	Module *ModuleClient
	// PlanRelatedTestCase is the client for interacting with the PlanRelatedTestCase builders.
	PlanRelatedTestCase *PlanRelatedTestCaseClient
	// TestCase is the client for interacting with the TestCase builders.
	TestCase *TestCaseClient
	// TestPlan is the client for interacting with the TestPlan builders.
	TestPlan *TestPlanClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Cond = NewCondClient(c.config)
	c.Module = NewModuleClient(c.config)
	c.PlanRelatedTestCase = NewPlanRelatedTestCaseClient(c.config)
	c.TestCase = NewTestCaseClient(c.config)
	c.TestPlan = NewTestPlanClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Cond:                NewCondClient(cfg),
		Module:              NewModuleClient(cfg),
		PlanRelatedTestCase: NewPlanRelatedTestCaseClient(cfg),
		TestCase:            NewTestCaseClient(cfg),
		TestPlan:            NewTestPlanClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Cond:                NewCondClient(cfg),
		Module:              NewModuleClient(cfg),
		PlanRelatedTestCase: NewPlanRelatedTestCaseClient(cfg),
		TestCase:            NewTestCaseClient(cfg),
		TestPlan:            NewTestPlanClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Cond.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Cond.Use(hooks...)
	c.Module.Use(hooks...)
	c.PlanRelatedTestCase.Use(hooks...)
	c.TestCase.Use(hooks...)
	c.TestPlan.Use(hooks...)
}

// CondClient is a client for the Cond schema.
type CondClient struct {
	config
}

// NewCondClient returns a client for the Cond from the given config.
func NewCondClient(c config) *CondClient {
	return &CondClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cond.Hooks(f(g(h())))`.
func (c *CondClient) Use(hooks ...Hook) {
	c.hooks.Cond = append(c.hooks.Cond, hooks...)
}

// Create returns a builder for creating a Cond entity.
func (c *CondClient) Create() *CondCreate {
	mutation := newCondMutation(c.config, OpCreate)
	return &CondCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cond entities.
func (c *CondClient) CreateBulk(builders ...*CondCreate) *CondCreateBulk {
	return &CondCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cond.
func (c *CondClient) Update() *CondUpdate {
	mutation := newCondMutation(c.config, OpUpdate)
	return &CondUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CondClient) UpdateOne(co *Cond) *CondUpdateOne {
	mutation := newCondMutation(c.config, OpUpdateOne, withCond(co))
	return &CondUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CondClient) UpdateOneID(id uuid.UUID) *CondUpdateOne {
	mutation := newCondMutation(c.config, OpUpdateOne, withCondID(id))
	return &CondUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cond.
func (c *CondClient) Delete() *CondDelete {
	mutation := newCondMutation(c.config, OpDelete)
	return &CondDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CondClient) DeleteOne(co *Cond) *CondDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CondClient) DeleteOneID(id uuid.UUID) *CondDeleteOne {
	builder := c.Delete().Where(cond.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CondDeleteOne{builder}
}

// Query returns a query builder for Cond.
func (c *CondClient) Query() *CondQuery {
	return &CondQuery{
		config: c.config,
	}
}

// Get returns a Cond entity by its id.
func (c *CondClient) Get(ctx context.Context, id uuid.UUID) (*Cond, error) {
	return c.Query().Where(cond.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CondClient) GetX(ctx context.Context, id uuid.UUID) *Cond {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CondClient) Hooks() []Hook {
	hooks := c.hooks.Cond
	return append(hooks[:len(hooks):len(hooks)], cond.Hooks[:]...)
}

// ModuleClient is a client for the Module schema.
type ModuleClient struct {
	config
}

// NewModuleClient returns a client for the Module from the given config.
func NewModuleClient(c config) *ModuleClient {
	return &ModuleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `module.Hooks(f(g(h())))`.
func (c *ModuleClient) Use(hooks ...Hook) {
	c.hooks.Module = append(c.hooks.Module, hooks...)
}

// Create returns a builder for creating a Module entity.
func (c *ModuleClient) Create() *ModuleCreate {
	mutation := newModuleMutation(c.config, OpCreate)
	return &ModuleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Module entities.
func (c *ModuleClient) CreateBulk(builders ...*ModuleCreate) *ModuleCreateBulk {
	return &ModuleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Module.
func (c *ModuleClient) Update() *ModuleUpdate {
	mutation := newModuleMutation(c.config, OpUpdate)
	return &ModuleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ModuleClient) UpdateOne(m *Module) *ModuleUpdateOne {
	mutation := newModuleMutation(c.config, OpUpdateOne, withModule(m))
	return &ModuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ModuleClient) UpdateOneID(id uuid.UUID) *ModuleUpdateOne {
	mutation := newModuleMutation(c.config, OpUpdateOne, withModuleID(id))
	return &ModuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Module.
func (c *ModuleClient) Delete() *ModuleDelete {
	mutation := newModuleMutation(c.config, OpDelete)
	return &ModuleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ModuleClient) DeleteOne(m *Module) *ModuleDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ModuleClient) DeleteOneID(id uuid.UUID) *ModuleDeleteOne {
	builder := c.Delete().Where(module.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ModuleDeleteOne{builder}
}

// Query returns a query builder for Module.
func (c *ModuleClient) Query() *ModuleQuery {
	return &ModuleQuery{
		config: c.config,
	}
}

// Get returns a Module entity by its id.
func (c *ModuleClient) Get(ctx context.Context, id uuid.UUID) (*Module, error) {
	return c.Query().Where(module.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ModuleClient) GetX(ctx context.Context, id uuid.UUID) *Module {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ModuleClient) Hooks() []Hook {
	hooks := c.hooks.Module
	return append(hooks[:len(hooks):len(hooks)], module.Hooks[:]...)
}

// PlanRelatedTestCaseClient is a client for the PlanRelatedTestCase schema.
type PlanRelatedTestCaseClient struct {
	config
}

// NewPlanRelatedTestCaseClient returns a client for the PlanRelatedTestCase from the given config.
func NewPlanRelatedTestCaseClient(c config) *PlanRelatedTestCaseClient {
	return &PlanRelatedTestCaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `planrelatedtestcase.Hooks(f(g(h())))`.
func (c *PlanRelatedTestCaseClient) Use(hooks ...Hook) {
	c.hooks.PlanRelatedTestCase = append(c.hooks.PlanRelatedTestCase, hooks...)
}

// Create returns a builder for creating a PlanRelatedTestCase entity.
func (c *PlanRelatedTestCaseClient) Create() *PlanRelatedTestCaseCreate {
	mutation := newPlanRelatedTestCaseMutation(c.config, OpCreate)
	return &PlanRelatedTestCaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlanRelatedTestCase entities.
func (c *PlanRelatedTestCaseClient) CreateBulk(builders ...*PlanRelatedTestCaseCreate) *PlanRelatedTestCaseCreateBulk {
	return &PlanRelatedTestCaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlanRelatedTestCase.
func (c *PlanRelatedTestCaseClient) Update() *PlanRelatedTestCaseUpdate {
	mutation := newPlanRelatedTestCaseMutation(c.config, OpUpdate)
	return &PlanRelatedTestCaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlanRelatedTestCaseClient) UpdateOne(prtc *PlanRelatedTestCase) *PlanRelatedTestCaseUpdateOne {
	mutation := newPlanRelatedTestCaseMutation(c.config, OpUpdateOne, withPlanRelatedTestCase(prtc))
	return &PlanRelatedTestCaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlanRelatedTestCaseClient) UpdateOneID(id uuid.UUID) *PlanRelatedTestCaseUpdateOne {
	mutation := newPlanRelatedTestCaseMutation(c.config, OpUpdateOne, withPlanRelatedTestCaseID(id))
	return &PlanRelatedTestCaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlanRelatedTestCase.
func (c *PlanRelatedTestCaseClient) Delete() *PlanRelatedTestCaseDelete {
	mutation := newPlanRelatedTestCaseMutation(c.config, OpDelete)
	return &PlanRelatedTestCaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlanRelatedTestCaseClient) DeleteOne(prtc *PlanRelatedTestCase) *PlanRelatedTestCaseDeleteOne {
	return c.DeleteOneID(prtc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PlanRelatedTestCaseClient) DeleteOneID(id uuid.UUID) *PlanRelatedTestCaseDeleteOne {
	builder := c.Delete().Where(planrelatedtestcase.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlanRelatedTestCaseDeleteOne{builder}
}

// Query returns a query builder for PlanRelatedTestCase.
func (c *PlanRelatedTestCaseClient) Query() *PlanRelatedTestCaseQuery {
	return &PlanRelatedTestCaseQuery{
		config: c.config,
	}
}

// Get returns a PlanRelatedTestCase entity by its id.
func (c *PlanRelatedTestCaseClient) Get(ctx context.Context, id uuid.UUID) (*PlanRelatedTestCase, error) {
	return c.Query().Where(planrelatedtestcase.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlanRelatedTestCaseClient) GetX(ctx context.Context, id uuid.UUID) *PlanRelatedTestCase {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PlanRelatedTestCaseClient) Hooks() []Hook {
	hooks := c.hooks.PlanRelatedTestCase
	return append(hooks[:len(hooks):len(hooks)], planrelatedtestcase.Hooks[:]...)
}

// TestCaseClient is a client for the TestCase schema.
type TestCaseClient struct {
	config
}

// NewTestCaseClient returns a client for the TestCase from the given config.
func NewTestCaseClient(c config) *TestCaseClient {
	return &TestCaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `testcase.Hooks(f(g(h())))`.
func (c *TestCaseClient) Use(hooks ...Hook) {
	c.hooks.TestCase = append(c.hooks.TestCase, hooks...)
}

// Create returns a builder for creating a TestCase entity.
func (c *TestCaseClient) Create() *TestCaseCreate {
	mutation := newTestCaseMutation(c.config, OpCreate)
	return &TestCaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TestCase entities.
func (c *TestCaseClient) CreateBulk(builders ...*TestCaseCreate) *TestCaseCreateBulk {
	return &TestCaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TestCase.
func (c *TestCaseClient) Update() *TestCaseUpdate {
	mutation := newTestCaseMutation(c.config, OpUpdate)
	return &TestCaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TestCaseClient) UpdateOne(tc *TestCase) *TestCaseUpdateOne {
	mutation := newTestCaseMutation(c.config, OpUpdateOne, withTestCase(tc))
	return &TestCaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TestCaseClient) UpdateOneID(id uuid.UUID) *TestCaseUpdateOne {
	mutation := newTestCaseMutation(c.config, OpUpdateOne, withTestCaseID(id))
	return &TestCaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TestCase.
func (c *TestCaseClient) Delete() *TestCaseDelete {
	mutation := newTestCaseMutation(c.config, OpDelete)
	return &TestCaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TestCaseClient) DeleteOne(tc *TestCase) *TestCaseDeleteOne {
	return c.DeleteOneID(tc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TestCaseClient) DeleteOneID(id uuid.UUID) *TestCaseDeleteOne {
	builder := c.Delete().Where(testcase.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TestCaseDeleteOne{builder}
}

// Query returns a query builder for TestCase.
func (c *TestCaseClient) Query() *TestCaseQuery {
	return &TestCaseQuery{
		config: c.config,
	}
}

// Get returns a TestCase entity by its id.
func (c *TestCaseClient) Get(ctx context.Context, id uuid.UUID) (*TestCase, error) {
	return c.Query().Where(testcase.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TestCaseClient) GetX(ctx context.Context, id uuid.UUID) *TestCase {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TestCaseClient) Hooks() []Hook {
	hooks := c.hooks.TestCase
	return append(hooks[:len(hooks):len(hooks)], testcase.Hooks[:]...)
}

// TestPlanClient is a client for the TestPlan schema.
type TestPlanClient struct {
	config
}

// NewTestPlanClient returns a client for the TestPlan from the given config.
func NewTestPlanClient(c config) *TestPlanClient {
	return &TestPlanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `testplan.Hooks(f(g(h())))`.
func (c *TestPlanClient) Use(hooks ...Hook) {
	c.hooks.TestPlan = append(c.hooks.TestPlan, hooks...)
}

// Create returns a builder for creating a TestPlan entity.
func (c *TestPlanClient) Create() *TestPlanCreate {
	mutation := newTestPlanMutation(c.config, OpCreate)
	return &TestPlanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TestPlan entities.
func (c *TestPlanClient) CreateBulk(builders ...*TestPlanCreate) *TestPlanCreateBulk {
	return &TestPlanCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TestPlan.
func (c *TestPlanClient) Update() *TestPlanUpdate {
	mutation := newTestPlanMutation(c.config, OpUpdate)
	return &TestPlanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TestPlanClient) UpdateOne(tp *TestPlan) *TestPlanUpdateOne {
	mutation := newTestPlanMutation(c.config, OpUpdateOne, withTestPlan(tp))
	return &TestPlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TestPlanClient) UpdateOneID(id uuid.UUID) *TestPlanUpdateOne {
	mutation := newTestPlanMutation(c.config, OpUpdateOne, withTestPlanID(id))
	return &TestPlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TestPlan.
func (c *TestPlanClient) Delete() *TestPlanDelete {
	mutation := newTestPlanMutation(c.config, OpDelete)
	return &TestPlanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TestPlanClient) DeleteOne(tp *TestPlan) *TestPlanDeleteOne {
	return c.DeleteOneID(tp.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TestPlanClient) DeleteOneID(id uuid.UUID) *TestPlanDeleteOne {
	builder := c.Delete().Where(testplan.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TestPlanDeleteOne{builder}
}

// Query returns a query builder for TestPlan.
func (c *TestPlanClient) Query() *TestPlanQuery {
	return &TestPlanQuery{
		config: c.config,
	}
}

// Get returns a TestPlan entity by its id.
func (c *TestPlanClient) Get(ctx context.Context, id uuid.UUID) (*TestPlan, error) {
	return c.Query().Where(testplan.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TestPlanClient) GetX(ctx context.Context, id uuid.UUID) *TestPlan {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TestPlanClient) Hooks() []Hook {
	hooks := c.hooks.TestPlan
	return append(hooks[:len(hooks):len(hooks)], testplan.Hooks[:]...)
}
