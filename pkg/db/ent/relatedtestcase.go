// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/relatedtestcase"
	"github.com/google/uuid"
)

// RelatedTestCase is the model entity for the RelatedTestCase schema.
type RelatedTestCase struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// CondType holds the value of the "cond_type" field.
	CondType string `json:"cond_type,omitempty"`
	// TestCaseID holds the value of the "test_case_id" field.
	TestCaseID uuid.UUID `json:"test_case_id,omitempty"`
	// RelatedTestCaseID holds the value of the "related_test_case_id" field.
	RelatedTestCaseID uuid.UUID `json:"related_test_case_id,omitempty"`
	// ArgumentsTransfer holds the value of the "arguments_transfer" field.
	ArgumentsTransfer string `json:"arguments_transfer,omitempty"`
	// Index holds the value of the "index" field.
	Index uint32 `json:"index,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RelatedTestCase) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case relatedtestcase.FieldCreatedAt, relatedtestcase.FieldUpdatedAt, relatedtestcase.FieldDeletedAt, relatedtestcase.FieldIndex:
			values[i] = new(sql.NullInt64)
		case relatedtestcase.FieldCondType, relatedtestcase.FieldArgumentsTransfer:
			values[i] = new(sql.NullString)
		case relatedtestcase.FieldID, relatedtestcase.FieldTestCaseID, relatedtestcase.FieldRelatedTestCaseID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RelatedTestCase", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RelatedTestCase fields.
func (rtc *RelatedTestCase) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case relatedtestcase.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rtc.ID = *value
			}
		case relatedtestcase.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rtc.CreatedAt = uint32(value.Int64)
			}
		case relatedtestcase.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rtc.UpdatedAt = uint32(value.Int64)
			}
		case relatedtestcase.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				rtc.DeletedAt = uint32(value.Int64)
			}
		case relatedtestcase.FieldCondType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cond_type", values[i])
			} else if value.Valid {
				rtc.CondType = value.String
			}
		case relatedtestcase.FieldTestCaseID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field test_case_id", values[i])
			} else if value != nil {
				rtc.TestCaseID = *value
			}
		case relatedtestcase.FieldRelatedTestCaseID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field related_test_case_id", values[i])
			} else if value != nil {
				rtc.RelatedTestCaseID = *value
			}
		case relatedtestcase.FieldArgumentsTransfer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field arguments_transfer", values[i])
			} else if value.Valid {
				rtc.ArgumentsTransfer = value.String
			}
		case relatedtestcase.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				rtc.Index = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this RelatedTestCase.
// Note that you need to call RelatedTestCase.Unwrap() before calling this method if this RelatedTestCase
// was returned from a transaction, and the transaction was committed or rolled back.
func (rtc *RelatedTestCase) Update() *RelatedTestCaseUpdateOne {
	return (&RelatedTestCaseClient{config: rtc.config}).UpdateOne(rtc)
}

// Unwrap unwraps the RelatedTestCase entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rtc *RelatedTestCase) Unwrap() *RelatedTestCase {
	_tx, ok := rtc.config.driver.(*txDriver)
	if !ok {
		panic("ent: RelatedTestCase is not a transactional entity")
	}
	rtc.config.driver = _tx.drv
	return rtc
}

// String implements the fmt.Stringer.
func (rtc *RelatedTestCase) String() string {
	var builder strings.Builder
	builder.WriteString("RelatedTestCase(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rtc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", rtc.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", rtc.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", rtc.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("cond_type=")
	builder.WriteString(rtc.CondType)
	builder.WriteString(", ")
	builder.WriteString("test_case_id=")
	builder.WriteString(fmt.Sprintf("%v", rtc.TestCaseID))
	builder.WriteString(", ")
	builder.WriteString("related_test_case_id=")
	builder.WriteString(fmt.Sprintf("%v", rtc.RelatedTestCaseID))
	builder.WriteString(", ")
	builder.WriteString("arguments_transfer=")
	builder.WriteString(rtc.ArgumentsTransfer)
	builder.WriteString(", ")
	builder.WriteString("index=")
	builder.WriteString(fmt.Sprintf("%v", rtc.Index))
	builder.WriteByte(')')
	return builder.String()
}

// RelatedTestCases is a parsable slice of RelatedTestCase.
type RelatedTestCases []*RelatedTestCase

func (rtc RelatedTestCases) config(cfg config) {
	for _i := range rtc {
		rtc[_i].config = cfg
	}
}
