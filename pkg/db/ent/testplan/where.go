// Code generated by ent, DO NOT EDIT.

package testplan

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerID), v))
	})
}

// ResponsibleUserID applies equality check predicate on the "responsible_user_id" field. It's identical to ResponsibleUserIDEQ.
func ResponsibleUserID(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResponsibleUserID), v))
	})
}

// FailedTestCaseCount applies equality check predicate on the "failed_test_case_count" field. It's identical to FailedTestCaseCountEQ.
func FailedTestCaseCount(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFailedTestCaseCount), v))
	})
}

// PassedTestCaseCount applies equality check predicate on the "passed_test_case_count" field. It's identical to PassedTestCaseCountEQ.
func PassedTestCaseCount(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassedTestCaseCount), v))
	})
}

// SkippedTestCaseCount applies equality check predicate on the "skipped_test_case_count" field. It's identical to SkippedTestCaseCountEQ.
func SkippedTestCaseCount(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSkippedTestCaseCount), v))
	})
}

// RunDuration applies equality check predicate on the "run_duration" field. It's identical to RunDurationEQ.
func RunDuration(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRunDuration), v))
	})
}

// Deadline applies equality check predicate on the "deadline" field. It's identical to DeadlineEQ.
func Deadline(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeadline), v))
	})
}

// TestResult applies equality check predicate on the "test_result" field. It's identical to TestResultEQ.
func TestResult(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTestResult), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldState), v))
	})
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldState), v))
	})
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldState), v))
	})
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldState), v))
	})
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldState), v))
	})
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldState), v))
	})
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldState), v))
	})
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldState)))
	})
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldState)))
	})
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldState), v))
	})
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldState), v))
	})
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerID), v))
	})
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOwnerID), v))
	})
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...uuid.UUID) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOwnerID), v...))
	})
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...uuid.UUID) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOwnerID), v...))
	})
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOwnerID), v))
	})
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOwnerID), v))
	})
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOwnerID), v))
	})
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOwnerID), v))
	})
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOwnerID)))
	})
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOwnerID)))
	})
}

// ResponsibleUserIDEQ applies the EQ predicate on the "responsible_user_id" field.
func ResponsibleUserIDEQ(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResponsibleUserID), v))
	})
}

// ResponsibleUserIDNEQ applies the NEQ predicate on the "responsible_user_id" field.
func ResponsibleUserIDNEQ(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResponsibleUserID), v))
	})
}

// ResponsibleUserIDIn applies the In predicate on the "responsible_user_id" field.
func ResponsibleUserIDIn(vs ...uuid.UUID) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldResponsibleUserID), v...))
	})
}

// ResponsibleUserIDNotIn applies the NotIn predicate on the "responsible_user_id" field.
func ResponsibleUserIDNotIn(vs ...uuid.UUID) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldResponsibleUserID), v...))
	})
}

// ResponsibleUserIDGT applies the GT predicate on the "responsible_user_id" field.
func ResponsibleUserIDGT(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResponsibleUserID), v))
	})
}

// ResponsibleUserIDGTE applies the GTE predicate on the "responsible_user_id" field.
func ResponsibleUserIDGTE(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResponsibleUserID), v))
	})
}

// ResponsibleUserIDLT applies the LT predicate on the "responsible_user_id" field.
func ResponsibleUserIDLT(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResponsibleUserID), v))
	})
}

// ResponsibleUserIDLTE applies the LTE predicate on the "responsible_user_id" field.
func ResponsibleUserIDLTE(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResponsibleUserID), v))
	})
}

// ResponsibleUserIDIsNil applies the IsNil predicate on the "responsible_user_id" field.
func ResponsibleUserIDIsNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResponsibleUserID)))
	})
}

// ResponsibleUserIDNotNil applies the NotNil predicate on the "responsible_user_id" field.
func ResponsibleUserIDNotNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResponsibleUserID)))
	})
}

// FailedTestCaseCountEQ applies the EQ predicate on the "failed_test_case_count" field.
func FailedTestCaseCountEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFailedTestCaseCount), v))
	})
}

// FailedTestCaseCountNEQ applies the NEQ predicate on the "failed_test_case_count" field.
func FailedTestCaseCountNEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFailedTestCaseCount), v))
	})
}

// FailedTestCaseCountIn applies the In predicate on the "failed_test_case_count" field.
func FailedTestCaseCountIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFailedTestCaseCount), v...))
	})
}

// FailedTestCaseCountNotIn applies the NotIn predicate on the "failed_test_case_count" field.
func FailedTestCaseCountNotIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFailedTestCaseCount), v...))
	})
}

// FailedTestCaseCountGT applies the GT predicate on the "failed_test_case_count" field.
func FailedTestCaseCountGT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFailedTestCaseCount), v))
	})
}

// FailedTestCaseCountGTE applies the GTE predicate on the "failed_test_case_count" field.
func FailedTestCaseCountGTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFailedTestCaseCount), v))
	})
}

// FailedTestCaseCountLT applies the LT predicate on the "failed_test_case_count" field.
func FailedTestCaseCountLT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFailedTestCaseCount), v))
	})
}

// FailedTestCaseCountLTE applies the LTE predicate on the "failed_test_case_count" field.
func FailedTestCaseCountLTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFailedTestCaseCount), v))
	})
}

// FailedTestCaseCountIsNil applies the IsNil predicate on the "failed_test_case_count" field.
func FailedTestCaseCountIsNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFailedTestCaseCount)))
	})
}

// FailedTestCaseCountNotNil applies the NotNil predicate on the "failed_test_case_count" field.
func FailedTestCaseCountNotNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFailedTestCaseCount)))
	})
}

// PassedTestCaseCountEQ applies the EQ predicate on the "passed_test_case_count" field.
func PassedTestCaseCountEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassedTestCaseCount), v))
	})
}

// PassedTestCaseCountNEQ applies the NEQ predicate on the "passed_test_case_count" field.
func PassedTestCaseCountNEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassedTestCaseCount), v))
	})
}

// PassedTestCaseCountIn applies the In predicate on the "passed_test_case_count" field.
func PassedTestCaseCountIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPassedTestCaseCount), v...))
	})
}

// PassedTestCaseCountNotIn applies the NotIn predicate on the "passed_test_case_count" field.
func PassedTestCaseCountNotIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPassedTestCaseCount), v...))
	})
}

// PassedTestCaseCountGT applies the GT predicate on the "passed_test_case_count" field.
func PassedTestCaseCountGT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassedTestCaseCount), v))
	})
}

// PassedTestCaseCountGTE applies the GTE predicate on the "passed_test_case_count" field.
func PassedTestCaseCountGTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassedTestCaseCount), v))
	})
}

// PassedTestCaseCountLT applies the LT predicate on the "passed_test_case_count" field.
func PassedTestCaseCountLT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassedTestCaseCount), v))
	})
}

// PassedTestCaseCountLTE applies the LTE predicate on the "passed_test_case_count" field.
func PassedTestCaseCountLTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassedTestCaseCount), v))
	})
}

// PassedTestCaseCountIsNil applies the IsNil predicate on the "passed_test_case_count" field.
func PassedTestCaseCountIsNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPassedTestCaseCount)))
	})
}

// PassedTestCaseCountNotNil applies the NotNil predicate on the "passed_test_case_count" field.
func PassedTestCaseCountNotNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPassedTestCaseCount)))
	})
}

// SkippedTestCaseCountEQ applies the EQ predicate on the "skipped_test_case_count" field.
func SkippedTestCaseCountEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSkippedTestCaseCount), v))
	})
}

// SkippedTestCaseCountNEQ applies the NEQ predicate on the "skipped_test_case_count" field.
func SkippedTestCaseCountNEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSkippedTestCaseCount), v))
	})
}

// SkippedTestCaseCountIn applies the In predicate on the "skipped_test_case_count" field.
func SkippedTestCaseCountIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSkippedTestCaseCount), v...))
	})
}

// SkippedTestCaseCountNotIn applies the NotIn predicate on the "skipped_test_case_count" field.
func SkippedTestCaseCountNotIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSkippedTestCaseCount), v...))
	})
}

// SkippedTestCaseCountGT applies the GT predicate on the "skipped_test_case_count" field.
func SkippedTestCaseCountGT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSkippedTestCaseCount), v))
	})
}

// SkippedTestCaseCountGTE applies the GTE predicate on the "skipped_test_case_count" field.
func SkippedTestCaseCountGTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSkippedTestCaseCount), v))
	})
}

// SkippedTestCaseCountLT applies the LT predicate on the "skipped_test_case_count" field.
func SkippedTestCaseCountLT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSkippedTestCaseCount), v))
	})
}

// SkippedTestCaseCountLTE applies the LTE predicate on the "skipped_test_case_count" field.
func SkippedTestCaseCountLTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSkippedTestCaseCount), v))
	})
}

// SkippedTestCaseCountIsNil applies the IsNil predicate on the "skipped_test_case_count" field.
func SkippedTestCaseCountIsNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSkippedTestCaseCount)))
	})
}

// SkippedTestCaseCountNotNil applies the NotNil predicate on the "skipped_test_case_count" field.
func SkippedTestCaseCountNotNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSkippedTestCaseCount)))
	})
}

// RunDurationEQ applies the EQ predicate on the "run_duration" field.
func RunDurationEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRunDuration), v))
	})
}

// RunDurationNEQ applies the NEQ predicate on the "run_duration" field.
func RunDurationNEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRunDuration), v))
	})
}

// RunDurationIn applies the In predicate on the "run_duration" field.
func RunDurationIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRunDuration), v...))
	})
}

// RunDurationNotIn applies the NotIn predicate on the "run_duration" field.
func RunDurationNotIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRunDuration), v...))
	})
}

// RunDurationGT applies the GT predicate on the "run_duration" field.
func RunDurationGT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRunDuration), v))
	})
}

// RunDurationGTE applies the GTE predicate on the "run_duration" field.
func RunDurationGTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRunDuration), v))
	})
}

// RunDurationLT applies the LT predicate on the "run_duration" field.
func RunDurationLT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRunDuration), v))
	})
}

// RunDurationLTE applies the LTE predicate on the "run_duration" field.
func RunDurationLTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRunDuration), v))
	})
}

// RunDurationIsNil applies the IsNil predicate on the "run_duration" field.
func RunDurationIsNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRunDuration)))
	})
}

// RunDurationNotNil applies the NotNil predicate on the "run_duration" field.
func RunDurationNotNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRunDuration)))
	})
}

// DeadlineEQ applies the EQ predicate on the "deadline" field.
func DeadlineEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeadline), v))
	})
}

// DeadlineNEQ applies the NEQ predicate on the "deadline" field.
func DeadlineNEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeadline), v))
	})
}

// DeadlineIn applies the In predicate on the "deadline" field.
func DeadlineIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeadline), v...))
	})
}

// DeadlineNotIn applies the NotIn predicate on the "deadline" field.
func DeadlineNotIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeadline), v...))
	})
}

// DeadlineGT applies the GT predicate on the "deadline" field.
func DeadlineGT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeadline), v))
	})
}

// DeadlineGTE applies the GTE predicate on the "deadline" field.
func DeadlineGTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeadline), v))
	})
}

// DeadlineLT applies the LT predicate on the "deadline" field.
func DeadlineLT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeadline), v))
	})
}

// DeadlineLTE applies the LTE predicate on the "deadline" field.
func DeadlineLTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeadline), v))
	})
}

// DeadlineIsNil applies the IsNil predicate on the "deadline" field.
func DeadlineIsNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeadline)))
	})
}

// DeadlineNotNil applies the NotNil predicate on the "deadline" field.
func DeadlineNotNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeadline)))
	})
}

// TestResultEQ applies the EQ predicate on the "test_result" field.
func TestResultEQ(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTestResult), v))
	})
}

// TestResultNEQ applies the NEQ predicate on the "test_result" field.
func TestResultNEQ(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTestResult), v))
	})
}

// TestResultIn applies the In predicate on the "test_result" field.
func TestResultIn(vs ...string) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTestResult), v...))
	})
}

// TestResultNotIn applies the NotIn predicate on the "test_result" field.
func TestResultNotIn(vs ...string) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTestResult), v...))
	})
}

// TestResultGT applies the GT predicate on the "test_result" field.
func TestResultGT(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTestResult), v))
	})
}

// TestResultGTE applies the GTE predicate on the "test_result" field.
func TestResultGTE(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTestResult), v))
	})
}

// TestResultLT applies the LT predicate on the "test_result" field.
func TestResultLT(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTestResult), v))
	})
}

// TestResultLTE applies the LTE predicate on the "test_result" field.
func TestResultLTE(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTestResult), v))
	})
}

// TestResultContains applies the Contains predicate on the "test_result" field.
func TestResultContains(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTestResult), v))
	})
}

// TestResultHasPrefix applies the HasPrefix predicate on the "test_result" field.
func TestResultHasPrefix(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTestResult), v))
	})
}

// TestResultHasSuffix applies the HasSuffix predicate on the "test_result" field.
func TestResultHasSuffix(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTestResult), v))
	})
}

// TestResultIsNil applies the IsNil predicate on the "test_result" field.
func TestResultIsNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTestResult)))
	})
}

// TestResultNotNil applies the NotNil predicate on the "test_result" field.
func TestResultNotNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTestResult)))
	})
}

// TestResultEqualFold applies the EqualFold predicate on the "test_result" field.
func TestResultEqualFold(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTestResult), v))
	})
}

// TestResultContainsFold applies the ContainsFold predicate on the "test_result" field.
func TestResultContainsFold(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTestResult), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TestPlan) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TestPlan) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TestPlan) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		p(s.Not())
	})
}
