// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/cond"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// CondUpdate is the builder for updating Cond entities.
type CondUpdate struct {
	config
	hooks     []Hook
	mutation  *CondMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CondUpdate builder.
func (cu *CondUpdate) Where(ps ...predicate.Cond) *CondUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CondUpdate) SetCreatedAt(u uint32) *CondUpdate {
	cu.mutation.ResetCreatedAt()
	cu.mutation.SetCreatedAt(u)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CondUpdate) SetNillableCreatedAt(u *uint32) *CondUpdate {
	if u != nil {
		cu.SetCreatedAt(*u)
	}
	return cu
}

// AddCreatedAt adds u to the "created_at" field.
func (cu *CondUpdate) AddCreatedAt(u int32) *CondUpdate {
	cu.mutation.AddCreatedAt(u)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CondUpdate) SetUpdatedAt(u uint32) *CondUpdate {
	cu.mutation.ResetUpdatedAt()
	cu.mutation.SetUpdatedAt(u)
	return cu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cu *CondUpdate) AddUpdatedAt(u int32) *CondUpdate {
	cu.mutation.AddUpdatedAt(u)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CondUpdate) SetDeletedAt(u uint32) *CondUpdate {
	cu.mutation.ResetDeletedAt()
	cu.mutation.SetDeletedAt(u)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CondUpdate) SetNillableDeletedAt(u *uint32) *CondUpdate {
	if u != nil {
		cu.SetDeletedAt(*u)
	}
	return cu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cu *CondUpdate) AddDeletedAt(u int32) *CondUpdate {
	cu.mutation.AddDeletedAt(u)
	return cu
}

// SetCondType sets the "cond_type" field.
func (cu *CondUpdate) SetCondType(s string) *CondUpdate {
	cu.mutation.SetCondType(s)
	return cu
}

// SetNillableCondType sets the "cond_type" field if the given value is not nil.
func (cu *CondUpdate) SetNillableCondType(s *string) *CondUpdate {
	if s != nil {
		cu.SetCondType(*s)
	}
	return cu
}

// ClearCondType clears the value of the "cond_type" field.
func (cu *CondUpdate) ClearCondType() *CondUpdate {
	cu.mutation.ClearCondType()
	return cu
}

// SetTestCaseID sets the "test_case_id" field.
func (cu *CondUpdate) SetTestCaseID(u uuid.UUID) *CondUpdate {
	cu.mutation.SetTestCaseID(u)
	return cu
}

// SetNillableTestCaseID sets the "test_case_id" field if the given value is not nil.
func (cu *CondUpdate) SetNillableTestCaseID(u *uuid.UUID) *CondUpdate {
	if u != nil {
		cu.SetTestCaseID(*u)
	}
	return cu
}

// ClearTestCaseID clears the value of the "test_case_id" field.
func (cu *CondUpdate) ClearTestCaseID() *CondUpdate {
	cu.mutation.ClearTestCaseID()
	return cu
}

// SetCondTestCaseID sets the "cond_test_case_id" field.
func (cu *CondUpdate) SetCondTestCaseID(u uuid.UUID) *CondUpdate {
	cu.mutation.SetCondTestCaseID(u)
	return cu
}

// SetNillableCondTestCaseID sets the "cond_test_case_id" field if the given value is not nil.
func (cu *CondUpdate) SetNillableCondTestCaseID(u *uuid.UUID) *CondUpdate {
	if u != nil {
		cu.SetCondTestCaseID(*u)
	}
	return cu
}

// ClearCondTestCaseID clears the value of the "cond_test_case_id" field.
func (cu *CondUpdate) ClearCondTestCaseID() *CondUpdate {
	cu.mutation.ClearCondTestCaseID()
	return cu
}

// SetArgumentMap sets the "argument_map" field.
func (cu *CondUpdate) SetArgumentMap(s string) *CondUpdate {
	cu.mutation.SetArgumentMap(s)
	return cu
}

// SetNillableArgumentMap sets the "argument_map" field if the given value is not nil.
func (cu *CondUpdate) SetNillableArgumentMap(s *string) *CondUpdate {
	if s != nil {
		cu.SetArgumentMap(*s)
	}
	return cu
}

// ClearArgumentMap clears the value of the "argument_map" field.
func (cu *CondUpdate) ClearArgumentMap() *CondUpdate {
	cu.mutation.ClearArgumentMap()
	return cu
}

// SetIndex sets the "index" field.
func (cu *CondUpdate) SetIndex(u uint32) *CondUpdate {
	cu.mutation.ResetIndex()
	cu.mutation.SetIndex(u)
	return cu
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (cu *CondUpdate) SetNillableIndex(u *uint32) *CondUpdate {
	if u != nil {
		cu.SetIndex(*u)
	}
	return cu
}

// AddIndex adds u to the "index" field.
func (cu *CondUpdate) AddIndex(u int32) *CondUpdate {
	cu.mutation.AddIndex(u)
	return cu
}

// ClearIndex clears the value of the "index" field.
func (cu *CondUpdate) ClearIndex() *CondUpdate {
	cu.mutation.ClearIndex()
	return cu
}

// Mutation returns the CondMutation object of the builder.
func (cu *CondUpdate) Mutation() *CondMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CondUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CondMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CondUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CondUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CondUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CondUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if cond.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized cond.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := cond.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CondUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CondUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CondUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cond.Table,
			Columns: cond.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: cond.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cond.FieldCreatedAt,
		})
	}
	if value, ok := cu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cond.FieldCreatedAt,
		})
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cond.FieldUpdatedAt,
		})
	}
	if value, ok := cu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cond.FieldUpdatedAt,
		})
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cond.FieldDeletedAt,
		})
	}
	if value, ok := cu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cond.FieldDeletedAt,
		})
	}
	if value, ok := cu.mutation.CondType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cond.FieldCondType,
		})
	}
	if cu.mutation.CondTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cond.FieldCondType,
		})
	}
	if value, ok := cu.mutation.TestCaseID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: cond.FieldTestCaseID,
		})
	}
	if cu.mutation.TestCaseIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: cond.FieldTestCaseID,
		})
	}
	if value, ok := cu.mutation.CondTestCaseID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: cond.FieldCondTestCaseID,
		})
	}
	if cu.mutation.CondTestCaseIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: cond.FieldCondTestCaseID,
		})
	}
	if value, ok := cu.mutation.ArgumentMap(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cond.FieldArgumentMap,
		})
	}
	if cu.mutation.ArgumentMapCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cond.FieldArgumentMap,
		})
	}
	if value, ok := cu.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cond.FieldIndex,
		})
	}
	if value, ok := cu.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cond.FieldIndex,
		})
	}
	if cu.mutation.IndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: cond.FieldIndex,
		})
	}
	_spec.Modifiers = cu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cond.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CondUpdateOne is the builder for updating a single Cond entity.
type CondUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CondMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CondUpdateOne) SetCreatedAt(u uint32) *CondUpdateOne {
	cuo.mutation.ResetCreatedAt()
	cuo.mutation.SetCreatedAt(u)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CondUpdateOne) SetNillableCreatedAt(u *uint32) *CondUpdateOne {
	if u != nil {
		cuo.SetCreatedAt(*u)
	}
	return cuo
}

// AddCreatedAt adds u to the "created_at" field.
func (cuo *CondUpdateOne) AddCreatedAt(u int32) *CondUpdateOne {
	cuo.mutation.AddCreatedAt(u)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CondUpdateOne) SetUpdatedAt(u uint32) *CondUpdateOne {
	cuo.mutation.ResetUpdatedAt()
	cuo.mutation.SetUpdatedAt(u)
	return cuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cuo *CondUpdateOne) AddUpdatedAt(u int32) *CondUpdateOne {
	cuo.mutation.AddUpdatedAt(u)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CondUpdateOne) SetDeletedAt(u uint32) *CondUpdateOne {
	cuo.mutation.ResetDeletedAt()
	cuo.mutation.SetDeletedAt(u)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CondUpdateOne) SetNillableDeletedAt(u *uint32) *CondUpdateOne {
	if u != nil {
		cuo.SetDeletedAt(*u)
	}
	return cuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cuo *CondUpdateOne) AddDeletedAt(u int32) *CondUpdateOne {
	cuo.mutation.AddDeletedAt(u)
	return cuo
}

// SetCondType sets the "cond_type" field.
func (cuo *CondUpdateOne) SetCondType(s string) *CondUpdateOne {
	cuo.mutation.SetCondType(s)
	return cuo
}

// SetNillableCondType sets the "cond_type" field if the given value is not nil.
func (cuo *CondUpdateOne) SetNillableCondType(s *string) *CondUpdateOne {
	if s != nil {
		cuo.SetCondType(*s)
	}
	return cuo
}

// ClearCondType clears the value of the "cond_type" field.
func (cuo *CondUpdateOne) ClearCondType() *CondUpdateOne {
	cuo.mutation.ClearCondType()
	return cuo
}

// SetTestCaseID sets the "test_case_id" field.
func (cuo *CondUpdateOne) SetTestCaseID(u uuid.UUID) *CondUpdateOne {
	cuo.mutation.SetTestCaseID(u)
	return cuo
}

// SetNillableTestCaseID sets the "test_case_id" field if the given value is not nil.
func (cuo *CondUpdateOne) SetNillableTestCaseID(u *uuid.UUID) *CondUpdateOne {
	if u != nil {
		cuo.SetTestCaseID(*u)
	}
	return cuo
}

// ClearTestCaseID clears the value of the "test_case_id" field.
func (cuo *CondUpdateOne) ClearTestCaseID() *CondUpdateOne {
	cuo.mutation.ClearTestCaseID()
	return cuo
}

// SetCondTestCaseID sets the "cond_test_case_id" field.
func (cuo *CondUpdateOne) SetCondTestCaseID(u uuid.UUID) *CondUpdateOne {
	cuo.mutation.SetCondTestCaseID(u)
	return cuo
}

// SetNillableCondTestCaseID sets the "cond_test_case_id" field if the given value is not nil.
func (cuo *CondUpdateOne) SetNillableCondTestCaseID(u *uuid.UUID) *CondUpdateOne {
	if u != nil {
		cuo.SetCondTestCaseID(*u)
	}
	return cuo
}

// ClearCondTestCaseID clears the value of the "cond_test_case_id" field.
func (cuo *CondUpdateOne) ClearCondTestCaseID() *CondUpdateOne {
	cuo.mutation.ClearCondTestCaseID()
	return cuo
}

// SetArgumentMap sets the "argument_map" field.
func (cuo *CondUpdateOne) SetArgumentMap(s string) *CondUpdateOne {
	cuo.mutation.SetArgumentMap(s)
	return cuo
}

// SetNillableArgumentMap sets the "argument_map" field if the given value is not nil.
func (cuo *CondUpdateOne) SetNillableArgumentMap(s *string) *CondUpdateOne {
	if s != nil {
		cuo.SetArgumentMap(*s)
	}
	return cuo
}

// ClearArgumentMap clears the value of the "argument_map" field.
func (cuo *CondUpdateOne) ClearArgumentMap() *CondUpdateOne {
	cuo.mutation.ClearArgumentMap()
	return cuo
}

// SetIndex sets the "index" field.
func (cuo *CondUpdateOne) SetIndex(u uint32) *CondUpdateOne {
	cuo.mutation.ResetIndex()
	cuo.mutation.SetIndex(u)
	return cuo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (cuo *CondUpdateOne) SetNillableIndex(u *uint32) *CondUpdateOne {
	if u != nil {
		cuo.SetIndex(*u)
	}
	return cuo
}

// AddIndex adds u to the "index" field.
func (cuo *CondUpdateOne) AddIndex(u int32) *CondUpdateOne {
	cuo.mutation.AddIndex(u)
	return cuo
}

// ClearIndex clears the value of the "index" field.
func (cuo *CondUpdateOne) ClearIndex() *CondUpdateOne {
	cuo.mutation.ClearIndex()
	return cuo
}

// Mutation returns the CondMutation object of the builder.
func (cuo *CondUpdateOne) Mutation() *CondMutation {
	return cuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CondUpdateOne) Select(field string, fields ...string) *CondUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cond entity.
func (cuo *CondUpdateOne) Save(ctx context.Context) (*Cond, error) {
	var (
		err  error
		node *Cond
	)
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CondMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Cond)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CondMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CondUpdateOne) SaveX(ctx context.Context) *Cond {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CondUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CondUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CondUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if cond.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized cond.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := cond.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CondUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CondUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CondUpdateOne) sqlSave(ctx context.Context) (_node *Cond, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cond.Table,
			Columns: cond.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: cond.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Cond.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cond.FieldID)
		for _, f := range fields {
			if !cond.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cond.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cond.FieldCreatedAt,
		})
	}
	if value, ok := cuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cond.FieldCreatedAt,
		})
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cond.FieldUpdatedAt,
		})
	}
	if value, ok := cuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cond.FieldUpdatedAt,
		})
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cond.FieldDeletedAt,
		})
	}
	if value, ok := cuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cond.FieldDeletedAt,
		})
	}
	if value, ok := cuo.mutation.CondType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cond.FieldCondType,
		})
	}
	if cuo.mutation.CondTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cond.FieldCondType,
		})
	}
	if value, ok := cuo.mutation.TestCaseID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: cond.FieldTestCaseID,
		})
	}
	if cuo.mutation.TestCaseIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: cond.FieldTestCaseID,
		})
	}
	if value, ok := cuo.mutation.CondTestCaseID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: cond.FieldCondTestCaseID,
		})
	}
	if cuo.mutation.CondTestCaseIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: cond.FieldCondTestCaseID,
		})
	}
	if value, ok := cuo.mutation.ArgumentMap(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cond.FieldArgumentMap,
		})
	}
	if cuo.mutation.ArgumentMapCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cond.FieldArgumentMap,
		})
	}
	if value, ok := cuo.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cond.FieldIndex,
		})
	}
	if value, ok := cuo.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cond.FieldIndex,
		})
	}
	if cuo.mutation.IndexCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: cond.FieldIndex,
		})
	}
	_spec.Modifiers = cuo.modifiers
	_node = &Cond{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cond.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
