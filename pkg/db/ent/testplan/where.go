// Code generated by ent, DO NOT EDIT.

package testplan

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// Executor applies equality check predicate on the "executor" field. It's identical to ExecutorEQ.
func Executor(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExecutor), v))
	})
}

// Fails applies equality check predicate on the "fails" field. It's identical to FailsEQ.
func Fails(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFails), v))
	})
}

// Passes applies equality check predicate on the "passes" field. It's identical to PassesEQ.
func Passes(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPasses), v))
	})
}

// Skips applies equality check predicate on the "skips" field. It's identical to SkipsEQ.
func Skips(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSkips), v))
	})
}

// RunDuration applies equality check predicate on the "run_duration" field. It's identical to RunDurationEQ.
func RunDuration(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRunDuration), v))
	})
}

// Deadline applies equality check predicate on the "deadline" field. It's identical to DeadlineEQ.
func Deadline(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeadline), v))
	})
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResult), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldState), v))
	})
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldState), v))
	})
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldState), v))
	})
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldState), v))
	})
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldState), v))
	})
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldState), v))
	})
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldState), v))
	})
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldState)))
	})
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldState)))
	})
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldState), v))
	})
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldState), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uuid.UUID) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uuid.UUID) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedBy)))
	})
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedBy)))
	})
}

// ExecutorEQ applies the EQ predicate on the "executor" field.
func ExecutorEQ(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExecutor), v))
	})
}

// ExecutorNEQ applies the NEQ predicate on the "executor" field.
func ExecutorNEQ(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExecutor), v))
	})
}

// ExecutorIn applies the In predicate on the "executor" field.
func ExecutorIn(vs ...uuid.UUID) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExecutor), v...))
	})
}

// ExecutorNotIn applies the NotIn predicate on the "executor" field.
func ExecutorNotIn(vs ...uuid.UUID) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExecutor), v...))
	})
}

// ExecutorGT applies the GT predicate on the "executor" field.
func ExecutorGT(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExecutor), v))
	})
}

// ExecutorGTE applies the GTE predicate on the "executor" field.
func ExecutorGTE(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExecutor), v))
	})
}

// ExecutorLT applies the LT predicate on the "executor" field.
func ExecutorLT(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExecutor), v))
	})
}

// ExecutorLTE applies the LTE predicate on the "executor" field.
func ExecutorLTE(v uuid.UUID) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExecutor), v))
	})
}

// ExecutorIsNil applies the IsNil predicate on the "executor" field.
func ExecutorIsNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExecutor)))
	})
}

// ExecutorNotNil applies the NotNil predicate on the "executor" field.
func ExecutorNotNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExecutor)))
	})
}

// FailsEQ applies the EQ predicate on the "fails" field.
func FailsEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFails), v))
	})
}

// FailsNEQ applies the NEQ predicate on the "fails" field.
func FailsNEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFails), v))
	})
}

// FailsIn applies the In predicate on the "fails" field.
func FailsIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFails), v...))
	})
}

// FailsNotIn applies the NotIn predicate on the "fails" field.
func FailsNotIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFails), v...))
	})
}

// FailsGT applies the GT predicate on the "fails" field.
func FailsGT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFails), v))
	})
}

// FailsGTE applies the GTE predicate on the "fails" field.
func FailsGTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFails), v))
	})
}

// FailsLT applies the LT predicate on the "fails" field.
func FailsLT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFails), v))
	})
}

// FailsLTE applies the LTE predicate on the "fails" field.
func FailsLTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFails), v))
	})
}

// FailsIsNil applies the IsNil predicate on the "fails" field.
func FailsIsNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFails)))
	})
}

// FailsNotNil applies the NotNil predicate on the "fails" field.
func FailsNotNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFails)))
	})
}

// PassesEQ applies the EQ predicate on the "passes" field.
func PassesEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPasses), v))
	})
}

// PassesNEQ applies the NEQ predicate on the "passes" field.
func PassesNEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPasses), v))
	})
}

// PassesIn applies the In predicate on the "passes" field.
func PassesIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPasses), v...))
	})
}

// PassesNotIn applies the NotIn predicate on the "passes" field.
func PassesNotIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPasses), v...))
	})
}

// PassesGT applies the GT predicate on the "passes" field.
func PassesGT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPasses), v))
	})
}

// PassesGTE applies the GTE predicate on the "passes" field.
func PassesGTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPasses), v))
	})
}

// PassesLT applies the LT predicate on the "passes" field.
func PassesLT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPasses), v))
	})
}

// PassesLTE applies the LTE predicate on the "passes" field.
func PassesLTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPasses), v))
	})
}

// PassesIsNil applies the IsNil predicate on the "passes" field.
func PassesIsNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPasses)))
	})
}

// PassesNotNil applies the NotNil predicate on the "passes" field.
func PassesNotNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPasses)))
	})
}

// SkipsEQ applies the EQ predicate on the "skips" field.
func SkipsEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSkips), v))
	})
}

// SkipsNEQ applies the NEQ predicate on the "skips" field.
func SkipsNEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSkips), v))
	})
}

// SkipsIn applies the In predicate on the "skips" field.
func SkipsIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSkips), v...))
	})
}

// SkipsNotIn applies the NotIn predicate on the "skips" field.
func SkipsNotIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSkips), v...))
	})
}

// SkipsGT applies the GT predicate on the "skips" field.
func SkipsGT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSkips), v))
	})
}

// SkipsGTE applies the GTE predicate on the "skips" field.
func SkipsGTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSkips), v))
	})
}

// SkipsLT applies the LT predicate on the "skips" field.
func SkipsLT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSkips), v))
	})
}

// SkipsLTE applies the LTE predicate on the "skips" field.
func SkipsLTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSkips), v))
	})
}

// SkipsIsNil applies the IsNil predicate on the "skips" field.
func SkipsIsNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSkips)))
	})
}

// SkipsNotNil applies the NotNil predicate on the "skips" field.
func SkipsNotNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSkips)))
	})
}

// RunDurationEQ applies the EQ predicate on the "run_duration" field.
func RunDurationEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRunDuration), v))
	})
}

// RunDurationNEQ applies the NEQ predicate on the "run_duration" field.
func RunDurationNEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRunDuration), v))
	})
}

// RunDurationIn applies the In predicate on the "run_duration" field.
func RunDurationIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRunDuration), v...))
	})
}

// RunDurationNotIn applies the NotIn predicate on the "run_duration" field.
func RunDurationNotIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRunDuration), v...))
	})
}

// RunDurationGT applies the GT predicate on the "run_duration" field.
func RunDurationGT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRunDuration), v))
	})
}

// RunDurationGTE applies the GTE predicate on the "run_duration" field.
func RunDurationGTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRunDuration), v))
	})
}

// RunDurationLT applies the LT predicate on the "run_duration" field.
func RunDurationLT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRunDuration), v))
	})
}

// RunDurationLTE applies the LTE predicate on the "run_duration" field.
func RunDurationLTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRunDuration), v))
	})
}

// RunDurationIsNil applies the IsNil predicate on the "run_duration" field.
func RunDurationIsNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRunDuration)))
	})
}

// RunDurationNotNil applies the NotNil predicate on the "run_duration" field.
func RunDurationNotNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRunDuration)))
	})
}

// DeadlineEQ applies the EQ predicate on the "deadline" field.
func DeadlineEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeadline), v))
	})
}

// DeadlineNEQ applies the NEQ predicate on the "deadline" field.
func DeadlineNEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeadline), v))
	})
}

// DeadlineIn applies the In predicate on the "deadline" field.
func DeadlineIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeadline), v...))
	})
}

// DeadlineNotIn applies the NotIn predicate on the "deadline" field.
func DeadlineNotIn(vs ...uint32) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeadline), v...))
	})
}

// DeadlineGT applies the GT predicate on the "deadline" field.
func DeadlineGT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeadline), v))
	})
}

// DeadlineGTE applies the GTE predicate on the "deadline" field.
func DeadlineGTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeadline), v))
	})
}

// DeadlineLT applies the LT predicate on the "deadline" field.
func DeadlineLT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeadline), v))
	})
}

// DeadlineLTE applies the LTE predicate on the "deadline" field.
func DeadlineLTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeadline), v))
	})
}

// DeadlineIsNil applies the IsNil predicate on the "deadline" field.
func DeadlineIsNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeadline)))
	})
}

// DeadlineNotNil applies the NotNil predicate on the "deadline" field.
func DeadlineNotNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeadline)))
	})
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResult), v))
	})
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResult), v))
	})
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...string) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldResult), v...))
	})
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...string) predicate.TestPlan {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldResult), v...))
	})
}

// ResultGT applies the GT predicate on the "result" field.
func ResultGT(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResult), v))
	})
}

// ResultGTE applies the GTE predicate on the "result" field.
func ResultGTE(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResult), v))
	})
}

// ResultLT applies the LT predicate on the "result" field.
func ResultLT(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResult), v))
	})
}

// ResultLTE applies the LTE predicate on the "result" field.
func ResultLTE(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResult), v))
	})
}

// ResultContains applies the Contains predicate on the "result" field.
func ResultContains(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResult), v))
	})
}

// ResultHasPrefix applies the HasPrefix predicate on the "result" field.
func ResultHasPrefix(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResult), v))
	})
}

// ResultHasSuffix applies the HasSuffix predicate on the "result" field.
func ResultHasSuffix(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResult), v))
	})
}

// ResultIsNil applies the IsNil predicate on the "result" field.
func ResultIsNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResult)))
	})
}

// ResultNotNil applies the NotNil predicate on the "result" field.
func ResultNotNil() predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResult)))
	})
}

// ResultEqualFold applies the EqualFold predicate on the "result" field.
func ResultEqualFold(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResult), v))
	})
}

// ResultContainsFold applies the ContainsFold predicate on the "result" field.
func ResultContainsFold(v string) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResult), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TestPlan) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TestPlan) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TestPlan) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		p(s.Not())
	})
}
