// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/plantestcase"
	"github.com/google/uuid"
)

// PlanTestCaseCreate is the builder for creating a PlanTestCase entity.
type PlanTestCaseCreate struct {
	config
	mutation *PlanTestCaseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ptcc *PlanTestCaseCreate) SetCreatedAt(u uint32) *PlanTestCaseCreate {
	ptcc.mutation.SetCreatedAt(u)
	return ptcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptcc *PlanTestCaseCreate) SetNillableCreatedAt(u *uint32) *PlanTestCaseCreate {
	if u != nil {
		ptcc.SetCreatedAt(*u)
	}
	return ptcc
}

// SetUpdatedAt sets the "updated_at" field.
func (ptcc *PlanTestCaseCreate) SetUpdatedAt(u uint32) *PlanTestCaseCreate {
	ptcc.mutation.SetUpdatedAt(u)
	return ptcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ptcc *PlanTestCaseCreate) SetNillableUpdatedAt(u *uint32) *PlanTestCaseCreate {
	if u != nil {
		ptcc.SetUpdatedAt(*u)
	}
	return ptcc
}

// SetDeletedAt sets the "deleted_at" field.
func (ptcc *PlanTestCaseCreate) SetDeletedAt(u uint32) *PlanTestCaseCreate {
	ptcc.mutation.SetDeletedAt(u)
	return ptcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ptcc *PlanTestCaseCreate) SetNillableDeletedAt(u *uint32) *PlanTestCaseCreate {
	if u != nil {
		ptcc.SetDeletedAt(*u)
	}
	return ptcc
}

// SetTestPlanID sets the "test_plan_id" field.
func (ptcc *PlanTestCaseCreate) SetTestPlanID(u uuid.UUID) *PlanTestCaseCreate {
	ptcc.mutation.SetTestPlanID(u)
	return ptcc
}

// SetNillableTestPlanID sets the "test_plan_id" field if the given value is not nil.
func (ptcc *PlanTestCaseCreate) SetNillableTestPlanID(u *uuid.UUID) *PlanTestCaseCreate {
	if u != nil {
		ptcc.SetTestPlanID(*u)
	}
	return ptcc
}

// SetTestCaseID sets the "test_case_id" field.
func (ptcc *PlanTestCaseCreate) SetTestCaseID(u uuid.UUID) *PlanTestCaseCreate {
	ptcc.mutation.SetTestCaseID(u)
	return ptcc
}

// SetNillableTestCaseID sets the "test_case_id" field if the given value is not nil.
func (ptcc *PlanTestCaseCreate) SetNillableTestCaseID(u *uuid.UUID) *PlanTestCaseCreate {
	if u != nil {
		ptcc.SetTestCaseID(*u)
	}
	return ptcc
}

// SetTestCaseOutput sets the "test_case_output" field.
func (ptcc *PlanTestCaseCreate) SetTestCaseOutput(s string) *PlanTestCaseCreate {
	ptcc.mutation.SetTestCaseOutput(s)
	return ptcc
}

// SetNillableTestCaseOutput sets the "test_case_output" field if the given value is not nil.
func (ptcc *PlanTestCaseCreate) SetNillableTestCaseOutput(s *string) *PlanTestCaseCreate {
	if s != nil {
		ptcc.SetTestCaseOutput(*s)
	}
	return ptcc
}

// SetDescription sets the "description" field.
func (ptcc *PlanTestCaseCreate) SetDescription(s string) *PlanTestCaseCreate {
	ptcc.mutation.SetDescription(s)
	return ptcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptcc *PlanTestCaseCreate) SetNillableDescription(s *string) *PlanTestCaseCreate {
	if s != nil {
		ptcc.SetDescription(*s)
	}
	return ptcc
}

// SetTestUserID sets the "test_user_id" field.
func (ptcc *PlanTestCaseCreate) SetTestUserID(u uuid.UUID) *PlanTestCaseCreate {
	ptcc.mutation.SetTestUserID(u)
	return ptcc
}

// SetNillableTestUserID sets the "test_user_id" field if the given value is not nil.
func (ptcc *PlanTestCaseCreate) SetNillableTestUserID(u *uuid.UUID) *PlanTestCaseCreate {
	if u != nil {
		ptcc.SetTestUserID(*u)
	}
	return ptcc
}

// SetRunDuration sets the "run_duration" field.
func (ptcc *PlanTestCaseCreate) SetRunDuration(u uint32) *PlanTestCaseCreate {
	ptcc.mutation.SetRunDuration(u)
	return ptcc
}

// SetNillableRunDuration sets the "run_duration" field if the given value is not nil.
func (ptcc *PlanTestCaseCreate) SetNillableRunDuration(u *uint32) *PlanTestCaseCreate {
	if u != nil {
		ptcc.SetRunDuration(*u)
	}
	return ptcc
}

// SetResult sets the "result" field.
func (ptcc *PlanTestCaseCreate) SetResult(s string) *PlanTestCaseCreate {
	ptcc.mutation.SetResult(s)
	return ptcc
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (ptcc *PlanTestCaseCreate) SetNillableResult(s *string) *PlanTestCaseCreate {
	if s != nil {
		ptcc.SetResult(*s)
	}
	return ptcc
}

// SetIndex sets the "index" field.
func (ptcc *PlanTestCaseCreate) SetIndex(u uint32) *PlanTestCaseCreate {
	ptcc.mutation.SetIndex(u)
	return ptcc
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (ptcc *PlanTestCaseCreate) SetNillableIndex(u *uint32) *PlanTestCaseCreate {
	if u != nil {
		ptcc.SetIndex(*u)
	}
	return ptcc
}

// SetID sets the "id" field.
func (ptcc *PlanTestCaseCreate) SetID(u uuid.UUID) *PlanTestCaseCreate {
	ptcc.mutation.SetID(u)
	return ptcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ptcc *PlanTestCaseCreate) SetNillableID(u *uuid.UUID) *PlanTestCaseCreate {
	if u != nil {
		ptcc.SetID(*u)
	}
	return ptcc
}

// Mutation returns the PlanTestCaseMutation object of the builder.
func (ptcc *PlanTestCaseCreate) Mutation() *PlanTestCaseMutation {
	return ptcc.mutation
}

// Save creates the PlanTestCase in the database.
func (ptcc *PlanTestCaseCreate) Save(ctx context.Context) (*PlanTestCase, error) {
	var (
		err  error
		node *PlanTestCase
	)
	if err := ptcc.defaults(); err != nil {
		return nil, err
	}
	if len(ptcc.hooks) == 0 {
		if err = ptcc.check(); err != nil {
			return nil, err
		}
		node, err = ptcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlanTestCaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ptcc.check(); err != nil {
				return nil, err
			}
			ptcc.mutation = mutation
			if node, err = ptcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ptcc.hooks) - 1; i >= 0; i-- {
			if ptcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ptcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ptcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PlanTestCase)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PlanTestCaseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ptcc *PlanTestCaseCreate) SaveX(ctx context.Context) *PlanTestCase {
	v, err := ptcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcc *PlanTestCaseCreate) Exec(ctx context.Context) error {
	_, err := ptcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcc *PlanTestCaseCreate) ExecX(ctx context.Context) {
	if err := ptcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptcc *PlanTestCaseCreate) defaults() error {
	if _, ok := ptcc.mutation.CreatedAt(); !ok {
		if plantestcase.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized plantestcase.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := plantestcase.DefaultCreatedAt()
		ptcc.mutation.SetCreatedAt(v)
	}
	if _, ok := ptcc.mutation.UpdatedAt(); !ok {
		if plantestcase.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized plantestcase.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := plantestcase.DefaultUpdatedAt()
		ptcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ptcc.mutation.DeletedAt(); !ok {
		if plantestcase.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized plantestcase.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := plantestcase.DefaultDeletedAt()
		ptcc.mutation.SetDeletedAt(v)
	}
	if _, ok := ptcc.mutation.TestPlanID(); !ok {
		if plantestcase.DefaultTestPlanID == nil {
			return fmt.Errorf("ent: uninitialized plantestcase.DefaultTestPlanID (forgotten import ent/runtime?)")
		}
		v := plantestcase.DefaultTestPlanID()
		ptcc.mutation.SetTestPlanID(v)
	}
	if _, ok := ptcc.mutation.TestCaseID(); !ok {
		if plantestcase.DefaultTestCaseID == nil {
			return fmt.Errorf("ent: uninitialized plantestcase.DefaultTestCaseID (forgotten import ent/runtime?)")
		}
		v := plantestcase.DefaultTestCaseID()
		ptcc.mutation.SetTestCaseID(v)
	}
	if _, ok := ptcc.mutation.TestCaseOutput(); !ok {
		v := plantestcase.DefaultTestCaseOutput
		ptcc.mutation.SetTestCaseOutput(v)
	}
	if _, ok := ptcc.mutation.Description(); !ok {
		v := plantestcase.DefaultDescription
		ptcc.mutation.SetDescription(v)
	}
	if _, ok := ptcc.mutation.TestUserID(); !ok {
		if plantestcase.DefaultTestUserID == nil {
			return fmt.Errorf("ent: uninitialized plantestcase.DefaultTestUserID (forgotten import ent/runtime?)")
		}
		v := plantestcase.DefaultTestUserID()
		ptcc.mutation.SetTestUserID(v)
	}
	if _, ok := ptcc.mutation.RunDuration(); !ok {
		v := plantestcase.DefaultRunDuration
		ptcc.mutation.SetRunDuration(v)
	}
	if _, ok := ptcc.mutation.Result(); !ok {
		v := plantestcase.DefaultResult
		ptcc.mutation.SetResult(v)
	}
	if _, ok := ptcc.mutation.Index(); !ok {
		v := plantestcase.DefaultIndex
		ptcc.mutation.SetIndex(v)
	}
	if _, ok := ptcc.mutation.ID(); !ok {
		if plantestcase.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized plantestcase.DefaultID (forgotten import ent/runtime?)")
		}
		v := plantestcase.DefaultID()
		ptcc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ptcc *PlanTestCaseCreate) check() error {
	if _, ok := ptcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PlanTestCase.created_at"`)}
	}
	if _, ok := ptcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PlanTestCase.updated_at"`)}
	}
	if _, ok := ptcc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "PlanTestCase.deleted_at"`)}
	}
	return nil
}

func (ptcc *PlanTestCaseCreate) sqlSave(ctx context.Context) (*PlanTestCase, error) {
	_node, _spec := ptcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ptcc *PlanTestCaseCreate) createSpec() (*PlanTestCase, *sqlgraph.CreateSpec) {
	var (
		_node = &PlanTestCase{config: ptcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: plantestcase.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: plantestcase.FieldID,
			},
		}
	)
	_spec.OnConflict = ptcc.conflict
	if id, ok := ptcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ptcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: plantestcase.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ptcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: plantestcase.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ptcc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: plantestcase.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := ptcc.mutation.TestPlanID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: plantestcase.FieldTestPlanID,
		})
		_node.TestPlanID = value
	}
	if value, ok := ptcc.mutation.TestCaseID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: plantestcase.FieldTestCaseID,
		})
		_node.TestCaseID = value
	}
	if value, ok := ptcc.mutation.TestCaseOutput(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: plantestcase.FieldTestCaseOutput,
		})
		_node.TestCaseOutput = value
	}
	if value, ok := ptcc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: plantestcase.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := ptcc.mutation.TestUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: plantestcase.FieldTestUserID,
		})
		_node.TestUserID = value
	}
	if value, ok := ptcc.mutation.RunDuration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: plantestcase.FieldRunDuration,
		})
		_node.RunDuration = value
	}
	if value, ok := ptcc.mutation.Result(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: plantestcase.FieldResult,
		})
		_node.Result = value
	}
	if value, ok := ptcc.mutation.Index(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: plantestcase.FieldIndex,
		})
		_node.Index = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PlanTestCase.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlanTestCaseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ptcc *PlanTestCaseCreate) OnConflict(opts ...sql.ConflictOption) *PlanTestCaseUpsertOne {
	ptcc.conflict = opts
	return &PlanTestCaseUpsertOne{
		create: ptcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PlanTestCase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ptcc *PlanTestCaseCreate) OnConflictColumns(columns ...string) *PlanTestCaseUpsertOne {
	ptcc.conflict = append(ptcc.conflict, sql.ConflictColumns(columns...))
	return &PlanTestCaseUpsertOne{
		create: ptcc,
	}
}

type (
	// PlanTestCaseUpsertOne is the builder for "upsert"-ing
	//  one PlanTestCase node.
	PlanTestCaseUpsertOne struct {
		create *PlanTestCaseCreate
	}

	// PlanTestCaseUpsert is the "OnConflict" setter.
	PlanTestCaseUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PlanTestCaseUpsert) SetCreatedAt(v uint32) *PlanTestCaseUpsert {
	u.Set(plantestcase.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PlanTestCaseUpsert) UpdateCreatedAt() *PlanTestCaseUpsert {
	u.SetExcluded(plantestcase.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PlanTestCaseUpsert) AddCreatedAt(v uint32) *PlanTestCaseUpsert {
	u.Add(plantestcase.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanTestCaseUpsert) SetUpdatedAt(v uint32) *PlanTestCaseUpsert {
	u.Set(plantestcase.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanTestCaseUpsert) UpdateUpdatedAt() *PlanTestCaseUpsert {
	u.SetExcluded(plantestcase.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PlanTestCaseUpsert) AddUpdatedAt(v uint32) *PlanTestCaseUpsert {
	u.Add(plantestcase.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlanTestCaseUpsert) SetDeletedAt(v uint32) *PlanTestCaseUpsert {
	u.Set(plantestcase.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlanTestCaseUpsert) UpdateDeletedAt() *PlanTestCaseUpsert {
	u.SetExcluded(plantestcase.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PlanTestCaseUpsert) AddDeletedAt(v uint32) *PlanTestCaseUpsert {
	u.Add(plantestcase.FieldDeletedAt, v)
	return u
}

// SetTestPlanID sets the "test_plan_id" field.
func (u *PlanTestCaseUpsert) SetTestPlanID(v uuid.UUID) *PlanTestCaseUpsert {
	u.Set(plantestcase.FieldTestPlanID, v)
	return u
}

// UpdateTestPlanID sets the "test_plan_id" field to the value that was provided on create.
func (u *PlanTestCaseUpsert) UpdateTestPlanID() *PlanTestCaseUpsert {
	u.SetExcluded(plantestcase.FieldTestPlanID)
	return u
}

// ClearTestPlanID clears the value of the "test_plan_id" field.
func (u *PlanTestCaseUpsert) ClearTestPlanID() *PlanTestCaseUpsert {
	u.SetNull(plantestcase.FieldTestPlanID)
	return u
}

// SetTestCaseID sets the "test_case_id" field.
func (u *PlanTestCaseUpsert) SetTestCaseID(v uuid.UUID) *PlanTestCaseUpsert {
	u.Set(plantestcase.FieldTestCaseID, v)
	return u
}

// UpdateTestCaseID sets the "test_case_id" field to the value that was provided on create.
func (u *PlanTestCaseUpsert) UpdateTestCaseID() *PlanTestCaseUpsert {
	u.SetExcluded(plantestcase.FieldTestCaseID)
	return u
}

// ClearTestCaseID clears the value of the "test_case_id" field.
func (u *PlanTestCaseUpsert) ClearTestCaseID() *PlanTestCaseUpsert {
	u.SetNull(plantestcase.FieldTestCaseID)
	return u
}

// SetTestCaseOutput sets the "test_case_output" field.
func (u *PlanTestCaseUpsert) SetTestCaseOutput(v string) *PlanTestCaseUpsert {
	u.Set(plantestcase.FieldTestCaseOutput, v)
	return u
}

// UpdateTestCaseOutput sets the "test_case_output" field to the value that was provided on create.
func (u *PlanTestCaseUpsert) UpdateTestCaseOutput() *PlanTestCaseUpsert {
	u.SetExcluded(plantestcase.FieldTestCaseOutput)
	return u
}

// ClearTestCaseOutput clears the value of the "test_case_output" field.
func (u *PlanTestCaseUpsert) ClearTestCaseOutput() *PlanTestCaseUpsert {
	u.SetNull(plantestcase.FieldTestCaseOutput)
	return u
}

// SetDescription sets the "description" field.
func (u *PlanTestCaseUpsert) SetDescription(v string) *PlanTestCaseUpsert {
	u.Set(plantestcase.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PlanTestCaseUpsert) UpdateDescription() *PlanTestCaseUpsert {
	u.SetExcluded(plantestcase.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *PlanTestCaseUpsert) ClearDescription() *PlanTestCaseUpsert {
	u.SetNull(plantestcase.FieldDescription)
	return u
}

// SetTestUserID sets the "test_user_id" field.
func (u *PlanTestCaseUpsert) SetTestUserID(v uuid.UUID) *PlanTestCaseUpsert {
	u.Set(plantestcase.FieldTestUserID, v)
	return u
}

// UpdateTestUserID sets the "test_user_id" field to the value that was provided on create.
func (u *PlanTestCaseUpsert) UpdateTestUserID() *PlanTestCaseUpsert {
	u.SetExcluded(plantestcase.FieldTestUserID)
	return u
}

// ClearTestUserID clears the value of the "test_user_id" field.
func (u *PlanTestCaseUpsert) ClearTestUserID() *PlanTestCaseUpsert {
	u.SetNull(plantestcase.FieldTestUserID)
	return u
}

// SetRunDuration sets the "run_duration" field.
func (u *PlanTestCaseUpsert) SetRunDuration(v uint32) *PlanTestCaseUpsert {
	u.Set(plantestcase.FieldRunDuration, v)
	return u
}

// UpdateRunDuration sets the "run_duration" field to the value that was provided on create.
func (u *PlanTestCaseUpsert) UpdateRunDuration() *PlanTestCaseUpsert {
	u.SetExcluded(plantestcase.FieldRunDuration)
	return u
}

// AddRunDuration adds v to the "run_duration" field.
func (u *PlanTestCaseUpsert) AddRunDuration(v uint32) *PlanTestCaseUpsert {
	u.Add(plantestcase.FieldRunDuration, v)
	return u
}

// ClearRunDuration clears the value of the "run_duration" field.
func (u *PlanTestCaseUpsert) ClearRunDuration() *PlanTestCaseUpsert {
	u.SetNull(plantestcase.FieldRunDuration)
	return u
}

// SetResult sets the "result" field.
func (u *PlanTestCaseUpsert) SetResult(v string) *PlanTestCaseUpsert {
	u.Set(plantestcase.FieldResult, v)
	return u
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *PlanTestCaseUpsert) UpdateResult() *PlanTestCaseUpsert {
	u.SetExcluded(plantestcase.FieldResult)
	return u
}

// ClearResult clears the value of the "result" field.
func (u *PlanTestCaseUpsert) ClearResult() *PlanTestCaseUpsert {
	u.SetNull(plantestcase.FieldResult)
	return u
}

// SetIndex sets the "index" field.
func (u *PlanTestCaseUpsert) SetIndex(v uint32) *PlanTestCaseUpsert {
	u.Set(plantestcase.FieldIndex, v)
	return u
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *PlanTestCaseUpsert) UpdateIndex() *PlanTestCaseUpsert {
	u.SetExcluded(plantestcase.FieldIndex)
	return u
}

// AddIndex adds v to the "index" field.
func (u *PlanTestCaseUpsert) AddIndex(v uint32) *PlanTestCaseUpsert {
	u.Add(plantestcase.FieldIndex, v)
	return u
}

// ClearIndex clears the value of the "index" field.
func (u *PlanTestCaseUpsert) ClearIndex() *PlanTestCaseUpsert {
	u.SetNull(plantestcase.FieldIndex)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PlanTestCase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(plantestcase.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PlanTestCaseUpsertOne) UpdateNewValues() *PlanTestCaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(plantestcase.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.PlanTestCase.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PlanTestCaseUpsertOne) Ignore() *PlanTestCaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlanTestCaseUpsertOne) DoNothing() *PlanTestCaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlanTestCaseCreate.OnConflict
// documentation for more info.
func (u *PlanTestCaseUpsertOne) Update(set func(*PlanTestCaseUpsert)) *PlanTestCaseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlanTestCaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PlanTestCaseUpsertOne) SetCreatedAt(v uint32) *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PlanTestCaseUpsertOne) AddCreatedAt(v uint32) *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PlanTestCaseUpsertOne) UpdateCreatedAt() *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanTestCaseUpsertOne) SetUpdatedAt(v uint32) *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PlanTestCaseUpsertOne) AddUpdatedAt(v uint32) *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanTestCaseUpsertOne) UpdateUpdatedAt() *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlanTestCaseUpsertOne) SetDeletedAt(v uint32) *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PlanTestCaseUpsertOne) AddDeletedAt(v uint32) *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlanTestCaseUpsertOne) UpdateDeletedAt() *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetTestPlanID sets the "test_plan_id" field.
func (u *PlanTestCaseUpsertOne) SetTestPlanID(v uuid.UUID) *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetTestPlanID(v)
	})
}

// UpdateTestPlanID sets the "test_plan_id" field to the value that was provided on create.
func (u *PlanTestCaseUpsertOne) UpdateTestPlanID() *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateTestPlanID()
	})
}

// ClearTestPlanID clears the value of the "test_plan_id" field.
func (u *PlanTestCaseUpsertOne) ClearTestPlanID() *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.ClearTestPlanID()
	})
}

// SetTestCaseID sets the "test_case_id" field.
func (u *PlanTestCaseUpsertOne) SetTestCaseID(v uuid.UUID) *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetTestCaseID(v)
	})
}

// UpdateTestCaseID sets the "test_case_id" field to the value that was provided on create.
func (u *PlanTestCaseUpsertOne) UpdateTestCaseID() *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateTestCaseID()
	})
}

// ClearTestCaseID clears the value of the "test_case_id" field.
func (u *PlanTestCaseUpsertOne) ClearTestCaseID() *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.ClearTestCaseID()
	})
}

// SetTestCaseOutput sets the "test_case_output" field.
func (u *PlanTestCaseUpsertOne) SetTestCaseOutput(v string) *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetTestCaseOutput(v)
	})
}

// UpdateTestCaseOutput sets the "test_case_output" field to the value that was provided on create.
func (u *PlanTestCaseUpsertOne) UpdateTestCaseOutput() *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateTestCaseOutput()
	})
}

// ClearTestCaseOutput clears the value of the "test_case_output" field.
func (u *PlanTestCaseUpsertOne) ClearTestCaseOutput() *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.ClearTestCaseOutput()
	})
}

// SetDescription sets the "description" field.
func (u *PlanTestCaseUpsertOne) SetDescription(v string) *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PlanTestCaseUpsertOne) UpdateDescription() *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PlanTestCaseUpsertOne) ClearDescription() *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.ClearDescription()
	})
}

// SetTestUserID sets the "test_user_id" field.
func (u *PlanTestCaseUpsertOne) SetTestUserID(v uuid.UUID) *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetTestUserID(v)
	})
}

// UpdateTestUserID sets the "test_user_id" field to the value that was provided on create.
func (u *PlanTestCaseUpsertOne) UpdateTestUserID() *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateTestUserID()
	})
}

// ClearTestUserID clears the value of the "test_user_id" field.
func (u *PlanTestCaseUpsertOne) ClearTestUserID() *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.ClearTestUserID()
	})
}

// SetRunDuration sets the "run_duration" field.
func (u *PlanTestCaseUpsertOne) SetRunDuration(v uint32) *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetRunDuration(v)
	})
}

// AddRunDuration adds v to the "run_duration" field.
func (u *PlanTestCaseUpsertOne) AddRunDuration(v uint32) *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.AddRunDuration(v)
	})
}

// UpdateRunDuration sets the "run_duration" field to the value that was provided on create.
func (u *PlanTestCaseUpsertOne) UpdateRunDuration() *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateRunDuration()
	})
}

// ClearRunDuration clears the value of the "run_duration" field.
func (u *PlanTestCaseUpsertOne) ClearRunDuration() *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.ClearRunDuration()
	})
}

// SetResult sets the "result" field.
func (u *PlanTestCaseUpsertOne) SetResult(v string) *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetResult(v)
	})
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *PlanTestCaseUpsertOne) UpdateResult() *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateResult()
	})
}

// ClearResult clears the value of the "result" field.
func (u *PlanTestCaseUpsertOne) ClearResult() *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.ClearResult()
	})
}

// SetIndex sets the "index" field.
func (u *PlanTestCaseUpsertOne) SetIndex(v uint32) *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *PlanTestCaseUpsertOne) AddIndex(v uint32) *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *PlanTestCaseUpsertOne) UpdateIndex() *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *PlanTestCaseUpsertOne) ClearIndex() *PlanTestCaseUpsertOne {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.ClearIndex()
	})
}

// Exec executes the query.
func (u *PlanTestCaseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlanTestCaseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlanTestCaseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PlanTestCaseUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PlanTestCaseUpsertOne.ID is not supported by MySQL driver. Use PlanTestCaseUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PlanTestCaseUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PlanTestCaseCreateBulk is the builder for creating many PlanTestCase entities in bulk.
type PlanTestCaseCreateBulk struct {
	config
	builders []*PlanTestCaseCreate
	conflict []sql.ConflictOption
}

// Save creates the PlanTestCase entities in the database.
func (ptccb *PlanTestCaseCreateBulk) Save(ctx context.Context) ([]*PlanTestCase, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ptccb.builders))
	nodes := make([]*PlanTestCase, len(ptccb.builders))
	mutators := make([]Mutator, len(ptccb.builders))
	for i := range ptccb.builders {
		func(i int, root context.Context) {
			builder := ptccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlanTestCaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ptccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptccb *PlanTestCaseCreateBulk) SaveX(ctx context.Context) []*PlanTestCase {
	v, err := ptccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptccb *PlanTestCaseCreateBulk) Exec(ctx context.Context) error {
	_, err := ptccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptccb *PlanTestCaseCreateBulk) ExecX(ctx context.Context) {
	if err := ptccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PlanTestCase.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlanTestCaseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ptccb *PlanTestCaseCreateBulk) OnConflict(opts ...sql.ConflictOption) *PlanTestCaseUpsertBulk {
	ptccb.conflict = opts
	return &PlanTestCaseUpsertBulk{
		create: ptccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PlanTestCase.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ptccb *PlanTestCaseCreateBulk) OnConflictColumns(columns ...string) *PlanTestCaseUpsertBulk {
	ptccb.conflict = append(ptccb.conflict, sql.ConflictColumns(columns...))
	return &PlanTestCaseUpsertBulk{
		create: ptccb,
	}
}

// PlanTestCaseUpsertBulk is the builder for "upsert"-ing
// a bulk of PlanTestCase nodes.
type PlanTestCaseUpsertBulk struct {
	create *PlanTestCaseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PlanTestCase.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(plantestcase.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PlanTestCaseUpsertBulk) UpdateNewValues() *PlanTestCaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(plantestcase.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PlanTestCase.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PlanTestCaseUpsertBulk) Ignore() *PlanTestCaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlanTestCaseUpsertBulk) DoNothing() *PlanTestCaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlanTestCaseCreateBulk.OnConflict
// documentation for more info.
func (u *PlanTestCaseUpsertBulk) Update(set func(*PlanTestCaseUpsert)) *PlanTestCaseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlanTestCaseUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PlanTestCaseUpsertBulk) SetCreatedAt(v uint32) *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *PlanTestCaseUpsertBulk) AddCreatedAt(v uint32) *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PlanTestCaseUpsertBulk) UpdateCreatedAt() *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanTestCaseUpsertBulk) SetUpdatedAt(v uint32) *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *PlanTestCaseUpsertBulk) AddUpdatedAt(v uint32) *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanTestCaseUpsertBulk) UpdateUpdatedAt() *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlanTestCaseUpsertBulk) SetDeletedAt(v uint32) *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *PlanTestCaseUpsertBulk) AddDeletedAt(v uint32) *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlanTestCaseUpsertBulk) UpdateDeletedAt() *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetTestPlanID sets the "test_plan_id" field.
func (u *PlanTestCaseUpsertBulk) SetTestPlanID(v uuid.UUID) *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetTestPlanID(v)
	})
}

// UpdateTestPlanID sets the "test_plan_id" field to the value that was provided on create.
func (u *PlanTestCaseUpsertBulk) UpdateTestPlanID() *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateTestPlanID()
	})
}

// ClearTestPlanID clears the value of the "test_plan_id" field.
func (u *PlanTestCaseUpsertBulk) ClearTestPlanID() *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.ClearTestPlanID()
	})
}

// SetTestCaseID sets the "test_case_id" field.
func (u *PlanTestCaseUpsertBulk) SetTestCaseID(v uuid.UUID) *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetTestCaseID(v)
	})
}

// UpdateTestCaseID sets the "test_case_id" field to the value that was provided on create.
func (u *PlanTestCaseUpsertBulk) UpdateTestCaseID() *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateTestCaseID()
	})
}

// ClearTestCaseID clears the value of the "test_case_id" field.
func (u *PlanTestCaseUpsertBulk) ClearTestCaseID() *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.ClearTestCaseID()
	})
}

// SetTestCaseOutput sets the "test_case_output" field.
func (u *PlanTestCaseUpsertBulk) SetTestCaseOutput(v string) *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetTestCaseOutput(v)
	})
}

// UpdateTestCaseOutput sets the "test_case_output" field to the value that was provided on create.
func (u *PlanTestCaseUpsertBulk) UpdateTestCaseOutput() *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateTestCaseOutput()
	})
}

// ClearTestCaseOutput clears the value of the "test_case_output" field.
func (u *PlanTestCaseUpsertBulk) ClearTestCaseOutput() *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.ClearTestCaseOutput()
	})
}

// SetDescription sets the "description" field.
func (u *PlanTestCaseUpsertBulk) SetDescription(v string) *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PlanTestCaseUpsertBulk) UpdateDescription() *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PlanTestCaseUpsertBulk) ClearDescription() *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.ClearDescription()
	})
}

// SetTestUserID sets the "test_user_id" field.
func (u *PlanTestCaseUpsertBulk) SetTestUserID(v uuid.UUID) *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetTestUserID(v)
	})
}

// UpdateTestUserID sets the "test_user_id" field to the value that was provided on create.
func (u *PlanTestCaseUpsertBulk) UpdateTestUserID() *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateTestUserID()
	})
}

// ClearTestUserID clears the value of the "test_user_id" field.
func (u *PlanTestCaseUpsertBulk) ClearTestUserID() *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.ClearTestUserID()
	})
}

// SetRunDuration sets the "run_duration" field.
func (u *PlanTestCaseUpsertBulk) SetRunDuration(v uint32) *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetRunDuration(v)
	})
}

// AddRunDuration adds v to the "run_duration" field.
func (u *PlanTestCaseUpsertBulk) AddRunDuration(v uint32) *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.AddRunDuration(v)
	})
}

// UpdateRunDuration sets the "run_duration" field to the value that was provided on create.
func (u *PlanTestCaseUpsertBulk) UpdateRunDuration() *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateRunDuration()
	})
}

// ClearRunDuration clears the value of the "run_duration" field.
func (u *PlanTestCaseUpsertBulk) ClearRunDuration() *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.ClearRunDuration()
	})
}

// SetResult sets the "result" field.
func (u *PlanTestCaseUpsertBulk) SetResult(v string) *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetResult(v)
	})
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *PlanTestCaseUpsertBulk) UpdateResult() *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateResult()
	})
}

// ClearResult clears the value of the "result" field.
func (u *PlanTestCaseUpsertBulk) ClearResult() *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.ClearResult()
	})
}

// SetIndex sets the "index" field.
func (u *PlanTestCaseUpsertBulk) SetIndex(v uint32) *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *PlanTestCaseUpsertBulk) AddIndex(v uint32) *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *PlanTestCaseUpsertBulk) UpdateIndex() *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *PlanTestCaseUpsertBulk) ClearIndex() *PlanTestCaseUpsertBulk {
	return u.Update(func(s *PlanTestCaseUpsert) {
		s.ClearIndex()
	})
}

// Exec executes the query.
func (u *PlanTestCaseUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PlanTestCaseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlanTestCaseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlanTestCaseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
