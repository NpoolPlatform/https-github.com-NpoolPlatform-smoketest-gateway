// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/cond"
	"github.com/google/uuid"
)

// Cond is the model entity for the Cond schema.
type Cond struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// CondType holds the value of the "cond_type" field.
	CondType string `json:"cond_type,omitempty"`
	// TestCaseID holds the value of the "test_case_id" field.
	TestCaseID uuid.UUID `json:"test_case_id,omitempty"`
	// CondTestCaseID holds the value of the "cond_test_case_id" field.
	CondTestCaseID uuid.UUID `json:"cond_test_case_id,omitempty"`
	// ArgumentMap holds the value of the "argument_map" field.
	ArgumentMap string `json:"argument_map,omitempty"`
	// Index holds the value of the "index" field.
	Index uint32 `json:"index,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cond) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cond.FieldCreatedAt, cond.FieldUpdatedAt, cond.FieldDeletedAt, cond.FieldIndex:
			values[i] = new(sql.NullInt64)
		case cond.FieldCondType, cond.FieldArgumentMap:
			values[i] = new(sql.NullString)
		case cond.FieldID, cond.FieldTestCaseID, cond.FieldCondTestCaseID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Cond", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cond fields.
func (c *Cond) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cond.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case cond.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = uint32(value.Int64)
			}
		case cond.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = uint32(value.Int64)
			}
		case cond.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = uint32(value.Int64)
			}
		case cond.FieldCondType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cond_type", values[i])
			} else if value.Valid {
				c.CondType = value.String
			}
		case cond.FieldTestCaseID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field test_case_id", values[i])
			} else if value != nil {
				c.TestCaseID = *value
			}
		case cond.FieldCondTestCaseID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field cond_test_case_id", values[i])
			} else if value != nil {
				c.CondTestCaseID = *value
			}
		case cond.FieldArgumentMap:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field argument_map", values[i])
			} else if value.Valid {
				c.ArgumentMap = value.String
			}
		case cond.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				c.Index = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Cond.
// Note that you need to call Cond.Unwrap() before calling this method if this Cond
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cond) Update() *CondUpdateOne {
	return (&CondClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Cond entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cond) Unwrap() *Cond {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cond is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cond) String() string {
	var builder strings.Builder
	builder.WriteString("Cond(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", c.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", c.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", c.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("cond_type=")
	builder.WriteString(c.CondType)
	builder.WriteString(", ")
	builder.WriteString("test_case_id=")
	builder.WriteString(fmt.Sprintf("%v", c.TestCaseID))
	builder.WriteString(", ")
	builder.WriteString("cond_test_case_id=")
	builder.WriteString(fmt.Sprintf("%v", c.CondTestCaseID))
	builder.WriteString(", ")
	builder.WriteString("argument_map=")
	builder.WriteString(c.ArgumentMap)
	builder.WriteString(", ")
	builder.WriteString("index=")
	builder.WriteString(fmt.Sprintf("%v", c.Index))
	builder.WriteByte(')')
	return builder.String()
}

// Conds is a parsable slice of Cond.
type Conds []*Cond

func (c Conds) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
