// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/smoketest-middleware/pkg/db/ent/cond"
	"github.com/google/uuid"
)

// CondCreate is the builder for creating a Cond entity.
type CondCreate struct {
	config
	mutation *CondMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CondCreate) SetCreatedAt(u uint32) *CondCreate {
	cc.mutation.SetCreatedAt(u)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CondCreate) SetNillableCreatedAt(u *uint32) *CondCreate {
	if u != nil {
		cc.SetCreatedAt(*u)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CondCreate) SetUpdatedAt(u uint32) *CondCreate {
	cc.mutation.SetUpdatedAt(u)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CondCreate) SetNillableUpdatedAt(u *uint32) *CondCreate {
	if u != nil {
		cc.SetUpdatedAt(*u)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CondCreate) SetDeletedAt(u uint32) *CondCreate {
	cc.mutation.SetDeletedAt(u)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CondCreate) SetNillableDeletedAt(u *uint32) *CondCreate {
	if u != nil {
		cc.SetDeletedAt(*u)
	}
	return cc
}

// SetEntID sets the "ent_id" field.
func (cc *CondCreate) SetEntID(u uuid.UUID) *CondCreate {
	cc.mutation.SetEntID(u)
	return cc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cc *CondCreate) SetNillableEntID(u *uuid.UUID) *CondCreate {
	if u != nil {
		cc.SetEntID(*u)
	}
	return cc
}

// SetCondType sets the "cond_type" field.
func (cc *CondCreate) SetCondType(s string) *CondCreate {
	cc.mutation.SetCondType(s)
	return cc
}

// SetNillableCondType sets the "cond_type" field if the given value is not nil.
func (cc *CondCreate) SetNillableCondType(s *string) *CondCreate {
	if s != nil {
		cc.SetCondType(*s)
	}
	return cc
}

// SetTestCaseID sets the "test_case_id" field.
func (cc *CondCreate) SetTestCaseID(u uuid.UUID) *CondCreate {
	cc.mutation.SetTestCaseID(u)
	return cc
}

// SetNillableTestCaseID sets the "test_case_id" field if the given value is not nil.
func (cc *CondCreate) SetNillableTestCaseID(u *uuid.UUID) *CondCreate {
	if u != nil {
		cc.SetTestCaseID(*u)
	}
	return cc
}

// SetCondTestCaseID sets the "cond_test_case_id" field.
func (cc *CondCreate) SetCondTestCaseID(u uuid.UUID) *CondCreate {
	cc.mutation.SetCondTestCaseID(u)
	return cc
}

// SetNillableCondTestCaseID sets the "cond_test_case_id" field if the given value is not nil.
func (cc *CondCreate) SetNillableCondTestCaseID(u *uuid.UUID) *CondCreate {
	if u != nil {
		cc.SetCondTestCaseID(*u)
	}
	return cc
}

// SetArgumentMap sets the "argument_map" field.
func (cc *CondCreate) SetArgumentMap(s string) *CondCreate {
	cc.mutation.SetArgumentMap(s)
	return cc
}

// SetNillableArgumentMap sets the "argument_map" field if the given value is not nil.
func (cc *CondCreate) SetNillableArgumentMap(s *string) *CondCreate {
	if s != nil {
		cc.SetArgumentMap(*s)
	}
	return cc
}

// SetIndex sets the "index" field.
func (cc *CondCreate) SetIndex(u uint32) *CondCreate {
	cc.mutation.SetIndex(u)
	return cc
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (cc *CondCreate) SetNillableIndex(u *uint32) *CondCreate {
	if u != nil {
		cc.SetIndex(*u)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CondCreate) SetID(u uint32) *CondCreate {
	cc.mutation.SetID(u)
	return cc
}

// Mutation returns the CondMutation object of the builder.
func (cc *CondCreate) Mutation() *CondMutation {
	return cc.mutation
}

// Save creates the Cond in the database.
func (cc *CondCreate) Save(ctx context.Context) (*Cond, error) {
	var (
		err  error
		node *Cond
	)
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CondMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Cond)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CondMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CondCreate) SaveX(ctx context.Context) *Cond {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CondCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CondCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CondCreate) defaults() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		if cond.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized cond.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := cond.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		if cond.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized cond.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := cond.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.DeletedAt(); !ok {
		if cond.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized cond.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := cond.DefaultDeletedAt()
		cc.mutation.SetDeletedAt(v)
	}
	if _, ok := cc.mutation.EntID(); !ok {
		if cond.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized cond.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := cond.DefaultEntID()
		cc.mutation.SetEntID(v)
	}
	if _, ok := cc.mutation.CondType(); !ok {
		v := cond.DefaultCondType
		cc.mutation.SetCondType(v)
	}
	if _, ok := cc.mutation.TestCaseID(); !ok {
		if cond.DefaultTestCaseID == nil {
			return fmt.Errorf("ent: uninitialized cond.DefaultTestCaseID (forgotten import ent/runtime?)")
		}
		v := cond.DefaultTestCaseID()
		cc.mutation.SetTestCaseID(v)
	}
	if _, ok := cc.mutation.CondTestCaseID(); !ok {
		if cond.DefaultCondTestCaseID == nil {
			return fmt.Errorf("ent: uninitialized cond.DefaultCondTestCaseID (forgotten import ent/runtime?)")
		}
		v := cond.DefaultCondTestCaseID()
		cc.mutation.SetCondTestCaseID(v)
	}
	if _, ok := cc.mutation.ArgumentMap(); !ok {
		v := cond.DefaultArgumentMap
		cc.mutation.SetArgumentMap(v)
	}
	if _, ok := cc.mutation.Index(); !ok {
		v := cond.DefaultIndex
		cc.mutation.SetIndex(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *CondCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Cond.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Cond.updated_at"`)}
	}
	if _, ok := cc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Cond.deleted_at"`)}
	}
	if _, ok := cc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "Cond.ent_id"`)}
	}
	return nil
}

func (cc *CondCreate) sqlSave(ctx context.Context) (*Cond, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (cc *CondCreate) createSpec() (*Cond, *sqlgraph.CreateSpec) {
	var (
		_node = &Cond{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cond.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: cond.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cond.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cond.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cond.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := cc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: cond.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := cc.mutation.CondType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cond.FieldCondType,
		})
		_node.CondType = value
	}
	if value, ok := cc.mutation.TestCaseID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: cond.FieldTestCaseID,
		})
		_node.TestCaseID = value
	}
	if value, ok := cc.mutation.CondTestCaseID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: cond.FieldCondTestCaseID,
		})
		_node.CondTestCaseID = value
	}
	if value, ok := cc.mutation.ArgumentMap(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cond.FieldArgumentMap,
		})
		_node.ArgumentMap = value
	}
	if value, ok := cc.mutation.Index(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: cond.FieldIndex,
		})
		_node.Index = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Cond.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CondUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cc *CondCreate) OnConflict(opts ...sql.ConflictOption) *CondUpsertOne {
	cc.conflict = opts
	return &CondUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Cond.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cc *CondCreate) OnConflictColumns(columns ...string) *CondUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CondUpsertOne{
		create: cc,
	}
}

type (
	// CondUpsertOne is the builder for "upsert"-ing
	//  one Cond node.
	CondUpsertOne struct {
		create *CondCreate
	}

	// CondUpsert is the "OnConflict" setter.
	CondUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CondUpsert) SetCreatedAt(v uint32) *CondUpsert {
	u.Set(cond.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CondUpsert) UpdateCreatedAt() *CondUpsert {
	u.SetExcluded(cond.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CondUpsert) AddCreatedAt(v uint32) *CondUpsert {
	u.Add(cond.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CondUpsert) SetUpdatedAt(v uint32) *CondUpsert {
	u.Set(cond.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CondUpsert) UpdateUpdatedAt() *CondUpsert {
	u.SetExcluded(cond.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CondUpsert) AddUpdatedAt(v uint32) *CondUpsert {
	u.Add(cond.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CondUpsert) SetDeletedAt(v uint32) *CondUpsert {
	u.Set(cond.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CondUpsert) UpdateDeletedAt() *CondUpsert {
	u.SetExcluded(cond.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CondUpsert) AddDeletedAt(v uint32) *CondUpsert {
	u.Add(cond.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *CondUpsert) SetEntID(v uuid.UUID) *CondUpsert {
	u.Set(cond.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CondUpsert) UpdateEntID() *CondUpsert {
	u.SetExcluded(cond.FieldEntID)
	return u
}

// SetCondType sets the "cond_type" field.
func (u *CondUpsert) SetCondType(v string) *CondUpsert {
	u.Set(cond.FieldCondType, v)
	return u
}

// UpdateCondType sets the "cond_type" field to the value that was provided on create.
func (u *CondUpsert) UpdateCondType() *CondUpsert {
	u.SetExcluded(cond.FieldCondType)
	return u
}

// ClearCondType clears the value of the "cond_type" field.
func (u *CondUpsert) ClearCondType() *CondUpsert {
	u.SetNull(cond.FieldCondType)
	return u
}

// SetTestCaseID sets the "test_case_id" field.
func (u *CondUpsert) SetTestCaseID(v uuid.UUID) *CondUpsert {
	u.Set(cond.FieldTestCaseID, v)
	return u
}

// UpdateTestCaseID sets the "test_case_id" field to the value that was provided on create.
func (u *CondUpsert) UpdateTestCaseID() *CondUpsert {
	u.SetExcluded(cond.FieldTestCaseID)
	return u
}

// ClearTestCaseID clears the value of the "test_case_id" field.
func (u *CondUpsert) ClearTestCaseID() *CondUpsert {
	u.SetNull(cond.FieldTestCaseID)
	return u
}

// SetCondTestCaseID sets the "cond_test_case_id" field.
func (u *CondUpsert) SetCondTestCaseID(v uuid.UUID) *CondUpsert {
	u.Set(cond.FieldCondTestCaseID, v)
	return u
}

// UpdateCondTestCaseID sets the "cond_test_case_id" field to the value that was provided on create.
func (u *CondUpsert) UpdateCondTestCaseID() *CondUpsert {
	u.SetExcluded(cond.FieldCondTestCaseID)
	return u
}

// ClearCondTestCaseID clears the value of the "cond_test_case_id" field.
func (u *CondUpsert) ClearCondTestCaseID() *CondUpsert {
	u.SetNull(cond.FieldCondTestCaseID)
	return u
}

// SetArgumentMap sets the "argument_map" field.
func (u *CondUpsert) SetArgumentMap(v string) *CondUpsert {
	u.Set(cond.FieldArgumentMap, v)
	return u
}

// UpdateArgumentMap sets the "argument_map" field to the value that was provided on create.
func (u *CondUpsert) UpdateArgumentMap() *CondUpsert {
	u.SetExcluded(cond.FieldArgumentMap)
	return u
}

// ClearArgumentMap clears the value of the "argument_map" field.
func (u *CondUpsert) ClearArgumentMap() *CondUpsert {
	u.SetNull(cond.FieldArgumentMap)
	return u
}

// SetIndex sets the "index" field.
func (u *CondUpsert) SetIndex(v uint32) *CondUpsert {
	u.Set(cond.FieldIndex, v)
	return u
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *CondUpsert) UpdateIndex() *CondUpsert {
	u.SetExcluded(cond.FieldIndex)
	return u
}

// AddIndex adds v to the "index" field.
func (u *CondUpsert) AddIndex(v uint32) *CondUpsert {
	u.Add(cond.FieldIndex, v)
	return u
}

// ClearIndex clears the value of the "index" field.
func (u *CondUpsert) ClearIndex() *CondUpsert {
	u.SetNull(cond.FieldIndex)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Cond.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cond.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CondUpsertOne) UpdateNewValues() *CondUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(cond.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Cond.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CondUpsertOne) Ignore() *CondUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CondUpsertOne) DoNothing() *CondUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CondCreate.OnConflict
// documentation for more info.
func (u *CondUpsertOne) Update(set func(*CondUpsert)) *CondUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CondUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CondUpsertOne) SetCreatedAt(v uint32) *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CondUpsertOne) AddCreatedAt(v uint32) *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CondUpsertOne) UpdateCreatedAt() *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CondUpsertOne) SetUpdatedAt(v uint32) *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CondUpsertOne) AddUpdatedAt(v uint32) *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CondUpsertOne) UpdateUpdatedAt() *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CondUpsertOne) SetDeletedAt(v uint32) *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CondUpsertOne) AddDeletedAt(v uint32) *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CondUpsertOne) UpdateDeletedAt() *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CondUpsertOne) SetEntID(v uuid.UUID) *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CondUpsertOne) UpdateEntID() *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.UpdateEntID()
	})
}

// SetCondType sets the "cond_type" field.
func (u *CondUpsertOne) SetCondType(v string) *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.SetCondType(v)
	})
}

// UpdateCondType sets the "cond_type" field to the value that was provided on create.
func (u *CondUpsertOne) UpdateCondType() *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.UpdateCondType()
	})
}

// ClearCondType clears the value of the "cond_type" field.
func (u *CondUpsertOne) ClearCondType() *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.ClearCondType()
	})
}

// SetTestCaseID sets the "test_case_id" field.
func (u *CondUpsertOne) SetTestCaseID(v uuid.UUID) *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.SetTestCaseID(v)
	})
}

// UpdateTestCaseID sets the "test_case_id" field to the value that was provided on create.
func (u *CondUpsertOne) UpdateTestCaseID() *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.UpdateTestCaseID()
	})
}

// ClearTestCaseID clears the value of the "test_case_id" field.
func (u *CondUpsertOne) ClearTestCaseID() *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.ClearTestCaseID()
	})
}

// SetCondTestCaseID sets the "cond_test_case_id" field.
func (u *CondUpsertOne) SetCondTestCaseID(v uuid.UUID) *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.SetCondTestCaseID(v)
	})
}

// UpdateCondTestCaseID sets the "cond_test_case_id" field to the value that was provided on create.
func (u *CondUpsertOne) UpdateCondTestCaseID() *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.UpdateCondTestCaseID()
	})
}

// ClearCondTestCaseID clears the value of the "cond_test_case_id" field.
func (u *CondUpsertOne) ClearCondTestCaseID() *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.ClearCondTestCaseID()
	})
}

// SetArgumentMap sets the "argument_map" field.
func (u *CondUpsertOne) SetArgumentMap(v string) *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.SetArgumentMap(v)
	})
}

// UpdateArgumentMap sets the "argument_map" field to the value that was provided on create.
func (u *CondUpsertOne) UpdateArgumentMap() *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.UpdateArgumentMap()
	})
}

// ClearArgumentMap clears the value of the "argument_map" field.
func (u *CondUpsertOne) ClearArgumentMap() *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.ClearArgumentMap()
	})
}

// SetIndex sets the "index" field.
func (u *CondUpsertOne) SetIndex(v uint32) *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *CondUpsertOne) AddIndex(v uint32) *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *CondUpsertOne) UpdateIndex() *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *CondUpsertOne) ClearIndex() *CondUpsertOne {
	return u.Update(func(s *CondUpsert) {
		s.ClearIndex()
	})
}

// Exec executes the query.
func (u *CondUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CondCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CondUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CondUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CondUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CondCreateBulk is the builder for creating many Cond entities in bulk.
type CondCreateBulk struct {
	config
	builders []*CondCreate
	conflict []sql.ConflictOption
}

// Save creates the Cond entities in the database.
func (ccb *CondCreateBulk) Save(ctx context.Context) ([]*Cond, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Cond, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CondMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CondCreateBulk) SaveX(ctx context.Context) []*Cond {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CondCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CondCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Cond.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CondUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ccb *CondCreateBulk) OnConflict(opts ...sql.ConflictOption) *CondUpsertBulk {
	ccb.conflict = opts
	return &CondUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Cond.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ccb *CondCreateBulk) OnConflictColumns(columns ...string) *CondUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CondUpsertBulk{
		create: ccb,
	}
}

// CondUpsertBulk is the builder for "upsert"-ing
// a bulk of Cond nodes.
type CondUpsertBulk struct {
	create *CondCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Cond.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cond.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CondUpsertBulk) UpdateNewValues() *CondUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(cond.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Cond.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CondUpsertBulk) Ignore() *CondUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CondUpsertBulk) DoNothing() *CondUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CondCreateBulk.OnConflict
// documentation for more info.
func (u *CondUpsertBulk) Update(set func(*CondUpsert)) *CondUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CondUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CondUpsertBulk) SetCreatedAt(v uint32) *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CondUpsertBulk) AddCreatedAt(v uint32) *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CondUpsertBulk) UpdateCreatedAt() *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CondUpsertBulk) SetUpdatedAt(v uint32) *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CondUpsertBulk) AddUpdatedAt(v uint32) *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CondUpsertBulk) UpdateUpdatedAt() *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CondUpsertBulk) SetDeletedAt(v uint32) *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CondUpsertBulk) AddDeletedAt(v uint32) *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CondUpsertBulk) UpdateDeletedAt() *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CondUpsertBulk) SetEntID(v uuid.UUID) *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CondUpsertBulk) UpdateEntID() *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.UpdateEntID()
	})
}

// SetCondType sets the "cond_type" field.
func (u *CondUpsertBulk) SetCondType(v string) *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.SetCondType(v)
	})
}

// UpdateCondType sets the "cond_type" field to the value that was provided on create.
func (u *CondUpsertBulk) UpdateCondType() *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.UpdateCondType()
	})
}

// ClearCondType clears the value of the "cond_type" field.
func (u *CondUpsertBulk) ClearCondType() *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.ClearCondType()
	})
}

// SetTestCaseID sets the "test_case_id" field.
func (u *CondUpsertBulk) SetTestCaseID(v uuid.UUID) *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.SetTestCaseID(v)
	})
}

// UpdateTestCaseID sets the "test_case_id" field to the value that was provided on create.
func (u *CondUpsertBulk) UpdateTestCaseID() *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.UpdateTestCaseID()
	})
}

// ClearTestCaseID clears the value of the "test_case_id" field.
func (u *CondUpsertBulk) ClearTestCaseID() *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.ClearTestCaseID()
	})
}

// SetCondTestCaseID sets the "cond_test_case_id" field.
func (u *CondUpsertBulk) SetCondTestCaseID(v uuid.UUID) *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.SetCondTestCaseID(v)
	})
}

// UpdateCondTestCaseID sets the "cond_test_case_id" field to the value that was provided on create.
func (u *CondUpsertBulk) UpdateCondTestCaseID() *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.UpdateCondTestCaseID()
	})
}

// ClearCondTestCaseID clears the value of the "cond_test_case_id" field.
func (u *CondUpsertBulk) ClearCondTestCaseID() *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.ClearCondTestCaseID()
	})
}

// SetArgumentMap sets the "argument_map" field.
func (u *CondUpsertBulk) SetArgumentMap(v string) *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.SetArgumentMap(v)
	})
}

// UpdateArgumentMap sets the "argument_map" field to the value that was provided on create.
func (u *CondUpsertBulk) UpdateArgumentMap() *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.UpdateArgumentMap()
	})
}

// ClearArgumentMap clears the value of the "argument_map" field.
func (u *CondUpsertBulk) ClearArgumentMap() *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.ClearArgumentMap()
	})
}

// SetIndex sets the "index" field.
func (u *CondUpsertBulk) SetIndex(v uint32) *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *CondUpsertBulk) AddIndex(v uint32) *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *CondUpsertBulk) UpdateIndex() *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.UpdateIndex()
	})
}

// ClearIndex clears the value of the "index" field.
func (u *CondUpsertBulk) ClearIndex() *CondUpsertBulk {
	return u.Update(func(s *CondUpsert) {
		s.ClearIndex()
	})
}

// Exec executes the query.
func (u *CondUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CondCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CondCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CondUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
